'''
1.  想一起学习软件开发或对本软件好的改进建议可加我微信：MissYuanxi
2.  本人是软件开发爱好者，不喜勿喷。本人也是俗人，也要为柴米油盐发愁，如果好用，资助1块、2块也不嫌少，哈哈哈
'''


#-*-coding:utf-8-*-

from email.header import decode_header
from email.header import Header
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.parser import Parser
from email.utils import formataddr
from email.utils import parseaddr
from enum import Enum
from io import BytesIO

import base64
import codecs
import datetime
import json
import os
import poplib
import re
import shutil
import smtplib
import socket
import sqlite3
import subprocess
import threading
import time
import wx
import wx.adv
import wx.stc

'''
常量类
author 一心
'''
class Constants:
    APP_VERSION = 'V1.3.1m' #版本号
    APP_ICON = 'iVBORw0KGgoAAAANSUhEUgAAAMgAAADICAYAAACtWK6eAAAAAXNSR0IArs4c6QAAAERlWElmTU0AKgAAAAgAAYdpAAQAAAABAAAAGgAAAAAAA6ABAAMAAAABAAEAAKACAAQAAAABAAAAyKADAAQAAAABAAAAyAAAAACbWz2VAAAMU0lEQVR4Ae2dTWxcVxXHjz0Tk2IrWPmgaVzUpgQISWlSHNtKqlJB1VYQvoqQyoIqUoXYpAuWoQsWbAAhIbqolK5QBQKBgCxQoSAqtVRt5C+KmxYKpE7SEqf0I3aq4NT2fHAusVtL1O545r177pn3u9LTjDxv7vmf37l/vztv3psrQoMABCAAAQhAAAIQgAAEIAABCEAAAhCAAAQgAAEIQAAC7UmgI8G0OoeGhrYtLCzc0tHRcbtuu+r1+hbVWc5aa09Pz7re3t6u7u7ucldXV6lWq9VnZ2crMzMzc9PT0/NZx1vsL/R7UXM6r7m9klOM5LvV/N/U/E/r42TYlP/k8PDwlAqvpSQ+GYMMDg5uqlarhxXOvboFQ9CKR+Ccpny0VCo9MDIy8noK6ZsbZP/+/VfMz89/Q2Ec0W1DClDQYE7gDVXwXT2q/PD48eOXLNWYGmRgYOCATmseUgA7LCEQO1kCJzs7Ow+Njo4+ZaWwZBV437599+jc81caf7OVBuImT2CjjpFDfX19Z6empp62UGtiEDXH3Zr4jzRhk/gWoInZNIFOfefn1SSTapJnmu6lyTdGn2LptGpAp1VPqN73NKmZtxWTwJxOt27W6dZozPSjGkRP326oVCp/0QS3x0ySWG1D4FS5XN6rp4PDh/goLRy+ojU1x3c0GOaIRrztAm1fHEPREot2BOnv7/+YZhU+aPG5I1p52zJQVbO6cXx8/ESM7GIeQb6lCWGOGFVt7xhhDIWxFKVFOYLs2bOnT+eOZzQjDBKlrG0fpKpTrWsmJibO5p1plCOImuPLmCPvUhaq/9LimMo96SgG0YvSbs09EwIUikCsMRXFIPql4J5CVY9kcycQa0xFMYjS2pY7MQIUjUCUMZX5PRYrVClWnBXCi+i3sKKH5RVfb+QFvRy/kd3YJw6BKGMqSpBWedX7bpXqge+11M0P7hT51Ieb76Kqt/H0f7/597/1zlpF3eoC+1uS83hSOn5EOv71xzy6zrTPWFOs1kS3+J+/teAZvxtzZAw03+58GCRfBvQOgRUJYJAV0fACBHQ2DAQIQGBlAhhkZTa8AgGOIIwBCKxGgCPIanR4rfAEMEjhhwAAViOAQVajw2uFJ4BBCj8EALAaAQyyGh1eKzwBDFL4IQCA1QhgkNXo8FrhCWCQwg8BAKxGAIOsRofXCk+AGxMSGAJXvU9vudSFH7b0iNQT0BNuK7u0IHL6vMgZ3YrcMIhh9XdvFbnjoyKf2CFy7UZDISuErqlbf/83kUd0e/zkCju1+Z8xiFGBP3e9yF0fF7n+KiMBDYTt1EPJp3eJfPJDIj8ZE/mx/mz0BdPlbBoQnfEuGCRjoI10F8xx5DaR7q5G9rbfZ/06ka/t15/j19Fy/2MilaRWEcyXDx/S8+X7f72HaVU4cngxx/IE7h4Q+VLBfsAJgywfARGeh88cKU+r3g3Bwd1q7gKt7IJB3m1EZPh6OFsVPpB7bnv6RG7a7jmDtWnHIGvj1dLe4VRuimer1prUzivX+g6/+2OQiLUL33O0Q9uqRi9KwyBFqTR5NkUAgzSFrbk3vXqxufel9q6Xo60QaJ85BolYgykdWOHyDe/t+X97z6Bx/RikcVYt73nugsifnF+yEdZ0evJUyyjcdIBBIpcqXNv07LnIQTMM9/BzIv+Zy7DDxLvCIJEL9NzLIj//sw6y+ciBMwgXrsX69UQGHTnqgmuxDIr1m2cvB039YsUlNG/qpe9LFysW6TqskD8GWRoFkR+DSSZf43L3yNjXHA6DrBlZdm8I062w/UynXNwwlR3XLHvCIFnSbLKvcHYrbLT0CPAhPb2aoCghAhgkoWIgJT0CGCS9mqAoIQIYJKFiICU9AhgkvZqgKCECGCShYiAlPQIYJL2aoCghAhgkoWIgJT0CGCS9mqAoIQIYJKFiICU9AhgkvZqgKCECGCShYiAlPQIYJL2aoCghAhgkoWIgJT0CGCShmnSV0hATFtAJG407Ck3HwBW6rMB+/Z3boWtE9l4t8n795cUN600l/S94uK32rN6f8oLe8Tj24uXFc4r0W1jLK8ANU8tpRHz+wc0iX9XlBO68IWLQBkOVdF5x3abL220fubyIzk/HRP7wfIMdtNFuGMSgmP0f0AVpDujR41qD4E2E3Ku/6L65+/KyB8cK9qsmfAZpYsC08pawcM5X+v2YYynXq3tFDt8scqBASx+E3DHI0giI9PgFnVKFaYvHFo4in9UFdIr0AR6DRBypZT1LdcfOiAFzCPUZNUg4oVCUhkEiVjqsTxhWaPLebsQg3kuYpv6N701T11pVbdczXEVpHEEiVjoso9wOLXx/U5SGQSJW+pL+xm07tNfaZCGgRmqBQRqhlNE+YfGcWj2jzgy7+cerhsEjh8YgEYGfUYOE9UE8txenRU5Mec5gbdoxyNp4tbz3I2qQsJyA1/bo30X+yRHEa/nS1/24LsEW1trw2J54QeS3f/WovHnNHEGaZ9f0O8NKTWHz1II5jj5ZrKNHqE+bnHj0NNRELlwSuf8xkZd0Pn9wd9pfHobPHGFaFY4cRZpaLY0oDLJEIvJjuOfiF0+LPKwD7ya9AHDnlSJbN4isT6Ai4UxbOJUbzlaFD+RFNMbScEigHEtSivkYVowN91kU8V4LDxXnM4iHKqHRjAAGMUNPYA8EMIiHKqHRjAAGMUNPYA8EMIiHKqHRjAAGMUNPYA8EMIiHKqHRjAAGMUNPYA8EMIiHKqHRjAAGMUNPYA8EMIiHKqHRjAAGMUNPYA8EMIiHKqHRjAAGMUNPYA8EMIiHKqHRjAAGMUNPYA8EMIiHKqHRjAAGMUNPYA8EMIiHKqHRjAAGMUNPYA8EMIiHKqHRjAAGMUNPYA8EMIiHKqHRjAAGMUNPYA8EMIiHKqHRjAAGMUNPYA8EMIiHKqHRjAAGMUNPYA8EMIiHKqHRjAAGMUNPYA8EMIiHKqHRjAAGMUNPYA8EMIiHKqHRjAAGMUNPYA8EMIiHKqHRjAAGMUNPYA8EMIiHKqHRjAAGMUNPYA8EMIiHKqHRjAAGMUNPYA8EMIiHKqHRjAAGMUNPYA8EMIiHKqHRjAAGMUNPYA8EMIiHKqHRjAAGMUNPYA8EMIiHKqHRjAAGMUNPYA8EMIiHKqHRjAAGMUNPYA8EMIiHKqHRjAAGMUNPYA8EMIiHKqHRjAAGMUNPYA8EMIiHKqHRjAAGMUNPYA8EMIiHKqHRjAAGMUNPYA8EMIiHKqHRjAAGMUNPYA8EMIiHKqHRjAAGMUNPYA8EMIiHKqHRjAAGMUNPYA8EMIiHKqHRjAAGMUNPYA8EMIiHKqHRjAAGMUNPYA8EMIiHKqHRjAAGMUNPYA8EMIiHKqHRjAAGMUNPYA8EMIiHKqHRjAAGMUNPYA8EMIiHKqHRjAAGMUNPYA8EMIiHKqHRjAAGMUNPYA8EMIiHKqHRjAAGMUNPYA8EMIiHKqHRjIAPg9TrZoAyD1yrZN4lHeZHoCO/rt/uub+/33yEd3Z2SkdHa+lWq9W3k+KZOYHx8fHWCtpABuUG9slil/BvM1asd9Rbq9Xe8e/80S2BKIfiWFOsKbdlQHiqBKKMqSgG0anNRKqU0eWTQKwxFcUg9Xr9UZ9lQHWqBGKNqSgGqVQqv1TQfMJNdbT501VdHFO5K49ikImJibOaybHcsyFAUQgcWxxTuecbxSCLWXxbHzmK5F7Stg8QxlAYS1FaNIPoOesTmtGDUbIiSDsTeHBxLEXJMZpBQjblcvmb+nAqSmYEaUcCpxbHULTcohpkeHj4Df1G+y7Nbi5ahgRqFwJzYeyEMRQzoVLMYCHWlLa+vr4z+vSLuuV+qUCISXNPoK7fe9wzNjb2u9iZRDdISFA98oya5CV9elC3qEexEJ/mikBFzfF1NcdDFqpN/4MPDAwc0GukQuI7LJInZvIETuq06tDo6OhTVkpN/3uHxLu6um7Q5O/TLerc0go4cRsiEMbCfWFsWJojKDU9gixHNTg4uEkvJz+sf7tXty3LX+N5YQic00yPlkqlB0ZGRl5PIetkDLIMRufQ0NC2hYWFW3Tuebtuu/S6m2CYzC+X7+npWdfb29vV3d1d1v9WJZ3u1WdnZyszMzNz09PT88s0Zfk09HtRczqvub2SZcee+tL839T8T+vjZNiU/6SeoQpX6HJfgqdCohUCEIAABCAAAQhAAAIQgAAEIAABCEAAAhCAAAQgAAG3BP4L4oILKaDFEF8AAAAASUVORK5CYII=' #应用图标
    APP_NAME = '任务管理'  # 应用名称

    TASK_DATA = 'task.data' #数据保存文件名

    SOCKET_BUFFER = 4096 #Socket通讯缓存大小
    
    PACKET_HEADER = 40 #报文头长度
    PACKET_LENGTH = 20 #报文长度长度
    MSG_ENCODING = 'UTF-8' #报文编码
    MSG_WINDOW_DELAY = 1 #报文窗口延迟显示时间（秒）
    MSG_EXCHANGE_DURATION = 30 #报文交互等待时长（秒）
    MSG_EMAIL_INTERVAL = 1 #EMAIL交互报文时间间隔（秒）
    
    FILE_BUFFER = 4096 #文件缓存大小

    WMAIL_RECV_CACHE = os.path.join(os.path.expanduser('~'),'TaskManager') #微邮缓存路径

    WCHAT_QR_CODE = '' #微信二维码
    WCHAT_FINANCES_QR_CODE = '' #微信资助二维码
    ALIPAY_FINANCES_QR_CODE = ''  # 支付宝资助二维码

    EMAIL_ENCODING = 'UTF-8'

'''
正则常量
'''
class RegEx:
    EMAIL_ADDRESS = re.compile('^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,7}$') #电子邮件地址校验

'''
配置参数名枚举
author 一心
'''
class ConfigName(Enum):
    SERVER_PORT = 'server.port' #沟通服务端口号
    SERVER_BACKLOG = 'server.backlog' #沟通服务最大等待数

'''
登录状态枚举
'''
class LoginStatus(Enum):
    USERNAME_PASSWORD_SUCCESS = 0 #用户名、密码正确
    USERNAME_PASSWORD_ERROR = 1 #用户名、密码错误
    USERNAME_NOT_EXIST = 10 #用户名不存在
    UNACTIVATED_USERNAME = 20 #未激活用户
    DUPLICATE_USERNAME = 40 #用户名重复
    USERNAME_OTHER_ERROR = 49 #用户名异常
    PASSWORD_NOT_EXIST = 50 #密码不存在
    PASSWORD_EXPIRE = 60 #密码过期
    DUPLICATE_PASSWORD = 90 #密码重复
    PASSWORD_OTHER_ERROR = 99 #密码异常
    
'''
用户状态枚举
author 一心
'''
class UserStatus(Enum):
    UNACTIVATED = 0 #未激活的

'''
用户类型枚举
author 一心
'''
class UserType(Enum):
    ORDINARY = 90 #普通的

'''
密码状态枚举
author 一心
'''
class PasswordStatus(Enum):
    ACTIVATED = 1 #已激活的

'''
参数名枚举
author 一心
'''
class ParameterName(Enum):
    TASK_ID = 'task.id' #任务标识
    TASK_ID_LOCK = 'task.id.lock' #任务标识锁
    TOOL_ID = 'tool.id' #工具标识
    CONTACT_ID = 'contact.id' #通讯录标识
    EMAIL_ID = 'email.id' #电子邮件标识
    EMAIL_ATTACHMENT_ID = 'email.attachment.id' #电子邮件附件标识
    APPLICATION_ID = 'application.id' #应用标识
    PASSKEY_ID = 'passkey_id' #密钥标识
    ACCESS_ID = 'access_id' #访问地址标识

'''
任务状态枚举
'''
class TaskStatus(Enum):
    PENDING = 0 #待处理
    PROCESSING = 1 #处理中
    COMPLETED = 2 #已完成

'''
报文类型枚举
author 一心
'''
class MsgType(Enum):
    CHAT = 10 #聊天
    FILE = 20 #文件
    COMMAND = 30 #命令

'''
操作枚举
author 一心
'''
class Operate(Enum):
    ADD = 10 #增加
    MODIFY = 20 #修改
    VIEW = 40 #查看

'''
工具类型枚举
'''
class ToolType(Enum):
    SELF_DEFINED = 10 #自定义
    THIRD_PARTY = 20 #第三方

'''
工具环境枚举
'''
class ToolEnv(Enum):
    WINDOWS = 10
    MAC = 20
    LINUX = 30

'''
工具状态枚举
'''
class ToolStatus(Enum):
    NORMAL = 0 #正常

'''
电子邮箱枚举
'''
class EMailBox(Enum):
    IN_BOX = 10 #收件箱
    OUT_BOX = 20 #发件箱

'''
电子邮件状态枚举
'''
class EMailStatus(Enum):
    UNREAD = 0 #未读
    READED = 1 #已读
    UNSEND = 10 #未发送
    SENDED = 11 #已发送


'''
通用异常类
author 一心
'''
class CommonException(Exception):
    message = None

    '''
    初始化
    param message 异常描述
    '''
    def __init__(self,message):
        self.message = message

'''
SQLite数据库管理类
author 一心
'''
class Sqlite3Manager:
    name = None
    connector = None

    '''
    初始化
    param name 数据库文件名
    '''
    def __init__(self,name):
        self.name = name
        self.connect()

    '''
    连接数据库
    return SQL语句执行对象
    '''
    def connect(self):
        if not self.connector:
            self.connector = sqlite3.connect(self.name)
            self.connector.row_factory = sqlite3.Row
        
        return (self.connector.cursor())

    '''
    批量执行SQL语句
    param sqls SQL语句数组(格式：[['INSERT INTO ...',(parameters)]['INSERT INTO ...',(parameters)]])
    return 更新记录行数
    '''
    def execute(self,sqls):
        try:
            cursor = self.connect()
            affect = 0
            for sql in sqls:
                cursor.execute(sql[0],sql[1])
                affect = affect + cursor.rowcount
            cursor.close()
            
            return affect
        except Exception as e:
            print('SQL[',sqls,']执行错误[',e,']')
            traceback.print_exc()
            
            self.close()

            raise e

    '''
    执行查询SQL语句
    param sql SQL语句
    param page_size 页大小
    param page_no 页码(从1开始)
    return 返回查询结果(格式：(总行数,(结果集)))
    '''
    def query(self,sql,page_size = -1,page_no = 0):
        command = sql[0]
        try:
            cursor = self.connect()
            sql[0] = 'SELECT COUNT(*) FROM (' + command + ')' #总行数
            cursor.execute(sql[0],sql[1])
            total = cursor.fetchone()[0]
            if (page_size <  0) or (page_no < 1):
                sql[0] = command
            else:
                sql[0] = command + ' LIMIT ' + str(page_size) + ' OFFSET ' + str(page_size * (page_no - 1)) #分页
            cursor.execute(sql[0],sql[1])
            result = cursor.fetchall()
            cursor.close()
            
            return (total,result)
        except Exception as e:
            print('SQL[',sql,']执行错误[',e,']')
            traceback.print_exc()

            self.close()

            raise e

    '''
    加行锁
    param name 锁名称
    '''
    def lock_row(self,name):
        cursor = self.connect()
        try:
            cursor.execute('SELECT lock_value FROM lock WHERE (lock_name = ?)',(name,))
            lock = cursor.fetchone()
            if lock:
                while 'locked' == lock[0]:
                    time.sleep(0.001)
                    cursor.execute('SELECT lock_value FROM lock WHERE (lock_name = ?)',(name,))
                    lock = cursor.fetchone()
                cursor.execute('UPDATE lock SET lock_value = ?,host_time = ? WHERE (lock_name = ?)',('locked',datetime.datetime.now(),name))
            else:
                cursor.execute('INSERT INTO lock VALUES (?,?,?,?)',(name,'locked',None,datetime.datetime.now()))
            cursor.close()
            self.commit()
        except Exception as e:
            self.rollback()
            self.close()

            raise e

    '''
    解行锁
    param name 锁名称
    '''
    def unlock_row(self,name):
        try:
            cursor = self.connect()
            cursor.execute('UPDATE lock SET lock_value = ?,host_time = ? WHERE (lock_name = ?)',('unlock',datetime.datetime.now(),name))
            cursor.close()
            self.commit()
        except Exception as e:
            self.rollback()
            self.close()

            raise e
        
    '''
    提交
    '''
    def commit(self):
        self.connector.commit()

    '''
    回滚
    '''
    def rollback(self):
        self.connector.rollback()

    '''
    断开数据库连接
    '''
    def close(self):
        try:
            self.connector.close()
        except Exception as e:
            print('数据连接关闭错误[',e,']')
        finally:
            self.connector = None

    '''
    字典类型条件转为SQL语句形式
    param condition 字典类型条件
    return SQL语句形式件
    '''
    def and_condition(self,condition):
        keys = ''
        values = []
        for key,value in condition.items():
            if value:
                keys = keys + ' AND (' + key + ' = ?)'
                values.append(value)

        return (keys,tuple(values))
    
'''
配置辅助类
author 一心
'''
class ConfigDao:
    '''
    获取本地配置值
    param name 配置名称
    return 配置值
    '''
    @staticmethod
    def obt_value(name):
        global task_data
        config = task_data.query(['SELECT * FROM config WHERE (conf_name = ?)',(name,)])
        if 1 < config[0]:
            task_data.rollback()

            raise CommonException('配置名称[' + name + ']重复')
        if 0 == config[0]:
            task_data.rollback()

            raise CommonException('配置名称[' + name + ']不存在')
        task_data.commit()

        return (config[1][0]['conf_value'])

'''
工具类
author 一心
'''
class Tools:
    '''
    获取本地IP地址
    return 本地IP地址
    '''
    @staticmethod
    def obt_ip():
        with socket.socket(socket.AF_INET,socket.SOCK_DGRAM) as link:
            try:
                link.connect(('10.255.255.255',1))
                ip = link.getsockname()[0]
            except Exception as e:
                ip = '127.0.0.1'
                traceback.print_exc()

            return ip

    '''
    获取可保存文件名
    param filename 初始文件名
    return 可保存文件名
    '''
    @staticmethod
    def obt_save_filename(filename):
        i = 0
        ext = os.path.splitext(filename)
        while os.path.isfile(filename):
            i = i + 1
            filename = ext[0] + '(' + str(i) + ')' + ext[1]

        return filename

    '''
    统计双字节字符数
    param sequence 字符序列
    return 双字节字符数
    '''
    @staticmethod
    def count_word(sequence):
        pattern = re.compile(r'[^\x00-\xff]')
        count = 0;
        for char in sequence:
            if pattern.search(char):
                count = count + 1

        return count

    '''
    图片转换为ICON图标
    param 图片
    return ICON图标
    '''
    def image2icon(image):
        icon = wx.Icon()
        icon.CopyFromBitmap(wx.Bitmap(wx.Image(BytesIO(image))))

        return icon

'''
参数辅助类
author 一心
'''
class ParameterDao:
    '''
    自动递增参数
    param name 参数名称
    return 自动递增后的参数值
    '''
    @staticmethod
    def auto_increment(name):
        global task_data
        task_data.lock_row(name)
        try:
            cursor = task_data.connect()
            cursor.execute('SELECT param_value FROM parameter WHERE (param_name = ?)',(name,))
            parameter = cursor.fetchall()
            count = len(parameter)
            if 1 < count:
                task_data.rollback()
                task_data.unlock_row(name)
                
                raise CommonException('参数名称[' + name + ']重复')
            if 0 == count:
                value = 1
                cursor.execute('INSERT INTO parameter VALUES (?,?,?,?)',(name,value,'自动递增参数',datetime.datetime.now()))
                task_data.commit()
                task_data.unlock_row(name)
                
                return value
            value = int(parameter[0]['param_value']) + 1
            cursor.execute('UPDATE parameter SET param_value = ?,host_time = ? WHERE (param_name = ?)',\
                    (value,datetime.datetime.now(),name))
            task_data.commit()
            task_data.unlock_row(name)

            return value
        except Exception as e:
            task_data.unlock_row(name)

            raise e

'''
EMail认证辅助类
author 一心
'''
class EMailIdentificationDao:
    '''
    根据主键获取EMail认证信息
    param email EMail地址
    return EMail认证信息
    '''
    @staticmethod
    def obt_by_primary_key(email):
        global task_data
        email_identification = task_data.query(['SELECT * FROM email_identification WHERE (email = ?)',(email,)])
        task_data.commit()
        if 0 == email_identification[0]:
            return None

        return email_identification[1][0]

'''
EMail服务辅助类
author 一心
'''
class EMailServerDao:
    '''
    根据主键获取EMail服务信息
    param provider_address EMail服务器地址
    return EMail服务信息
    '''
    @staticmethod
    def obt_by_primary_key(provider_address):
        global task_data
        email_server = task_data.query(['SELECT * FROM email_server WHERE (provider_address = ?)',(provider_address,)])
        task_data.commit()
        if 0 == email_server[0]:
            return None

        return email_server[1][0]

'''
用户操作辅助类
author 一心
'''
class UserDao:
    '''
    根据主键获取用户信息
    param user_id 用户唯一标识
    return 用户信息
    '''
    @staticmethod
    def obt_by_primary_key(user_id):
        global task_data
        user = task_data.query(['SELECT * FROM user WHERE (user_id = ?)',(user_id,)])
        task_data.commit()
        if 0 == user[0]:
            return None

        return user[1][0]

    '''
    根据用户名获取用户信息
    param username 用户名
    return 用户信息
    '''
    @staticmethod
    def obt_by_username(username):
        global task_data
        user = task_data.query(['SELECT * FROM user WHERE (username = ?)',(username,)])
        task_data.commit()
        if 0 == user[0]:
            return None

        return user[1][0]

'''
通讯录辅助类
author 一心
'''
class ContactDao:
    '''
    根据查询条件获取通讯录选项名称数组
    param condition 查询条件
    return 通讯录选项名称数组
    '''
    @staticmethod
    def list_cmbox_option(condition = {}):
        options = []

        global task_data
        filter = task_data.and_condition(condition)
        users = task_data.query(['SELECT * FROM contact WHERE (1 = 1)' + filter[0],filter[1]])
        task_data.commit()
        for user in users[1]:
            options.append( user['fullname'])

        return options

    '''
    根据查询条件列出通讯录信息
    param condition 查询条件
    param page_size 页面大小
    param page_no 页码
    return 通讯录信息
    '''
    @staticmethod
    def or_list(condition = {},page_size = -1,page_no = 0):
        sql = 'SELECT * FROM contact'
        if any(condition):
            sql = sql + ' WHERE (1 != 1)'
        filter = []

        global task_data
        contacts = task_data.query([sql,tuple(filter)],page_size,page_no)
        task_data.commit()

        return contacts

    '''
    根据主键获取通讯录信息
    param 通讯录标识
    return 通讯录信息
    '''
    @staticmethod
    def obt_by_primary_key(contact_id):
        global task_data
        contact = task_data.query(['SELECT * FROM contact WHERE (contact_id = ?)',(contact_id,)])
        task_data.commit()
        if 0 == contact[0]:
            return None

        return contact[1][0]

    '''
    根据查询条件列出通讯以及聊天地址信息
    param condition 查询条件
    page_size 页面大小
    page_no 页码
    return 通讯录以及聊天地址信息
    '''
    @staticmethod
    def or_list_chat_location(condition = {},page_size = -1,page_no = 0):
        sql = 'SELECT a.contact_id AS a_contact_id,\
                      a.fullname AS a_fullname,\
                      a.english_name AS a_english_name,\
                      b.address AS b_address,\
                      b.port AS b_port \
               FROM (contact AS a LEFT JOIN chat_location AS b ON (a.contact_id = b.contact_id))'
        if any(condition):
            sql = sql + ' WHERE (1 != 1)'
        filter = []

        global task_data
        contact_chat_locations = task_data.query([sql,tuple(filter)],page_size,page_no)
        task_data.commit()

        return contact_chat_locations

'''
通讯录聊天地址信息操作辅助类
author 一心
'''
class ChatLocationDao:
    '''
    根据主键获取通讯录聊天地址信息
    param contact_id 通讯录标识
    return 通讯录聊天地址信息
    '''
    @staticmethod
    def obt_by_primary_key(contact_id):
        global task_data
        chat_location = task_data.query(['SELECT * FROM chat_location WHERE (contact_id = ?)',(contact_id,)])
        task_data.commit()
        if 0 == chat_location[0]:
            return None

        return chat_location[1][0]

'''
应用信息操作辅助类
author 一心
'''
class ApplicationDao:
    '''
    根据应用关键字列出应用信息
    param condition 关键字条件
    param page_size 分页大小
    param page_no 页码
    return 应用信息列表
    '''
    @staticmethod
    def list_by_keyword(condition = {},page_size = -1,page_no = 0):
        sql = 'SELECT * FROM application'
        filter = []
        if condition.get('keyword'):
            sql = sql + ' WHERE (app_name LIKE \'%\'||?||\'%\') OR (app_desc LIKE \'%\'||?||\'%\')'
            filter.append(condition['keyword'])
            filter.append(condition['keyword'])

        global task_data
        applications = task_data.query([sql,tuple(filter)])
        task_data.commit()

        return applications

    '''
    根据主键获取应用信息
    param app_id 应用标识
    return 应用信息
    '''
    @staticmethod
    def obt_by_primary_key(app_id):
        global task_data
        application = task_data.query(['SELECT * FROM application WHERE (app_id = ?)',(app_id,)])
        task_data.commit()
        if 0 == application[0]:
            return None

        return application[1][0]

'''
密钥信息操作辅助类
author 一心
'''
class PasskeyDao:
    '''
    根据查询条件列出密钥信息
    param condition 查询条件
    param page_size 分页大小
    param page_no 页码
    return 密钥信息列表
    '''
    @staticmethod
    def and_list(condition = {},page_size = -1,page_no = 0):
        sql = 'SELECT \
                        a.passkey_id AS a_passkey_id,\
                        a.username AS a_username,\
                        a.description AS a_description,\
                        a.password AS a_password,\
                        b.app_name AS b_app_name \
               FROM (passkey AS a LEFT JOIN application AS b ON (a.app_id = b.app_id)) \
               WHERE (1 = 1)'
        filter = []
        if condition.get('a.app_id'):
            sql = sql + ' AND (a.app_id IN (' + ','.join('?' for c in condition['a.app_id']) + '))'
            filter.extend(condition['a.app_id'])
            
        global task_data
        passkeys = task_data.query([sql,tuple(filter)])
        task_data.commit()

        return passkeys

class AccessDao:
    '''
    根据查询条件列出访问地址信息
    param condition 查询条件
    param page_size 页面大小
    param page_no 页码
    return 访问地址列表
    '''
    @staticmethod
    def and_list(condition = {},page_size = -1,page_no = 0):
        sql = 'SELECT \
                        a.access_id AS a_access_id,\
                        a.address AS a_address,\
                        a.description AS a_description,\
                        b.app_name AS b_app_name \
               FROM (access AS a LEFT JOIN application AS b ON (a.app_id = b.app_id)) \
               WHERE (1 = 1)'
        filter = []
        if condition.get('a.app_id'):
            sql = sql + ' AND (a.app_id IN (' + ','.join('?' for c in condition['a.app_id']) + '))'
            filter.extend(condition['a.app_id'])

        global task_data
        accesses = task_data.query([sql,tuple(filter)])
        task_data.commit()

        return accesses

'''
任务操作辅助类
author 一心
'''
class TaskDao:
    '''
    根据查询条件列出任务信息
    param condition 查询条件
    param page_size 分页大小
    param page_no 页码
    return 任务信息
    '''
    @staticmethod
    def and_list(condition = {},page_size = -1,page_no = 0):
        sql = 'SELECT * FROM task WHERE (1 = 1)'
        filter = []
        if condition.get('task_name_key'):
            sql = sql + ' AND (task_name LIKE \'%\'||?||\'%\')'
            filter.append(condition['task_name_key'])
        if condition.get('leader_key'):
            sql = sql + ' AND (leader LIKE \'%\'||?||\'%\')'
            filter.append(condition['leader_key'])
        if condition.get('handler_key'):
            sql = sql + ' AND (handler LIKE \'%\'||?||\'%\')'
            filter.append(condition['handler_key'])
        if condition.get('start_add_date'):
            sql = sql + ' AND (add_time >= ?)'
            filter.append(condition['start_add_date'])
        if condition.get('end_add_date'):
            sql = sql + ' AND (SUBSTR(add_time,1,10) <= ?)'
            filter.append(condition['end_add_date'])
        if condition.get('start_schedule_date'):
            sql = sql + ' AND (schedule_time >= ?)'
            filter.append(condition['start_schedule_date'])
        if condition.get('end_schedule_date'):
            sql = sql + ' AND (SUBSTR(schedule_time,1,10) <= ?)'
            filter.append(condition['end_schedule_date'])
        if condition.get('start_complete_date'):
            sql = sql + ' AND (complete_time >= ?)'
            filter.append(condition['start_complete_date'])
        if condition.get('end_complete_date'):
            sql = sql + ' AND (SUBSTR(complete_time,1,10) <= ?)'
            filter.append(condition['end_complete_date'])
        if condition.get('task_status_key') and condition['task_status_key'] != -1:
            sql = sql + ' AND (task_status = ?)'
            filter.append(condition['task_status_key'])
        if condition.get('complete_description_key'):
            sql = sql + ' AND (complete_desc LIKE \'%\'||?||\'%\')'
            filter.append(condition['complete_description_key'])
        sql = sql + ' ORDER BY add_time DESC'
        
        global task_data
        tasks = task_data.query([sql,tuple(filter)])
        task_data.commit

        return tasks

    '''
    修改任务完成时间和状态
    param complete_desc 完成描述
    param complete_time 完成时间
    param task_status 任务状态
    return 完成任务数
    '''
    @staticmethod
    def modify_complete_desc_complete_time_task_status_by_primary_key(task_id,complete_desc,complete_time,task_status):
        global task_data
        affect = task_data.execute([['UPDATE task SET complete_desc = ?,complete_time = ?,task_status = ?,host_time = ? WHERE (task_id = ?)',\
                                     (complete_desc,complete_time,task_status.value,datetime.datetime.now(),task_id)]])
        task_data.commit()

        return affect

'''
工具箱操作辅助类
author 一心
'''
class ToolboxDao:
    '''
    根据查询条件列出工具信息
    param condition 查询条件
    param page_size 页面大小
    param page_no 页码
    return 工具信息
    '''
    @staticmethod
    def and_list(condition = {},page_size = -1,page_no = 0):
        global task_data
        filter = task_data.and_condition(condition)
        toolboxes = task_data.query(['SELECT * FROM toolbox WHERE (1 = 1) ' + filter[0] + ' ORDER BY sort_num ASC',filter[1]])
        task_data.commit()

        return toolboxes

    '''
    根据查询条件列出指定类型工具信息
    param tool_type 工具类型
    param condition 查询条件
    param page_size 页面大小
    param page_no 页码
    return 工具信息
    '''
    def or_list_by_tool_type(tool_type,condition = {},page_size = -1,page_no = 0):
        sql = 'SELECT * FROM toolbox WHERE (tool_type = ?)'
        if any(condition):
            sql = sql + ' AND (1 = 1)'
        filter = [tool_type]

        global task_data
        toolboxes = task_data.query([sql,tuple(filter)])
        task_data.commit()

        return toolboxes

'''
电子邮件辅助类
author 一心
'''
class EMailDao:
    '''
    根据全局唯一标识获取电子邮件
    param email_gid 全局唯一标识
    return 电子邮件信息
    '''
    @staticmethod
    def obt_by_email_gid(email_gid):
        global task_data
        email = task_data.query(['SELECT * FROM email WHERE (email_gid = ?)',(email_gid,)])
        task_data.commit()
        if 0 == email[0]:
            return None

        return email[1][0]

    '''
    根据主键获取电子邮件信息
    param email_id 电子邮件标识
    return 电子邮件信息
    '''
    @staticmethod
    def obt_by_primary_key(email_id):
        global task_data
        email = task_data.query(['SELECT * FROM email WHERE (email_id = ?)',(email_id,)])
        task_data.commit()
        if 0 == email[0]:
            return None

        return email[1][0]

    '''
    根据查询条件列出电子邮件信息
    param condition 查询条件
    page_size 页面大小
    page_no 页码
    return 电子邮件信息列表
    '''
    @staticmethod
    def and_list(condition = {},page_size = -1,page_no = 0):
        global task_data
        filter = task_data.and_condition(condition)
        emails = task_data.query(['SELECT * FROM email WHERE (1 = 1) ' + filter[0],filter[1]],page_size,page_no)
        task_data.commit()

        return emails

    '''
    修改电子邮件状态
    param email_id 电子邮件标识
    param email_status 电子邮件状态
    return 修改行数
    '''
    @staticmethod
    def modify_email_status_by_primary_key(email_id,email_status):
        global task_data
        affect = task_data.execute([['UPDATE email SET email_status = ? WHERE (email_id = ?)',(email_status,email_id)]])
        task_data.commit()

        return affect

'''
电子邮件附件类辅助类
author 一心
'''
class EMailAttachmentDao:
    '''
    根据电子邮件标识获取附件
    param email_id 电子邮件标识
    return 电子邮件附件数组
    '''
    @staticmethod
    def list_by_email_id(email_id):
        global task_data
        email_attachments = task_data.query(['SELECT * FROM email_attachment WHERE (email_id = ?)',(email_id,)])
        task_data.commit()
        if 0 == email_attachments[0]:
            return []

        return email_attachments[1]

    '''
    根据附件主键获取附件
    param att_id 附件标识
    return 附件信息
    '''
    @staticmethod
    def obt_by_primary_key(att_id):
        global task_data
        email_attachment = task_data.query(['SELECT * FROM email_attachment WHERE (att_id = ?)',(att_id,)])
        task_data.commit()
        if 0 == email_attachment[0]:
            return None

        return email_attachment[1][0]

'''
Socket处理辅助类
author 一心
'''
class SocketUtils:
    '''
    接收数据
    param socket Socket套接字
    param total 接收数据大小
    return 接收的数据
    '''
    @staticmethod
    def recv(socket,total):
        has_size = 0
        left_size = 0
        data = bytearray()
        while has_size < total:
            left_size = total - has_size
            if Constants.SOCKET_BUFFER < left_size:
                buffer = socket.recv(Constants.SOCKET_BUFFER)
            else:
                buffer = socket.recv(left_size)
            data = data + buffer
            has_size = has_size + len(buffer)
        print('接收数据=>',data)

        return data

    '''
    接收字符串
    param socket Socket套接字
    return 接收字符串
    '''
    @staticmethod
    def recv_str(socket):
        header = SocketUtils.recv(socket,Constants.PACKET_HEADER)
        length = int(header[0:Constants.PACKET_LENGTH].decode().strip())
        encoding = header[Constants.PACKET_LENGTH:].decode().strip()
        packet = SocketUtils.recv(socket,length)

        return (packet.decode(encoding))

    '''
    接收文件
    param socket Socket套接字
    param filename 接收文件名
    param callback 回调函数（主要用用显示接收进度）
    return 接收文件名
    '''
    @staticmethod
    def recv_file(socket,filename,callback = None):
        header = SocketUtils.recv(socket,Constants.PACKET_HEADER)
        file_size = int(header.decode().strip())
        has_size = 0
        left_size = 0
        with open(filename,'wb') as file:
            while has_size < file_size:
                left_size = file_size - has_size
                if Constants.FILE_BUFFER < left_size:
                    buffer = SocketUtils.recv(socket,Constants.FILE_BUFFER)
                else:
                    buffer = SocketUtils.recv(socket,left_size)
                has_size = has_size + file.write(buffer)
                if callback:
                    callback(file_size,has_size)

        return filename
    
    '''
    发送数据
    param socket Socket套接字
    return 发送数据大小
    '''
    def send(socket,data):
        length = len(data)
        has_size = 0
        left_size = 0
        size = 0
        while has_size < length:
            left_size = length - has_size
            if Constants.SOCKET_BUFFER < left_size:
                size = socket.send(data[has_size:has_size + Constants.SOCKET_BUFFER])
            else:
                size = socket.send(data[has_size:has_size + left_size])
            if -1 == size:
                return has_size
            has_size = has_size + size
        print('发送数据=>',data)

        return has_size

    '''
    发送字符串
    param socket Socket套接字
    param str 发送字符串
    param encoding 字符串编码
    return 发送数据大小
    '''
    @staticmethod
    def send_str(socket,sequence,encoding):
        data = sequence.encode(encoding)
        length = len(data)
        header = ('{:>' + str(Constants.PACKET_LENGTH) + '}{:>' + str(Constants.PACKET_HEADER - Constants.PACKET_LENGTH) + '}').format(length,encoding)
        if Constants.PACKET_HEADER != len(header):
            raise CommonException('字符串头长度[{}]与规范要求长度[{}]不符'.format(len(header),Constants.PACKET_HEADER))
        size = SocketUtils.send(socket,header.encode())
        if Constants.PACKET_HEADER != size:
            raise CommonException('发送字符串头长度[{}]与规范要求长度[{}]不符'.format(size,Constants.PACKET_HEADER))

        return (size + SocketUtils.send(socket,data))

    '''
    发送文件
    param socket Socket套接字
    param filename 发送文件名
    param callback 回调函数（主要用于显示发送进度）
    return 发送数据大小
    '''
    @staticmethod
    def send_file(socket,filename,callback = None):
        file_size = os.path.getsize(filename)
        header = ('{:>' + str(Constants.PACKET_HEADER) + '}').format(file_size)
        if Constants.PACKET_HEADER != len(header):
            raise CommonException('文件报文头长度[{}]与规范要求长度[{}]不符'.format(len(header),Constants.PACKET_HEADER))
        size = SocketUtils.send(socket,header.encode())
        if Constants.PACKET_HEADER != size:
            raise CommonException('发送文件报文头长度[{}]与规范要求长度[{}]不符'.format(size,Constants.PACKET_HEADER))
        has_size = 0
        left_size = 0
        with open(filename,'rb') as file:
            while has_size < file_size:
                left_size = file_size - has_size
                if Constants.FILE_BUFFER < left_size:
                    buffer = file.read(Constants.FILE_BUFFER)
                else:
                    buffer = file.read(left_size)
                has_size = has_size + SocketUtils.send(socket,buffer)
                if callback:
                    callback(file_size,has_size)

        return (size + has_size)

'''
聊天辅助类
author 一心
'''
class ChatUtils:
    '''
    发送报文
    param socket Socket套接字
    param msg 发送报文
    return 发送数据大小
    '''
    @staticmethod
    def send_msg(socket,msg):
        return (SocketUtils.send_str(socket, json.dumps(msg), Constants.MSG_ENCODING))

    '''
    接收报文
    param socket Socket套接字
    return 接收报文
    '''
    @staticmethod
    def recv_msg(socket):
        return (json.loads(SocketUtils.recv_str(socket)))

'''
EMail辅助类
author 一心
'''
class EMailUtils:
    '''
    连接邮件发送服务器
    param address 服务器地址
    param port 服务器端口
    param username 用户名
    param pwaaword 密码
    return 连接对象
    '''
    @staticmethod
    def smtp_connect(address,port,username,password):
        smtp = smtplib.SMTP(address,port)
        smtp.login(username,password)

        return smtp

    '''
    连接邮件接收服务器
    param address 服务器地址
    param port 服务器端口
    param username 用户名
    param password 密码
    return 连接对象
    '''
    @staticmethod
    def pop3_connect(address,port,username,password):
        pop3 = poplib.POP3(address,port)
        pop3.user(username)
        pop3.pass_(password)

        return pop3

    '''
    发送字符串
    param link 连接对象
    param sender 发件人
    param receiver 收件人
    param encoding 编码
    param subject 主题
    param str 字符串
    '''
    @staticmethod
    def send_str(link,sender,receiver,encoding,subject,str):
        mail = MIMEMultipart()
        mail['From'] = sender
        mail['To'] = receiver
        if subject:
            mail['Subject'] = Header(subject,encoding).encode()
        if str:
            mail.attach(MIMEText(str,'plain',encoding))
        link.sendmail(sender,receiver,mail.as_string())

    '''
    发送数据
    param link 连接对象
    param sender 发件人
    param receiver 收件人
    param encoding 编码
    param subject 主题
    param filename 文件名
    param data 发送数据
    '''
    @staticmethod
    def send(link,sender,receiver,encoding,subject,filename,data):
        mail = MIMEMultipart()
        mail['From'] = sender
        mail['To'] = receiver
        if subject:
            mail['Subject'] = Header(subject,encoding).encode()
        if data:
            attachment = MIMEText(data,'base64',encoding)
            attachment['Content-Type'] = 'application/octet-stream'
            attachment['Content-Disposition'] = 'attachment;filename = ' + filename
            mail.attach(attachment)
        link.sendmail(sender,receiver,mail.as_string())

    '''
    接收字符串
    param link 连接对象
    param sender 发件人
    param receiver 收件人
    return 字符串
    '''
    @staticmethod
    def recv_strs(link,sender,receiver):
        parser = Parser()
        strs = []
        for schema in link.list()[1]:
            no = schema.split(b' ')[0].decode()
            header = parser.parsestr(b'\n'.join(link.top(no,0)[1]).decode())
            if parseaddr(sender)[1] != parseaddr(header['From'])[1]:
                continue
            subject = EMailUtils.decode_header_entry(header['Subject'])[0]
            sequences = []
            EMailUtils.obt_sequences_files(parser.parsestr(b'\n'.join(link.retr(no)[1]).decode()),sequences,None)
            strs.append((subject,sequences))
            link.dele(no)
            
        return strs

    '''
    接收附件
    param link 连接对象
    param sender 发件人
    param receiver 收件人
    return 接收的附件
    '''
    @staticmethod
    def recv_attachments(link,sender,receiver):
        parser = Parser()
        attachments = []
        for schema in link.list()[1]:
            no = schema.split(b' ')[0].decode()
            header = parser.parsestr(b'\n'.join(link.top(no, 0)[1]).decode())
            if parseaddr(sender)[1] != parseaddr(header['From'])[1]:
                continue
            subject = EMailUtils.decode_header_entry(header['Subject'])[0]
            files = []
            EMailUtils.obt_sequences_files(parser.parsestr(b'\n'.join(link.retr(no)[1]).decode()),None,files)
            attachments.append((subject, files))
            link.dele(no)

        return attachments

    '''
    获取邮件字符序列和文件
    param mail 邮件对象
    param sequences 字符序列
    param files 文件
    '''
    @staticmethod
    def obt_sequences_files(mail,sequences = None,files = None):
        mail_maintype = mail.get_content_maintype()
        if 'multipart' == mail_maintype:
            for part in mail.get_payload():
                part_maintype = part.get_content_maintype()
                if 'multipart' == part_maintype:
                    EMailUtils.obt_strs_files(part,sequences,files)
                elif 'text' == part_maintype:
                    if isinstance(sequences,list):
                        sequences.append(EMailUtils.decode_body_entry(part))
                elif 'application' == part_maintype:
                    if isinstance(files,list):
                        files.append((part.get_filename(),part.get_payload(decode = True)))
                else:
                    continue
        elif 'text' == mail_maintype:
            if isinstance(sequences,list):
                sequences.append(EMailUtils.decode_body_entry(mail))
        elif 'application' == mail_maintype:
            if isinstance(files,list):
                files.append((mail.get_filename(),mail.get_payload(decode = True)))
        else:
            pass

    '''
    邮件对象转文本
    param entry 邮件对象
    return 字符串
    '''
    @staticmethod
    def decode_body_entry(entry):
        encoding = EMailUtils.obt_encoding(entry)
        if encoding:
            try:
                str = entry.get_payload(decode = True).decode(encoding)
            except Exception as e:
                try:
                    str = entry.get_payload(decode = True).decode('GBK')
                except Exception as ex:
                    str = ''
        else:
            try:
                str = entry.get_payload(decode = True).decode('UTF-8')
            except Exception as e:
                try:
                    str = entry.get_payload(decode = True).decode('GBK')
                except Exception as ex:
                    str = ''
        if re.compile(r'\\u([0-9a-fA-f]{4})').search(str):
            str = codecs.decode(str, 'unicode_escape')

        return str

    '''
    解码条目
    param entry 条目信息
    '''
    @staticmethod
    def decode_header_entry(entry):
        strs = []
        for item in decode_header(entry):
            if isinstance(item[0],bytes):
                if item[1]:
                    strs.append(item[0].decode(item[1]))
                else:
                    strs.append(item[0].decode())
            else:
                strs.append(item[0])
            
        return strs

    '''
    获取邮件某部分编码
    param mail 邮件信息
    return 编码
    '''
    @staticmethod
    def obt_encoding(mail):
        encoding = mail.get_charset()
        if not encoding:
            content_type = mail.get('Content-Type', '').lower()
            position = content_type.find('charset=')
            if position > -1:
                encoding = content_type[position + 8:].strip()

        return encoding

'''
微邮辅助类
author 一心
'''
class WMailUtils:
    '''
    发送文本
    param link 连接对象
    param sender 发件人
    param receiver 收件人
    param msg 报文
    param text 文本内容
    '''
    @staticmethod
    def send_text(link,sender,receiver,msg,text):
        EMailUtils.send_str(link,sender,receiver,Constants.MSG_ENCODING,json.dumps(msg),text)

    '''
    发送文件
    param link 连接对象
    param sender 发件人
    param receiver 收件人
    param msg 报文
    param filename 文件名称
    '''
    @staticmethod
    def send_file(link,sender,receiver,msg,filename):
        data = None
        with open(filename,'rb') as file:
            data = file.read()
        EMailUtils.send(link,sender,receiver,Constants.MSG_ENCODING,\
                             json.dumps(msg),os.path.basename(filename),data)

    '''
    接收字符串数组
    param link 连接对象
    param sender 发件人
    param receiver 收件人
    return 字符串数组
    '''
    @staticmethod
    def recv_texts(link, sender, receiver):
        texts = []
        for str in EMailUtils.recv_strs(link, sender, receiver):
            try:
                texts.append((json.loads(str[0]), str[1]))
            except Exception as e:
                pass

        return texts

    '''
    接收文件
    param link 连接对象
    param sender 发件人
    param receiver 收件人
    return 接收到文件数组
    '''
    @staticmethod
    def recv_files(link,sender,receiver):
        global current_user
        path = os.path.join(Constants.WMAIL_RECV_CACHE,current_user.email)
        if not os.path.exists(path):
            os.makedirs(path)
        files = []
        for data in EMailUtils.recv_attachments(link,sender,receiver):
            filenames = []
            for stream in data[1]:
                filename = Tools.obt_save_filename(os.path.join(path,stream[0]))
                with open(filename,'wb') as file:
                    file.write(stream[1])
                filenames.append(filename)
            try:
                files.append((json.loads(data[0]),filenames))
            except Exception as e:
                pass

        return files
'''
应用主类
autor 一心
'''
class TaskManager(wx.App):
    '''
    初始化应用
    '''
    def OnInit(self):
        self.init_data()
        
        login_window = LoginWindow(parent = None)
        login_window.Centre()  #窗口居中
        login_window.Show()

        return True

    '''
    初始化数据
    '''
    def init_data(self):
        if os.path.isfile(Constants.TASK_DATA) and 0 < os.path.getsize(Constants.TASK_DATA):
            return

        global task_data
        
        #初始化建表
        print('初始化表开始...')
        task_data.execute([['CREATE TABLE parameter (param_name VARCHAR(50) NOT NULL,\
                                                     param_value VARCHAR(256) NOT NULL,\
                                                     param_desc VARCHAR(1024),\
                                                     host_time TIMESTAMP NOT NULL,\
                                                     PRIMARY KEY (param_name))',()],\
                           ['CREATE TABLE user (user_id INTEGER NOT NULL,\
                                                username VARCHAR(50) NOT NULL,\
                                                fullname VARCHAR(100) NOT NULL,\
                                                user_type INTEGER NOT NULL,\
                                                authority VARCHAR(1024),\
                                                email VARCHAR(256),\
                                                user_status INTEGER NOT NULL,\
                                                host_time TIMESTAMP NOT NULL,\
                                                PRIMARY KEY (user_id))',()],\
                           ['CREATE UNIQUE INDEX user_idx ON user (username)',()],\
                           ['CREATE TABLE user_identification (user_id INTEGER NOT NULL,\
                                                    password VARCHAR(128) NOT NULL,\
                                                    pw_expire TIMESTAMP NOT NULL,\
                                                    pw_status INTEGER NOT NULL,\
                                                    host_time TIMESTAMP NOT NULL)',()],\
                           ['CREATE INDEX user_identification_idx ON user_identification (user_id,pw_status)',()],\
                           ['CREATE TABLE task (task_id INTEGER NOT NULL,\
                                                task_name VARCHAR(4096) NOT NULL,\
                                                task_desc VARCHAR(4096),\
                                                leader VARCHAR(1024),\
                                                handler VARCHAR(1024),\
                                                add_time TIMESTAMP NOT NULL,\
                                                schedule_time TIMESTAMP,\
                                                complete_desc VARCHAR(4096),\
                                                complete_time TIMESTAMP,\
                                                add_user INTEGER NOT NULL,\
                                                task_status INTEGER NOT NULL,\
                                                host_time TIMESTAMP NOT NULL,\
                                                PRIMARY KEY (task_id))',()]])
        task_data.execute([['CREATE TABLE config (conf_name VARCHAR(50) NOT NULL,\
                                                 conf_value VARCHAR(256) NOT NULL,\
                                                 conf_desc VARCHAR(1024),\
                                                 host_time TIMESTAMP NOT NULL,\
                                                 PRIMARY KEY (conf_name))',()],\
                           ['CREATE TABLE lock (lock_name VARCHAR(50) NOT NULL,\
                                                lock_value VARCHAR(256) NOT NULL,\
                                                lock_desc VARCHAR(1024),\
                                                host_time TIMESTAMP NOT NULL,\
                                                PRIMARY KEY (lock_name))',()]])
        task_data.execute([['CREATE TABLE email_identification (email VARCHAR(256) NOT NULL,\
                                                                smtp_password VARCHAR(128),\
                                                                pop3_password VARCHAR(128),\
                                                                host_time TIMESTAMP NOT NULL,\
                                                                PRIMARY KEY (email))',()],\
                           ['CREATE TABLE email_server (provider_address VARCHAR(256) NOT NULL,\
                                                        provider_name VARCHAR(256),\
                                                        smtp_address VARCHAR(256) NOT NULL,\
                                                        smtp_port INTEGER NOT NULL,\
                                                        pop3_address VARCHAR(256) NOT NULL,\
                                                        pop3_port INTEGER NOT NULL,\
                                                        host_time TIMESTAMP NOT NULL,\
                                                        PRIMARY KEY (provider_address))',()]])
        task_data.execute([['CREATE TABLE toolbox (tool_id INTEGER NOT NULL,\
                                                   tool_name VARCHAR(100) NOT NULL,\
                                                   tool_desc VARCHAR(1024),\
                                                   tool_icon BLOB,\
                                                   tool_type INTEGER NOT NULL,\
                                                   tool_env INTEGER NOT NULL,\
                                                   tool_cmd VARCHAR(1024) NOT NULL,\
                                                   last_execute_time TIMESTAMP,\
                                                   add_user INTEGER NOT NULL,\
                                                   tool_status INTEGER NOT NULL,\
                                                   sort_num INTEGER NOT NULL,\
                                                   host_time TIMESTAMP NOT NULL,\
                                                   PRIMARY KEY (tool_id))',()]])
        task_data.execute([['CREATE TABLE contact (contact_id INTEGER NOT NULL,\
                                                   fullname VARCHAR(200) NOT NULL,\
                                                   english_name VARCHAR(500),\
                                                   mobile_phone VARCHAR(50),\
                                                   email VARCHAR(256),\
                                                   telphone VARCHAR(50),\
                                                   address VARCHAR(1024),\
                                                   post_code VARCHAR(20),\
                                                   organization VARCHAR(500),\
                                                   position VARCHAR(100),\
                                                   add_user INTEGER NOT NULL,\
                                                   host_time TIMESTAMP NOT NULL,\
                                                   PRIMARY KEY (contact_id))',()],\
                           ['CREATE TABLE chat_location (contact_id INTEGER NOT NULL,\
                                                         address VARCHAR(30) NOT NULL,\
                                                         port INTEGER NOT NULL,\
                                                         host_time TIMESTAMP NOT NULL,\
                                                         PRIMARY KEY (contact_id))',()]])
        task_data.execute([['CREATE TABLE email (email_id INTEGER NOT NULL,\
                                                 email_gid VARCHAR(100),\
                                                 email_no INTEGER,\
                                                 send_address VARCHAR(256),\
                                                 send_nick_name VARCHAR(256),\
                                                 recv_address VARCHAR(256),\
                                                 recv_nick_name VARCHAR(256),\
                                                 subject VARCHAR(4096),\
                                                 content TEXT,\
                                                 emailbox INTEGER NOT NULL,\
                                                 email_status INTEGER NOT NULL,\
                                                 host_time TIMESTAMP NOT NULL,\
                                                 PRIMARY KEY (email_id))',()],\
                           ['CREATE TABLE email_attachment (att_id INTEGER NOT NULL,\
                                                            email_id INTEGER NOT NULL,\
                                                            filename VARCHAR(256),\
                                                            content BLOB,\
                                                            host_time TIMESTAMP NOT NULL,\
                                                            PRIMARY KEY (att_id))',()]])
        task_data.execute([['CREATE TABLE application (app_id INTGER NOT NULL,\
                                                       app_name VARCHAR(256) NOT NULL,\
                                                       app_desc VARCHAR(1024),\
                                                       add_user INTEGER NOT NULL,\
                                                       host_time TIMESTAMP NOT NULL,\
                                                       PRIMARY KEY (app_id))',()],
                           ['CREATE INDEX application_idx ON application (add_user)',()],\
                           ['CREATE TABLE passkey (passkey_id INTEGER NOT NULL,\
                                                   app_id INTEGER NOT NULL,\
                                                   username VARCHAR(50) NOT NULL,\
                                                   description VARCHAR(1024),\
                                                   password VARCHAR(128),\
                                                   add_user INTEGER NOT NULL,\
                                                   host_time TIMESTAMP NOT NULL,\
                                                   PRIMARY KEY (passkey_id))',()],\
                           ['CREATE INDEX passkey_idx ON passkey (add_user)',()]])
        task_data.execute([['CREATE TABLE access (access_id INTEGER NOT NULL,\
                                                          app_id INTEGER NOT NULL,\
                                                          address VARCHAR(256) NOT NULL,\
                                                          description VARCHAR(1024),\
                                                          add_user INTEGER NOT NULL,\
                                                          host_time TIMESTAMP NOT NULL,\
                                                          PRIMARY KEY (access_id))',()]])
        task_data.commit()
        print('初始化表完成...')

        #初始化表数据
        print('初始化数据开始...')
        task_data.execute([['INSERT INTO user VALUES (?,?,?,?,?,?,?,?)',(1,'MissYuanxi','沿着缘溪奔向大海',10,',10,','MissYuanxi',1,datetime.datetime.now())],\
                           ['INSERT INTO user_identification VALUES (?,?,?,?,?)',(1,'1',datetime.datetime(2050,10,1,22,35,26),1,datetime.datetime.now())]])
        task_data.execute([['INSERT INTO config VALUES (?,?,?,?)',('server.port','10081','沟通服务端口号',datetime.datetime.now())],\
                           ['INSERT INTO config VALUES (?,?,?,?)',('server.backlog','10','沟通服务最大等待数',datetime.datetime.now())]])
        task_data.commit()
        print('初始化数据完成...')
        
'''
当前用户类
author 一心
'''
class CurrentUser:
    user_id = None
    username = None
    fullname = None
    password = None
    email = None
    logon = False
    
    '''
    检查密码
    param username 用户名
    param password 密码
    return 检查结果
    '''
    @staticmethod
    def checkPassword(username,password):
        global task_data
        user = task_data.query(['SELECT * FROM user WHERE (username = ?)',(username,)])
        task_data.commit()
        if 1 != user[0]:
            if 0 == user[0]:
                return (LoginStatus.USERNAME_NOT_EXIST) #用户名不存在
            if 1 < user[0]:
                return (LoginStatus.DUPLICATE_USERNAME) #用户名重复
            
            return (LoginStatus.USERNAME_OTHER_ERROR) #用户名异常
        if UserStatus.UNACTIVATED.value == user[1][0]['user_status']: #用户未激活
            return (LoginStatus.UNACTIVATED_USERNAME) #用户未激活
        user_identification = task_data.query(['SELECT * FROM user_identification WHERE \
                (user_id = ?) AND (pw_status = ?)',(user[1][0]['user_id'],PasswordStatus.ACTIVATED.value)])
        task_data.commit()
        if 1 != user_identification[0]:
            if 0 == user_identification[0]:
                return (LoginStatus.PASSWORD_NOT_EXIST) #当前密码不存在
            if 1 < user_identification[0]:
                return (LoginStatus.DUPLICATE_PASSWORD) #存在多个当前密码
            
            return (LoginStatus.PASSWORD_OTHER_ERROR) #密码异常
        if user_identification[1][0]['pw_expire']:
            if time.time() > time.mktime(time.strptime(user_identification[1][0]['pw_expire'],'%Y-%m-%d %H:%M:%S')):
                return (LoginStatus.PASSWORD_EXPIRE) #密码过期
        if user_identification[1][0]['password'] == password:
            return (LoginStatus.USERNAME_PASSWORD_SUCCESS) #密码正确

        return (LoginStatus.USERNAME_PASSWORD_ERROR) #密码错误
    
    '''
    登录
    param username 用户名
    param password 密码
    return 登录状态
    '''
    def login(self,username,password):
        loginStatus = CurrentUser.checkPassword(username,password)
        if LoginStatus.USERNAME_PASSWORD_SUCCESS != loginStatus:
            logon = False

            return loginStatus
        
        #获取当用户信息
        global task_data
        user = task_data.query(['SELECT * FROM user WHERE (username = ?)',(username,)])
        task_data.commit()
        self.user_id = user[1][0]['user_id']
        self.username = username
        self.fullname = user[1][0]['fullname']
        self.email = user[1][0]['email']
        self.logon = True

        return loginStatus

'''
Socket通讯服务类
author 一心
'''
class SocketServer:
    parent = None
    address = None
    port = 0
    able = 0

    '''
    初始化
    param parent 父窗口
    param address 服务地址
    param port 服务端口
    param able 最大监听数
    '''
    def __init__(self,parent,address,port,able):
        self.parent = parent
        self.address = address
        self.port = port
        self.able = able

    '''
    启动服务
    '''
    def start(self):
        thread = threading.Thread(target = self.process)
        thread.daemon = True
        thread.start()
        
    '''
    处理请求
    '''
    def process(self):
        server = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
        server.bind((self.address,self.port))
        server.listen(self.able)
        while True:
            wx.CallAfter(self.show_server_window,Constants.APP_NAME,server.accept())
        server.close()

    '''
    显示Socket通讯处理对话框
    param link 包含Socket套接字的连接对象
    '''
    def show_server_window(self,socket):
        server_window = ServerWindow(self.parent,socket)
        server_window.Centre()
        server_window.Hide()

'''
服务处理窗口
author 一心
'''
class ServerWindow(wx.Frame):
    link = None

    from_fullname = None
    msg_type = None
    addition = None

    from_fullname_label = None
    message_type_label = None
    message_text = None

    collection_file = None
    collection_size = None

    progress_dialog = None

    '''
    初始化
    param parent 父窗口
    param link 与客户端连接对象
    '''
    def __init__(self,parent,link):
        super().__init__(id = wx.ID_ANY,parent = parent,title = '沟通 - ' + Constants.APP_NAME,size = (350,235),\
                          style = wx.DEFAULT_FRAME_STYLE ^ wx.RESIZE_BORDER ^ wx.MAXIMIZE_BOX)
        self.SetIcon(Tools.image2icon(base64.b64decode(Constants.APP_ICON)))

        self.link = link

        server_holder = wx.Panel(parent = self,id = wx.ID_ANY)

        #消息概述
        overview_holder = wx.Panel(parent = server_holder,id = wx.ID_ANY)
        self.from_fullname_label = wx.StaticText(parent = overview_holder,label = '')
        self.message_type_label = wx.StaticText(parent = overview_holder,label = '')
        overview_layout = wx.GridBagSizer(vgap = 5,hgap = 10)
        overview_layout.Add(window = wx.StaticText(parent = overview_holder,label = '收到'),\
                         pos = (0,0),flag = wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        overview_layout.Add(window = self.from_fullname_label,\
                         pos = (0,1),flag = wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        overview_layout.Add(window = wx.StaticText(parent = overview_holder,label = '[' + self.link[1][0] + ']'),\
                         pos = (0,2),flag = wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        overview_layout.Add(window = self.message_type_label,\
                         pos = (0,3),flag = wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        overview_holder.SetSizer(overview_layout)

        #操作
        action_holder = wx.Panel(parent = server_holder,id = wx.ID_ANY)
        accept_button = wx.Button(parent = action_holder,label = '接收')
        reject_button = wx.Button(parent = action_holder,label = '拒绝')
        ignore_button = wx.Button(parent = action_holder,label = '忽略')
        action_layout = wx.BoxSizer(wx.HORIZONTAL)
        action_layout.Add(window = accept_button)
        action_layout.Add(window = reject_button)
        action_layout.Add(window = ignore_button)
        action_holder.SetSizer(action_layout)
        
        self.message_text = wx.TextCtrl(parent = server_holder,value = '',size = (250,90),style = wx.TE_READONLY)
        server_layout = wx.GridBagSizer(vgap = 5,hgap = 10)
        server_layout.Add(window = wx.Panel(parent = server_holder,id = wx.ID_ANY,size = (40,20)),pos = (0,0),flag = wx.EXPAND)
        server_layout.Add(window = wx.Panel(parent = server_holder,id = wx.ID_ANY,size = (0,20)),pos = (0,1),flag = wx.EXPAND)
        server_layout.Add(window = wx.Panel(parent = server_holder,id = wx.ID_ANY,size = (30,20)),pos = (0,2),flag = wx.EXPAND)
        server_layout.Add(window = wx.Panel(parent = server_holder,id = wx.ID_ANY,size = (40,0)),pos = (1,0),flag = wx.EXPAND)
        server_layout.Add(window = overview_holder,pos = (1,1),flag = wx.EXPAND)
        server_layout.Add(window = wx.Panel(parent = server_holder,id = wx.ID_ANY,size = (30,0)),pos = (1,2),flag = wx.EXPAND)
        server_layout.Add(window = wx.Panel(parent = server_holder,id = wx.ID_ANY,size = (40,100)),pos = (2,0),flag = wx.EXPAND)
        server_layout.Add(window = self.message_text,pos = (2,1),\
                          flag = wx.ALIGN_CENTER | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        server_layout.Add(window = wx.Panel(parent = server_holder,id = wx.ID_ANY,size = (30,100)),pos = (2,2),flag = wx.EXPAND)
        server_layout.Add(window = wx.Panel(parent = server_holder,id = wx.ID_ANY,size = (40,0)),pos = (3,0),flag = wx.EXPAND)
        server_layout.Add(window = action_holder,pos = (3,1),flag = wx.ALIGN_CENTER | wx.EXPAND)
        server_layout.Add(window = wx.Panel(parent = server_holder,id = wx.ID_ANY,size = (30,0)),pos = (3,2),flag = wx.EXPAND)
        server_layout.Add(window = wx.Panel(parent = server_holder,id = wx.ID_ANY,size = (40,20)),pos = (4,0),flag = wx.EXPAND)
        server_layout.Add(window = wx.Panel(parent = server_holder,id = wx.ID_ANY,size = (0,20)),pos = (4,1),flag = wx.EXPAND)
        server_layout.Add(window = wx.Panel(parent = server_holder,id = wx.ID_ANY,size = (30,20)),pos = (4,2),flag = wx.EXPAND)
        server_holder.SetSizer(server_layout)

        #事件绑定
        self.Bind(wx.EVT_CLOSE,self.ignore_button_on_clicked)

        accept_button.Bind(wx.EVT_BUTTON,handler = self.accept_button_on_clicked)
        reject_button.Bind(wx.EVT_BUTTON,handler = self.reject_button_on_clicked)
        ignore_button.Bind(wx.EVT_BUTTON,handler = self.ignore_button_on_clicked)

        timer = threading.Timer(Constants.MSG_WINDOW_DELAY,self.show_handshake)
        timer.start()

    '''
    接收按钮单击事件
    param event 事件信息
    '''
    def accept_button_on_clicked(self,event):
        if MsgType.CHAT.value == self.msg_type:
            response_msg = {'from': current_user.fullname, 'to': self.from_fullname, 'type': self.msg_type,
                            'command': 'accept', 'content': ''}
            ChatUtils.send_msg(self.link[0], response_msg)

            chat_window = ChatWindow(self.Parent,self.from_fullname,self.msg_type,self.link)
            chat_window.Centre()
            chat_window.Show()
        elif MsgType.FILE.value == self.msg_type:
            file_dialog = wx.FileDialog(parent = self,message = '接收文件',defaultFile = self.message_text.GetValue(),\
                                        wildcard = '所有文件（*.*）|*.*',style = wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT)
            if wx.ID_OK == file_dialog.ShowModal():
                response_msg = {'from': current_user.fullname, 'to': self.from_fullname, 'type': self.msg_type,\
                                'command': 'accept', 'content': ''}
                ChatUtils.send_msg(self.link[0], response_msg)
                self.collection_file = file_dialog.GetPath()
                self.collection_size = self.addition
                thread = threading.Thread(target = self.recv_file)
                thread.start()
        elif MsgType.COMMAND.vaue == self.msg_type:
            pass
        else:
            pass

        self.Destroy()

    '''
    拒绝按钮单击事件
    param event 事件信息
    '''
    def reject_button_on_clicked(self,event):
        thread = threading.Thread(target = self.reject_handshake)
        thread.start()
        self.ignore_button_on_clicked(event)

    '''
    忽略按钮单击事件
    param event 事件信息
    '''
    def ignore_button_on_clicked(self,event):
        self.Destroy()

    '''
    显示握手信息
    '''
    def show_handshake(self):
        request_msg = ChatUtils.recv_msg(self.link[0])
        if 'apply' != request_msg.get('command'):
            return
        self.from_fullname = request_msg.get('from')
        self.msg_type = request_msg.get('type')
        self.addition = request_msg.get('addition')
        if MsgType.CHAT.value == self.msg_type:
            message_type = '聊天'
            content = request_msg['content']
        elif MsgType.FILE.value == self.msg_type:
            message_type = '文件'
            content = request_msg['content']
        elif MsgType.COMMAND.value == self.msg_type:
            message_type = '执行命令'
        else:
            message_type = ''
            
        self.from_fullname_label.SetLabel(self.from_fullname)
        self.message_type_label.SetLabel(message_type + '：')
        self.message_text.SetValue(content)
        self.Show()

    '''
    接收文件
    '''
    def recv_file(self):
        wx.CallAfter(self.show_file_window,self.from_fullname,self.link,self.collection_file,self.collection_size)

    '''
    显示文件传输对话框
    param from_fullname 对方名称
    param link 连接对象
    param collection_file 接收文件名
    param collection_size 接收文件大小
    '''
    def show_file_window(self,from_fullname,link,collection_file,collection_size):
        self.progress_dialog = wx.ProgressDialog('接收文件 - 对方IP[' + link[1][0] + ']', os.path.basename(collection_file),collection_size,\
                                                 style = wx.PD_CAN_ABORT | wx.PD_ELAPSED_TIME | wx.PD_REMAINING_TIME)
        SocketUtils.recv_file(link[0], collection_file, self.recv_file_progress)
        link[0].shutdown(socket.SHUT_RDWR)
        time.sleep(Constants.MSG_EXCHANGE_DURATION)
        link[0].close()

    '''
    更新接收文件进度
    param total 接收总字节数
    param recv 已接收字节数
    '''
    def recv_file_progress(self,total,recv):
        self.progress_dialog.Update(recv)

    '''
    拒绝对方请求
    '''
    def reject_handshake(self):
        response_msg = {'from':current_user.fullname, 'to': self.from_fullname, 'type': self.msg_type, 'command': 'reject', 'content': ''}
        ChatUtils.send_msg(self.link[0],response_msg)
        self.link[0].shutdown(socket.SHUT_RDWR)
        time.sleep(Constants.MSG_EXCHANGE_DURATION)
        self.link[0].close()

'''
客户端处理窗口
author 一心
'''
class ClientWindow(wx.Frame):
    msg_type = None

    address_text = None
    port_text = None
    message_text = None

    contact_id = None
    filename = None

    progress_dialog = None

    '''
    初始化
    param parent 父窗口
    param msg_type 消息类型
    '''
    def __init__(self,parent,msg_type):
        if MsgType.CHAT.value == msg_type:
            name = '聊天 - '
        elif MsgType.FILE.value == msg_type:
            name = '发送文件 - '
        else:
            name = ''
        super().__init__(id = wx.ID_ANY,parent = parent,title = name + Constants.APP_NAME,size = (450,195),\
                         style = wx.DEFAULT_FRAME_STYLE ^ wx.RESIZE_BORDER ^ wx.MAXIMIZE_BOX)
        self.SetIcon(Tools.image2icon(base64.b64decode(Constants.APP_ICON)))

        self.msg_type = msg_type

        client_holder = wx.Panel(parent = self,id = wx.ID_ANY)

        #对方通讯方式
        comm_holder = wx.Panel(client_holder,id = wx.ID_ANY)
        self.address_text = wx.TextCtrl(parent = comm_holder)
        self.port_text = wx.TextCtrl(parent = comm_holder,size = (60,0))
        pick_button = wx.Button(parent = comm_holder,label = '通讯录')
        comm_layout = wx.GridBagSizer(vgap = 5,hgap = 10)
        comm_layout.Add(window = wx.StaticText(parent = comm_holder,label = '对方地址：'),pos = (0,0),\
                        flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        comm_layout.Add(window = self.address_text,pos = (0,1),flag = wx.EXPAND)
        comm_layout.Add(window = wx.StaticText(parent = comm_holder,label = '端口号：'),pos = (0,2),\
                        flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        comm_layout.Add(window = self.port_text,pos = (0,3),flag = wx.EXPAND)
        comm_layout.Add(window = pick_button,pos = (0,4),flag = wx.EXPAND)
        comm_layout.AddGrowableCol(1)
        comm_holder.SetSizer(comm_layout)

        message_title = None
        message_holder = wx.Panel(parent = client_holder,id = wx.ID_ANY)
        self.message_text = wx.TextCtrl(parent = message_holder)
        message_layout = wx.GridBagSizer(vgap = 5, hgap = 10)
        message_layout.Add(window = self.message_text,pos = (0,0),flag = wx.EXPAND)
        if MsgType.CHAT.value == msg_type: #聊天
            message_title = '招呼内容：'
        elif MsgType.FILE.value == msg_type: #文件
            message_title = '文件名称：'
            self.message_text.SetEditable(False)
            browse_button = wx.Button(parent = message_holder,label = '浏览...')
            message_layout.Add(window = browse_button,pos = (0,1),flag = wx.EXPAND)

            #事件绑定
            browse_button.Bind(wx.EVT_BUTTON,self.browse_button_on_clicked)
        elif MsgType.COMMAND.value == msg_type:
            pass
        else:
            pass
        message_layout.AddGrowableCol(0)
        message_holder.SetSizer(message_layout)

        send_handshake_button = wx.Button(parent = client_holder,label = '发送')
        client_layout = wx.GridBagSizer(vgap = 5,hgap = 10)
        client_layout.Add(window = wx.Panel(parent = client_holder,size = (15,20)),pos = (0,0),flag = wx.EXPAND)
        client_layout.Add(window = wx.Panel(parent = client_holder,size = (0,20)),pos = (0,1),flag = wx.EXPAND)
        client_layout.Add(window = wx.Panel(parent = client_holder,size = (15,20)),pos = (0,2),flag = wx.EXPAND)
        client_layout.Add(window = wx.Panel(parent = client_holder,size = (15,0)),pos = (1,0),flag = wx.EXPAND)
        client_layout.Add(window = comm_holder,pos = (1,1),flag = wx.EXPAND)
        client_layout.Add(window = wx.Panel(parent = client_holder,size = (15,0)),pos = (1,2),flag = wx.EXPAND)
        client_layout.Add(window = wx.Panel(parent = client_holder,size = (15,0)),pos = (2,0),flag = wx.EXPAND)
        client_layout.Add(window = wx.StaticText(parent = client_holder,label = message_title),pos = (2,1),flag = wx.EXPAND)
        client_layout.Add(window = wx.Panel(parent = client_holder,size = (15,0)),pos = (2,2),flag = wx.EXPAND)
        client_layout.Add(window = wx.Panel(parent = client_holder,size = (15,0)),pos = (3,0),flag = wx.EXPAND)
        client_layout.Add(window = message_holder,pos = (3,1),flag = wx.EXPAND)
        client_layout.Add(window = wx.Panel(parent = client_holder,size = (15,0)),pos = (3,2),flag = wx.EXPAND)
        client_layout.Add(window = wx.Panel(parent = client_holder,size = (15,0)),pos = (4,0),flag = wx.EXPAND)
        client_layout.Add(window = send_handshake_button,pos = (4,1),flag = wx.ALIGN_RIGHT | wx.EXPAND)
        client_layout.Add(window = wx.Panel(parent = client_holder,size = (15,0)),pos = (4,2),flag = wx.EXPAND)
        client_layout.Add(window = wx.Panel(parent = client_holder,size = (15,20)),pos = (5,0),flag = wx.EXPAND)
        client_layout.Add(window = wx.Panel(parent = client_holder,size = (0,20)),pos = (5,1),flag = wx.EXPAND)
        client_layout.Add(window = wx.Panel(parent = client_holder,size = (15,20)),pos = (5,2),flag = wx.EXPAND)
        client_layout.AddGrowableCol(1)
        client_holder.SetSizer(client_layout)

        #事件绑定
        pick_button.Bind(wx.EVT_BUTTON,self.pick_button_on_clicked)
        send_handshake_button.Bind(wx.EVT_BUTTON,self.send_handshake_button_on_clicked)

    '''
    单击浏览按钮事件
    parame 事件信息
    '''
    def browse_button_on_clicked(self,event):
        file_dialog = wx.FileDialog(parent = self,message = '发送文件',wildcard = '所有文件（*.*）|*.*',\
                                    style = wx.FD_OPEN | wx.FD_FILE_MUST_EXIST)
        if wx.ID_OK == file_dialog.ShowModal():
            self.filename = file_dialog.GetPath()
            self.message_text.SetValue(os.path.basename(self.filename))

    '''
    选择按钮单击事件
    param event 事件信息
    '''
    def pick_button_on_clicked(self,event):
        pick_chat_location_dialog = PickChatLocationDialog(self)
        pick_chat_location_dialog.Centre()
        pick = pick_chat_location_dialog.ShowModal()
        if wx.YES == pick:
            chat_location = ChatLocationDao.obt_by_primary_key(self.contact_id)
            if chat_location:
                self.address_text.SetValue(chat_location['address'])
                self.port_text.SetValue(str(chat_location['port']))
            else:
                self.address_text.SetValue('')
                self.port_text.SetValue('')
            self.address_text.SetFocus()

    '''
    单击发送按钮事件
    param event 事件信息
    '''
    def send_handshake_button_on_clicked(self,event):
        thread = threading.Thread(target = self.send_handshake)
        thread.start()

    '''
    发送握手信息
    '''
    def send_handshake(self):
        address = self.address_text.GetValue()
        port = self.port_text.GetValue()

        if not address:
            wx.MessageBox(message = '对方地址为空',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)
            self.address_text.SetFocus()

            return
        if not port:
            wx.MessageBox(message = '端口号为空',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)
            self.port_text.SetFocus()

            return
        if not port.isdigit():
            wx.MessageBox(message = '端口号非整数',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)
            self.port_text.SetFocus();

            return
        request_msg = {'from':current_user.fullname,'to': '','type':self.msg_type,'command':'apply',\
                       'addition':(os.path.getsize(self.filename) if self.filename else 0),'content':self.message_text.GetValue()}
        link = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        link.connect((address, int(port)))
        ChatUtils.send_msg(link, request_msg)
        response_msg = ChatUtils.recv_msg(link)
        command = response_msg.get('command')
        if 'reject' == command:
            wx.MessageBox(message = '对方拒绝了您的请求',caption = '消息',style = wx.OK | wx.ICON_INFORMATION,parent = self)
            link.close()

            self.Destroy()
            
            return
        if 'accept' != command:
            wx.MessageBox(message = '对方处理异常，请重新发起请求',caption = '错误',style = wx.OK | wx.ICON_ERROR,parent=self)
            link.close()

            self.Destroy()

            return
        if MsgType.CHAT.value == self.msg_type:
            wx.CallAfter(self.show_chat_window,response_msg.get('from'),self.msg_type,(link,(address,port)))
        elif MsgType.FILE.value == self.msg_type:
            wx.CallAfter(self.show_file_window,response_msg.get('from'),(link,(address,port)),self.filename)
        elif MsgType.COMMAND.value == self.msg_type:
            pass
        else:
            pass
        self.Destroy()

    '''
    显示聊天对话框
    param from_fullname 对方名称
    param msg_type 消息类型
    param link 连接对象
    '''
    def show_chat_window(self,from_fullname,msg_type,link):
        chat_window = ChatWindow(self.Parent,from_fullname,msg_type,link)
        chat_window.Centre()
        chat_window.Show()

    '''
    显示文件传输对话框
    param from_fullname 对方名称
    param link 连接对象
    param filename 文件名
    '''
    def show_file_window(self,from_fullname,link,filename):
        self.progress_dialog = wx.ProgressDialog('发送文件 - 对方IP[' + link[1][0] + ']',filename,os.path.getsize(filename),\
                                            style = wx.PD_CAN_ABORT | wx.PD_ELAPSED_TIME | wx.PD_REMAINING_TIME)
        SocketUtils.send_file(link[0],filename,self.send_file_progress)
        link[0].shutdown(socket.SHUT_RDWR)
        time.sleep(Constants.MSG_EXCHANGE_DURATION)
        link[0].close()
        
    '''
    更新发送文件进度条
    param total 发送总字节数
    param send 发送字节数
    '''
    def send_file_progress(self,total,send):
        self.progress_dialog.Update(send)

'''
网络地址选择对话框
author 一心
'''
class PickChatLocationDialog(wx.Dialog):
    key_text = None
    chat_location_list = None

    '''
    初始化
    param parent 父窗口
    '''
    def __init__(self, parent):
        super().__init__(id = wx.ID_ANY, parent = parent, title='选择地址 - ' + Constants.APP_NAME, size = (500, 350))
        self.SetIcon(Tools.image2icon(base64.b64decode(Constants.APP_ICON)))

        pick_chat_location_holder = wx.Panel(parent = self, id = wx.ID_ANY)

        self.key_text = wx.TextCtrl(parent = pick_chat_location_holder)
        self.chat_location_list = wx.ListCtrl(parent = pick_chat_location_holder, id = wx.ID_ANY, style = wx.LC_REPORT)
        self.chat_location_list.InsertColumn(0, '姓名')
        self.chat_location_list.InsertColumn(1, '英文名称')
        self.chat_location_list.InsertColumn(2, '地址')
        self.chat_location_list.InsertColumn(3, '端口号')
        self.show_chat_location_item()

        ok_button = wx.Button(parent = pick_chat_location_holder, label = '确认')
        pick_chat_location_layout = wx.GridBagSizer(vgap=5, hgap=10)
        pick_chat_location_layout.Add(window = wx.Panel(parent = pick_chat_location_holder, id = wx.ID_ANY,size = (20, 15)),\
                                      pos = (0, 0),flag = wx.EXPAND)
        pick_chat_location_layout.Add(window = wx.Panel(parent = pick_chat_location_holder, id = wx.ID_ANY,size = (0, 15)),\
                                      pos = (0, 1),flag = wx.EXPAND)
        pick_chat_location_layout.Add(window = wx.Panel(parent = pick_chat_location_holder, id = wx.ID_ANY, size = (20, 15)),\
                                      pos = (0, 2),flag = wx.EXPAND)
        pick_chat_location_layout.Add(window = wx.Panel(parent = pick_chat_location_holder, id = wx.ID_ANY, size = (20, 0)),\
                                      pos = (1, 0),flag=wx.EXPAND)
        pick_chat_location_layout.Add(window = self.key_text, pos = (1, 1), flag = wx.EXPAND)
        pick_chat_location_layout.Add(window = wx.Panel(parent = pick_chat_location_holder, id = wx.ID_ANY, size = (20, 0)),\
                                      pos = (1, 2),flag = wx.EXPAND)
        pick_chat_location_layout.Add(window=wx.Panel(parent = pick_chat_location_holder, id = wx.ID_ANY, size = (20, 0)),\
                                      pos = (2, 0),flag = wx.EXPAND)
        pick_chat_location_layout.Add(window = self.chat_location_list, pos = (2, 1), flag = wx.EXPAND)
        pick_chat_location_layout.Add(window = wx.Panel(parent = pick_chat_location_holder, id = wx.ID_ANY, size = (20, 0)),\
                                      pos = (2, 2),flag=wx.EXPAND)
        pick_chat_location_layout.Add(window = wx.Panel(parent = pick_chat_location_holder, id = wx.ID_ANY, size = (20, 0)),\
                                      pos = (3, 0),flag = wx.EXPAND)
        pick_chat_location_layout.Add(window = ok_button, pos = (3, 1), flag = wx.ALIGN_RIGHT | wx.EXPAND)
        pick_chat_location_layout.Add(window = wx.Panel(parent = pick_chat_location_holder, id = wx.ID_ANY, size = (20, 0)),\
                                      pos = (3, 2),flag = wx.EXPAND)
        pick_chat_location_layout.Add(window = wx.Panel(parent = pick_chat_location_holder, id = wx.ID_ANY, size = (20, 15)),\
                                      pos = (4, 0),flag = wx.EXPAND)
        pick_chat_location_layout.Add(window = wx.Panel(parent = pick_chat_location_holder, id = wx.ID_ANY, size = (0, 15)),\
                                      pos = (4, 1),flag = wx.EXPAND)
        pick_chat_location_layout.Add(window = wx.Panel(parent = pick_chat_location_holder, id = wx.ID_ANY, size = (20, 15)),\
                                      pos = (4, 2),flag = wx.EXPAND)
        pick_chat_location_layout.AddGrowableRow(2)
        pick_chat_location_layout.AddGrowableCol(1)
        pick_chat_location_holder.SetSizer(pick_chat_location_layout)

        # 事件绑定
        ok_button.Bind(event = wx.EVT_BUTTON, handler = self.ok_button_on_clicked)

    '''
    显示电子邮件信息
    param condition 查询条件
    param page_size 页面大小
    param page_no 面码
    '''
    def show_chat_location_item(self, condition = {}, page_size = -1, page_no = 0):
        contact_chat_locations = ContactDao.or_list_chat_location(condition, page_size, page_no)
        index = 0
        i = 0
        for contact_chat_location in contact_chat_locations[1]:
            index = self.chat_location_list.InsertItem(i, '')
            if -1 == index:
                continue
            self.chat_location_list.SetItemData(index,contact_chat_location['a_contact_id'])
            self.chat_location_list.SetItem(index,0,' ' + contact_chat_location['a_fullname'])
            self.chat_location_list.SetItem(index,1,contact_chat_location['a_english_name'])
            self.chat_location_list.SetItem(index,2,contact_chat_location['b_address'] if contact_chat_location['b_address'] else '')
            self.chat_location_list.SetItem(index,3,str(contact_chat_location['b_port']) if contact_chat_location['b_port'] else '')
            i = i + 1

    '''
    确认按钮单击事件
    param event 事件信息
    '''
    def ok_button_on_clicked(self, event):
        index = self.chat_location_list.GetFirstSelected()
        if -1 == index:
            self.Parent.contact_id = None
        else:
            self.Parent.contact_id = self.chat_location_list.GetItemData(index)
        self.EndModal(wx.YES)

'''
聊天窗口类
author 一心
'''
class ChatWindow(wx.Frame):
    from_fullname = None
    msg_type = None
    link = None

    history_text = None
    message_text = None

    '''
    初始化
    param parent 父窗口
    param from_fullname 发送方名称
    param msg_type 消息类型
    param link 与客户端连接对象
    '''
    def __init__(self,parent,from_fullname,msg_type,link):
        super().__init__(id = wx.ID_ANY,parent = parent,title = '聊天 - 对方IP[' + link[1][0] + ']',size = (500,600))
        self.SetIcon(Tools.image2icon(base64.b64decode(Constants.APP_ICON)))

        self.from_fullname = from_fullname
        self.msg_type = msg_type
        self.link = link

        chat_holder = wx.Panel(parent = self,id = wx.ID_ANY)
        self.history_text = wx.TextCtrl(parent = chat_holder,style = wx.TE_READONLY | wx.TE_MULTILINE)
        self.message_text = wx.TextCtrl(parent = chat_holder,size = (0,80),style = wx.TE_MULTILINE)
        send_message_button = wx.Button(parent = chat_holder,label = '发送')
        chat_layout = wx.GridBagSizer(vgap = 5,hgap = 10)
        chat_layout.Add(window = wx.Panel(parent = chat_holder,id = wx.ID_ANY,size = (30,5)),pos = (0,0),flag = wx.EXPAND)
        chat_layout.Add(window = wx.Panel(parent = chat_holder,id = wx.ID_ANY,size = (0,5)),pos = (0,1),flag = wx.EXPAND)
        chat_layout.Add(window = wx.Panel(parent = chat_holder,id = wx.ID_ANY,size = (30,5)),pos = (0,2),flag = wx.EXPAND)
        chat_layout.Add(window = wx.Panel(parent = chat_holder,id = wx.ID_ANY,size = (30,0)),pos = (1,0),flag = wx.EXPAND)
        chat_layout.Add(window = self.history_text,pos = (1,1),flag = wx.EXPAND)
        chat_layout.Add(window = wx.Panel(parent = chat_holder,id = wx.ID_ANY,size = (30,0)),pos = (1,2),flag = wx.EXPAND)
        chat_layout.Add(window = wx.Panel(parent = chat_holder,id = wx.ID_ANY,size = (30,5)),pos = (2,0),flag = wx.EXPAND)
        chat_layout.Add(window = wx.Panel(parent = chat_holder,id = wx.ID_ANY,size = (0,5)),pos = (2,1),flag = wx.EXPAND)
        chat_layout.Add(window = wx.Panel(parent = chat_holder,id = wx.ID_ANY,size = (30,5)),pos = (2,2),flag = wx.EXPAND)
        chat_layout.Add(window = wx.Panel(parent = chat_holder,id = wx.ID_ANY,size = (30,0)),pos = (3,0),flag = wx.EXPAND)
        chat_layout.Add(window = self.message_text,pos = (3,1),flag = wx.EXPAND)
        chat_layout.Add(window = wx.Panel(parent = chat_holder,id = wx.ID_ANY,size = (30,0)),pos = (3,2),flag = wx.EXPAND)
        chat_layout.Add(window = wx.Panel(parent = chat_holder,id = wx.ID_ANY,size = (30,0)),pos = (4,0),flag = wx.EXPAND)
        chat_layout.Add(window = send_message_button,pos = (4,1),flag = wx.ALIGN_RIGHT | wx.EXPAND)
        chat_layout.Add(window = wx.Panel(parent = chat_holder,id = wx.ID_ANY,size = (30,0)),pos = (4,2),flag = wx.EXPAND)
        chat_layout.Add(window = wx.Panel(parent = chat_holder,id = wx.ID_ANY,size = (30,5)),pos = (5,0),flag = wx.EXPAND)
        chat_layout.Add(window = wx.Panel(parent = chat_holder,id = wx.ID_ANY,size = (0,5)),pos = (5,1),flag = wx.EXPAND)
        chat_layout.Add(window = wx.Panel(parent = chat_holder,id = wx.ID_ANY,size = (30,5)),pos = (5,2),flag = wx.EXPAND)
        chat_layout.AddGrowableCol(1)
        chat_layout.AddGrowableRow(1)
        chat_holder.SetSizer(chat_layout)

        #事件绑定
        self.Bind(wx.EVT_CLOSE,self.window_on_closed)

        send_message_button.Bind(wx.EVT_BUTTON,handler = self.send_message_button_on_clicked)

        #接收客户端信息
        thread = threading.Thread(target = self.recv_chat_msg)
        thread.start()

    '''
    窗口关闭事件
    '''
    def window_on_closed(self,event):
        thread = threading.Thread(target = self.quit_chat)
        thread.start()
        self.Destroy()

    '''
    单击发送按钮
    param event 事件信息
    '''
    def send_message_button_on_clicked(self,event):
        message = self.message_text.GetValue()
        if not message:
            wx.MessageBox(message = '发送消息为空',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)
            self.message_text.SetFocus()

            return
        chat_msg = {'from': current_user.fullname, 'to': self.from_fullname, 'type': self.msg_type,'command': 'chat',\
                    'content': message}
        ChatUtils.send_msg(self.link[0],chat_msg)
        self.history_text.AppendText(current_user.fullname + '：' + message + '\n')
        self.message_text.SetValue('')
        self.message_text.SetFocus()

    '''
    接收聊天消息
    '''
    def recv_chat_msg(self):
        while True:
            chat_msg = ChatUtils.recv_msg(self.link[0])
            command = chat_msg.get('command')
            if 'chat' == command:
                self.history_text.AppendText(chat_msg.get('from') + '：' + chat_msg.get('content') + '\n')
            if 'quit' == command:
                self.link[0].close()
                if wx.YES == wx.MessageBox(message = '对方已退出聊天。是否关闭聊天对话框？',caption = '询问',style = wx.YES_NO | wx.ICON_QUESTION,parent = self):
                    self.Destroy()
                
                break
                
    '''
    退出聊天
    '''
    def quit_chat(self):
        request_msg = {'from':current_user.fullname,'to':self.from_fullname,'type':self.msg_type,'command':'quit','content':''}
        ChatUtils.send_msg(self.link[0],request_msg)
        self.link[0].shutdown(socket.SHUT_RDWR)
        time.sleep(Constants.MSG_EXCHANGE_DURATION)
        self.link[0].close()

'''
微邮地址窗口
author 一心
'''
class DeliverWindow(wx.Frame):
    email_text = None

    contact_id = None

    '''
    初始化
    param parent 父窗口
    '''
    def __init__(self,parent):
        super().__init__(id = wx.ID_ANY,parent = parent,title = '微邮 - ' + Constants.APP_NAME,size = (390,145),\
                         style = wx.DEFAULT_FRAME_STYLE ^ wx.RESIZE_BORDER ^ wx.MAXIMIZE_BOX)
        self.SetIcon(Tools.image2icon(base64.b64decode(Constants.APP_ICON)))

        deliver_holder = wx.Panel(parent = self,id = wx.ID_ANY)

        email_holder = wx.Panel(parent = deliver_holder,id = wx.ID_ANY)
        self.email_text = wx.TextCtrl(parent = email_holder)
        pick_button = wx.Button(parent = email_holder,label = '通讯录')
        email_layout = wx.GridBagSizer(vgap = 5,hgap = 10)
        email_layout.Add(window = self.email_text,pos = (0,0),flag = wx.EXPAND)
        email_layout.Add(window = pick_button,pos = (0,1),flag = wx.EXPAND)
        email_layout.AddGrowableCol(0)
        email_holder.SetSizer(email_layout)

        connect_button = wx.Button(parent = deliver_holder,label = '连接')
        deliver_layout = wx.GridBagSizer(vgap = 5,hgap = 10)
        deliver_layout.Add(window = wx.Panel(parent = deliver_holder,id = wx.ID_ANY,size = (15,20)),pos = (0,0),flag = wx.EXPAND)
        deliver_layout.Add(window = wx.Panel(parent = deliver_holder,id = wx.ID_ANY,size = (0,20)),pos = (0,1),span = (1,2),flag = wx.EXPAND)
        deliver_layout.Add(window = wx.Panel(parent = deliver_holder,id = wx.ID_ANY,size = (15,20)),pos = (0,3),flag = wx.EXPAND)
        deliver_layout.Add(window = wx.Panel(parent = deliver_holder,id = wx.ID_ANY,size = (15,0)),pos = (1,0),flag = wx.EXPAND)
        deliver_layout.Add(window = wx.StaticText(parent = deliver_holder,label = '对方EMail：'),pos = (1,1),\
                           flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        deliver_layout.Add(window = email_holder,pos = (1,2),flag = wx.EXPAND)
        deliver_layout.Add(window = wx.Panel(parent = deliver_holder,id = wx.ID_ANY,size = (15,0)),pos = (1,3),flag = wx.EXPAND)
        deliver_layout.Add(window = wx.Panel(parent = deliver_holder,id = wx.ID_ANY,size = (15,0)),pos = (2,0),flag = wx.EXPAND)
        deliver_layout.Add(window = wx.Panel(parent = deliver_holder,id = wx.ID_ANY,size = (0,0)),pos = (2,1),flag = wx.EXPAND)
        deliver_layout.Add(window = connect_button,pos = (2,2),flag = wx.ALIGN_RIGHT)
        deliver_layout.Add(window = wx.Panel(parent = deliver_holder,id = wx.ID_ANY,size = (15,0)),pos = (2,3),flag = wx.EXPAND)
        deliver_layout.Add(window = wx.Panel(parent = deliver_holder,id = wx.ID_ANY,size = (15,20)),pos = (3,0),flag = wx.EXPAND)
        deliver_layout.Add(window = wx.Panel(parent = deliver_holder,id = wx.ID_ANY,size = (0,20)),pos = (3,1),span = (1,2),flag = wx.EXPAND)
        deliver_layout.Add(window = wx.Panel(parent = deliver_holder,id = wx.ID_ANY,size = (15,20)),pos = (3,3),flag = wx.EXPAND)
        deliver_layout.AddGrowableCol(2)
        deliver_holder.SetSizer(deliver_layout)

        #事件绑定
        pick_button.Bind(event = wx.EVT_BUTTON,handler = self.pick_button_on_clicked)
        connect_button.Bind(event = wx.EVT_BUTTON,handler = self.connect_button_on_clicked)

    '''
    通讯录按钮单击事件
    param event 事件信息
    '''
    def pick_button_on_clicked(self,event):
        pick_email_dialog = PickEMailDialog(self)
        pick_email_dialog.Centre()
        pick = pick_email_dialog.ShowModal()
        if wx.YES == pick:
            contact = ContactDao.obt_by_primary_key(self.contact_id)
            if contact:
                self.email_text.SetValue(contact['email'])
                self.email_text.SetFocus()

    '''
    点击连接按钮事件
    param event 事件信息
    '''
    def connect_button_on_clicked(self,event):
        email = self.email_text.GetValue()
        if not email:
            wx.MessageBox(message = '对方EMail地址为空',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)
            self.email_text.SetFocus()

            return
        self.Destroy()

        wmail_window = WMailWindow(self.Parent,email)
        wmail_window.Centre()
        wmail_window.Show()

'''
电子邮件选择对话框
author 一心
'''
class PickEMailDialog(wx.Dialog):
    key_text = None
    email_list = None

    '''
    初始化
    param parent 父窗口
    '''
    def __init__(self,parent):
        super().__init__(id = wx.ID_ANY,parent = parent,title = '选择邮件地址 - ' + Constants.APP_NAME,size = (500,350))
        self.SetIcon(Tools.image2icon(base64.b64decode(Constants.APP_ICON)))

        pick_email_holder = wx.Panel(parent = self,id = wx.ID_ANY)

        self.key_text = wx.TextCtrl(parent = pick_email_holder)
        self.email_list = wx.ListCtrl(parent = pick_email_holder,id = wx.ID_ANY,style = wx.LC_REPORT)
        self.email_list.InsertColumn(0,'姓名')
        self.email_list.InsertColumn(1,'英文名称')
        self.email_list.InsertColumn(2,'电子邮件')
        self.show_email_item()
        
        ok_button = wx.Button(parent = pick_email_holder,label = '确认')
        pick_email_layout = wx.GridBagSizer(vgap = 5,hgap = 10)
        pick_email_layout.Add(window = wx.Panel(parent = pick_email_holder,id = wx.ID_ANY,size = (20,15)),pos = (0,0),flag = wx.EXPAND)
        pick_email_layout.Add(window = wx.Panel(parent = pick_email_holder,id = wx.ID_ANY,size = (0,15)),pos = (0,1),flag = wx.EXPAND)
        pick_email_layout.Add(window = wx.Panel(parent = pick_email_holder,id = wx.ID_ANY,size = (20,15)),pos = (0,2),flag = wx.EXPAND)
        pick_email_layout.Add(window = wx.Panel(parent = pick_email_holder,id = wx.ID_ANY,size = (20,0)),pos = (1,0),flag = wx.EXPAND)
        pick_email_layout.Add(window = self.key_text,pos = (1,1),flag = wx.EXPAND)
        pick_email_layout.Add(window = wx.Panel(parent = pick_email_holder,id = wx.ID_ANY,size = (20,0)),pos = (1,2),flag = wx.EXPAND)
        pick_email_layout.Add(window = wx.Panel(parent = pick_email_holder,id = wx.ID_ANY,size = (20,0)),pos = (2,0),flag = wx.EXPAND)
        pick_email_layout.Add(window = self.email_list,pos = (2,1),flag = wx.EXPAND)
        pick_email_layout.Add(window = wx.Panel(parent = pick_email_holder,id = wx.ID_ANY,size = (20,0)),pos = (2,2),flag = wx.EXPAND)
        pick_email_layout.Add(window = wx.Panel(parent = pick_email_holder,id = wx.ID_ANY,size = (20,0)),pos = (3,0),flag = wx.EXPAND)
        pick_email_layout.Add(window = ok_button,pos = (3,1),flag = wx.ALIGN_RIGHT | wx.EXPAND)
        pick_email_layout.Add(window = wx.Panel(parent = pick_email_holder,id = wx.ID_ANY,size = (20,0)),pos = (3,2),flag = wx.EXPAND)
        pick_email_layout.Add(window = wx.Panel(parent = pick_email_holder,id = wx.ID_ANY,size = (20,15)),pos = (4,0),flag = wx.EXPAND)
        pick_email_layout.Add(window = wx.Panel(parent = pick_email_holder,id = wx.ID_ANY,size = (0,15)),pos = (4,1),flag = wx.EXPAND)
        pick_email_layout.Add(window = wx.Panel(parent = pick_email_holder,id = wx.ID_ANY,size = (20,15)),pos = (4,2),flag = wx.EXPAND)
        pick_email_layout.AddGrowableRow(2)
        pick_email_layout.AddGrowableCol(1)
        pick_email_holder.SetSizer(pick_email_layout)

        #事件绑定
        ok_button.Bind(event = wx.EVT_BUTTON,handler = self.ok_button_on_clicked)

    '''
    显示电子邮件信息
    param condition 查询条件
    param page_size 页面大小
    param page_no 面码
    '''
    def show_email_item(self,condition = {},page_size = -1,page_no = 0):
        contacts = ContactDao.or_list(condition,page_size,page_no)
        index = 0
        i = 0
        for contact in contacts[1]:
            index = self.email_list.InsertItem(i,'')
            if -1 == index:
                continue
            self.email_list.SetItemData(index,contact['contact_id'])
            self.email_list.SetItem(index,0,' ' + contact['fullname'])
            self.email_list.SetItem(index,1,contact['english_name'])
            self.email_list.SetItem(index,2,contact['email'])
            i = i + 1

    '''
    确认按钮单击事件
    param event 事件信息
    '''
    def ok_button_on_clicked(self,event):
        index = self.email_list.GetFirstSelected()
        if -1 == index:
            self.Parent.contact_id = None
        else:
            self.Parent.contact_id = self.email_list.GetItemData(index)
        self.EndModal(wx.YES)
            
'''
微邮窗口类
author 一心
'''
class WMailWindow(wx.Frame):
    to_email = None
    email_server = None
    email_identification = None

    file_text = None
    history_text = None
    message_text = None

    filename = None

    '''
    初始化
    param parent 父窗口
    param to_email 收微邮地址
    '''
    def __init__(self,parent,to_email):
        super().__init__(id = wx.ID_ANY,parent = parent,title = '微邮 - 对方EMail[' + to_email + ']',size = (500,600))
        self.SetIcon(Tools.image2icon(base64.b64decode(Constants.APP_ICON)))

        global current_user
        position = current_user.email.rfind('@')
        if -1 == position:
            domain = None
        else:
            domain = current_user.email[position + 1:]

        self.to_email = to_email
        self.email_server = EMailServerDao.obt_by_primary_key(domain)
        self.email_identification = EMailIdentificationDao.obt_by_primary_key(current_user.email)

        wmail_holder = wx.Panel(parent = self,id = wx.ID_ANY)

        #文件
        file_holder = wx.Panel(parent = wmail_holder,id = wx.ID_ANY)
        self.file_text = wx.TextCtrl(parent = file_holder,style = wx.TE_READONLY)
        browse_button = wx.Button(parent = file_holder,label = '浏览...')
        delete_button = wx.Button(parent = file_holder,label = '删除')
        send_message_button = wx.Button(parent = file_holder, label='发送')
        file_layout = wx.GridBagSizer(vgap = 5,hgap = 10)
        file_layout.Add(window = self.file_text,pos = (0,0),flag = wx.EXPAND)
        file_layout.Add(window = browse_button,pos = (0,1),flag = wx.EXPAND)
        file_layout.Add(window = delete_button,pos = (0,2),flag = wx.EXPAND)
        file_layout.Add(window = send_message_button,pos = (0,3),flag = wx.EXPAND)
        file_layout.AddGrowableCol(0)
        file_holder.SetSizer(file_layout)

        self.history_text = wx.TextCtrl(parent = wmail_holder,style = wx.TE_READONLY | wx.TE_MULTILINE)
        self.message_text = wx.TextCtrl(parent = wmail_holder,size = (0,80),style = wx.TE_MULTILINE)
        wmail_layout = wx.GridBagSizer(vgap = 5,hgap = 10)
        wmail_layout.Add(window = wx.Panel(parent = wmail_holder,id = wx.ID_ANY,size = (30,5)),pos = (0,0),flag = wx.EXPAND)
        wmail_layout.Add(window = wx.Panel(parent = wmail_holder,id = wx.ID_ANY,size = (0,5)),pos = (0,1),flag = wx.EXPAND)
        wmail_layout.Add(window = wx.Panel(parent = wmail_holder,id = wx.ID_ANY,size = (30,5)),pos = (0,2),flag = wx.EXPAND)
        wmail_layout.Add(window = wx.Panel(parent = wmail_holder,id = wx.ID_ANY,size = (30,0)),pos = (1,0),flag = wx.EXPAND)
        wmail_layout.Add(window = self.history_text,pos = (1,1),flag = wx.EXPAND)
        wmail_layout.Add(window = wx.Panel(parent = wmail_holder,id = wx.ID_ANY,size = (30,0)),pos = (1,2),flag = wx.EXPAND)
        wmail_layout.Add(window = wx.Panel(parent = wmail_holder,id = wx.ID_ANY,size = (30,5)),pos = (2,0),flag = wx.EXPAND)
        wmail_layout.Add(window = wx.Panel(parent = wmail_holder,id = wx.ID_ANY,size = (0,5)),pos = (2,1),flag = wx.EXPAND)
        wmail_layout.Add(window = wx.Panel(parent = wmail_holder,id = wx.ID_ANY,size = (30,5)),pos = (2,2),flag = wx.EXPAND)
        wmail_layout.Add(window = wx.Panel(parent = wmail_holder,id = wx.ID_ANY,size = (30,0)),pos = (3,0),flag = wx.EXPAND)
        wmail_layout.Add(window = self.message_text,pos = (3,1),flag = wx.EXPAND)
        wmail_layout.Add(window = wx.Panel(parent = wmail_holder,id = wx.ID_ANY,size = (30,0)),pos = (3,2),flag = wx.EXPAND)
        wmail_layout.Add(window = wx.Panel(parent = wmail_holder,id = wx.ID_ANY,size = (30,0)),pos = (4,0),flag = wx.EXPAND)
        wmail_layout.Add(window = file_holder,pos = (4,1),flag = wx.EXPAND)
        wmail_layout.Add(window = wx.Panel(parent = wmail_holder,id = wx.ID_ANY,size = (30,0)),pos = (4,2),flag = wx.EXPAND)
        wmail_layout.Add(window = wx.Panel(parent = wmail_holder,id = wx.ID_ANY,size = (30,5)),pos = (5,0),flag = wx.EXPAND)
        wmail_layout.Add(window = wx.Panel(parent = wmail_holder,id = wx.ID_ANY,size = (0,5)),pos = (5,1),flag = wx.EXPAND)
        wmail_layout.Add(window = wx.Panel(parent = wmail_holder,id = wx.ID_ANY,size = (30,5)),pos = (5,2),flag = wx.EXPAND)
        wmail_layout.AddGrowableCol(1)
        wmail_layout.AddGrowableRow(1)
        wmail_holder.SetSizer(wmail_layout)

        #事件绑定
        self.history_text.Bind(event = wx.EVT_LEFT_UP,handler = self.history_text_on_left_up)
        browse_button.Bind(event = wx.EVT_BUTTON,handler = self.browse_button_on_clicked)
        delete_button.Bind(event = wx.EVT_BUTTON,handler = self.delete_button_on_clicked)
        send_message_button.Bind(event = wx.EVT_BUTTON,handler = self.send_message_button_on_clicked)

        #接收信息
        thread = threading.Thread(target = self.recv_wmail_msg)
        thread.start()

    '''
    聊天记录框鼠标左键弹起事件(主要用于接收文件)
    param event 事件信息
    '''
    def history_text_on_left_up(self,event):
        position = self.history_text.PositionToXY(self.history_text.GetInsertionPoint())
        if not position[0]:
            return
        line = self.history_text.GetLineText(position[2]).split('：')[1]
        if not line.startswith('已发送文件['):
            return
        if not line.endswith(']，请查收！'):
            return
        filename = line[line.find('[') + 1:line.rfind(']')]
        global current_user
        source = os.path.join(Constants.WMAIL_RECV_CACHE,current_user.email,filename)
        if os.path.isfile(source):
            file_dialog = wx.FileDialog(parent = self,message = '另存为',defaultFile = filename,\
                                        wildcard = '所有文件（*.*）|*.*',style = wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT)
            if wx.ID_OK == file_dialog.ShowModal():
                shutil.copy(source,file_dialog.GetPath())

    '''
    单击浏览文件按键事件
    param event 事件信息
    '''
    def browse_button_on_clicked(self,event):
        file_dialog = wx.FileDialog(parent = self,message = '选择文件',wildcard = '所有文件（*.*）|*.*',\
                                    style = wx.FD_OPEN | wx.FD_FILE_MUST_EXIST)
        if wx.ID_OK == file_dialog.ShowModal():
            self.filename = file_dialog.GetPath()
            self.file_text.SetValue(os.path.basename(self.filename))

    '''
    单击删除发送文件事件
    param event 事件信息
    '''
    def delete_button_on_clicked(self,event):
        self.filename = None
        self.file_text.SetValue('')

    '''
    单击消息发送按钮事件
    param event 事件信息
    '''
    def send_message_button_on_clicked(self,event):
        message = self.message_text.GetValue()

        if (not message) and (not self.filename):
            wx.MessageBox(message = '发送内容为空',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)
            self.message_text.SetFocus()

            return
        global current_user
        if not current_user.email:
            wx.MessageBox(message = '用户EMail未设置',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)

            return
        if not self.email_server:
            wx.MessageBox(messae = 'EMail服务器信息未配置',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)

            return
        if not self.email_identification:
            wx.MessageBox(message = 'EMail服务器登录信息未配置',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)

            return
        link = None
        try:
            link = EMailUtils.smtp_connect(self.email_server['smtp_address'], self.email_server['smtp_port'],\
                                                   current_user.email, self.email_identification['smtp_password'])
        except Exception as e:
            wx.MessageBox(message = '连接EMail服务器错误，请稍后再试',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)
            traceback.print_exc()

            return
        sender = formataddr(['',current_user.email])
        receiver = formataddr(['',self.to_email])
        if message:
            wmail_msg = {'from':current_user.fullname,'to':'','type':MsgType.CHAT.value,'command':'chat','content':''}
            WMailUtils.send_text(link,sender,receiver,wmail_msg,message)
            self.history_text.AppendText(current_user.fullname + '：' + message + '\n')
            self.message_text.SetValue('')
            self.message_text.SetFocus()
        if self.filename:
            wmail_msg = {'from':current_user.fullname,'to':'','type':MsgType.FILE.value,'command':'chat','content':''}
            WMailUtils.send_file(link,sender,receiver,wmail_msg,self.filename)
            self.history_text.AppendText(current_user.fullname + '：已发送文件[' + os.path.basename(self.filename) + ']！\n')
            self.file_text.SetValue('')
            self.filename = None
        link.quit()

    '''
    接收消息
    '''
    def recv_wmail_msg(self):
        global current_user
        while True:
            if not current_user.email:
                wx.MessageBox(message='用户EMail未设置', caption='警告', style=wx.OK | wx.ICON_WARNING, parent=self)

                return
            if not self.email_server:
                wx.MessageBox(messae='EMail服务器信息未配置', caption='警告', style=wx.OK | wx.ICON_WARNING,parent=self)

                return
            if not self.email_identification:
                wx.MessageBox(message='EMail服务器登录信息未配置', caption='警告', style=wx.OK | wx.ICON_WARNING,parent=self)

                return
            link = None
            try:
                link = EMailUtils.pop3_connect(self.email_server['pop3_address'], self.email_server['pop3_port'],\
                                               current_user.email,self.email_identification['pop3_password'])
            except Exception as e:
                wx.MessageBox(message='连接EMail服务器错误，请稍后再试', caption='警告', style=wx.OK | wx.ICON_WARNING,parent=self)
                traceback.print_exc()

                time.sleep(Constants.MSG_EMAIL_INTERVAL)

                continue
            sender = formataddr(['',self.to_email])
            receiver = formataddr(['',current_user.email])
            for text in WMailUtils.recv_texts(link, sender, receiver):
                if MsgType.CHAT.value == text[0].get('type'):
                    for str in text[1]:
                        self.history_text.AppendText(text[0].get('from') + '：' + str + '\n')
            for file in WMailUtils.recv_files(link,sender,receiver):
                if MsgType.FILE.value == file[0].get('type'):
                    for filename in file[1]:
                        self.history_text.AppendText(file[0].get('from') + '：已发送文件[' + os.path.basename(filename) + ']，请查收！\n')
            link.quit()
            time.sleep(Constants.MSG_EMAIL_INTERVAL)

'''
登录窗口类
author 一心
'''
class LoginWindow(wx.Frame):
    username_text = None
    password_text = None

    '''
    初始化
    param parent 父窗口
    '''
    def __init__(self,parent):
        super().__init__(id = wx.ID_ANY,parent = parent,title = '登录 - ' + Constants.APP_NAME,size = (384,200),\
                          style = wx.DEFAULT_FRAME_STYLE ^ wx.RESIZE_BORDER ^ wx.MAXIMIZE_BOX)
        self.SetIcon(Tools.image2icon(base64.b64decode(Constants.APP_ICON)))

        #登录框
        login_holder = wx.Panel(parent = self,id = wx.ID_ANY)
        self.username_text = wx.TextCtrl(parent = login_holder)
        self.password_text = wx.TextCtrl(parent = login_holder,style = wx.TE_PASSWORD)
        
        #登录 重置按钮
        action_holder = wx.Panel(parent = login_holder,id = wx.ID_ANY)
        login_button = wx.Button(parent = action_holder,label = '登录')
        reset_button = wx.Button(parent = action_holder,label = '重置')
        action_layout = wx.BoxSizer(wx.HORIZONTAL)
        action_layout.Add(window = login_button)
        action_layout.Add(window = reset_button)
        action_holder.SetSizer(action_layout)
        
        login_layout = wx.GridBagSizer(vgap = 5,hgap = 10)
        login_layout.Add(window = wx.Panel(parent = login_holder,id = wx.ID_ANY,size = (50,0)),pos = (0,0),flag = wx.EXPAND)
        login_layout.Add(window = wx.Panel(parent = login_holder,id = wx.ID_ANY),pos = (0,1),flag = wx.EXPAND)
        login_layout.Add(window = wx.Panel(parent = login_holder,id = wx.ID_ANY),pos = (0,2),flag = wx.EXPAND)
        login_layout.Add(window = wx.Panel(parent = login_holder,id = wx.ID_ANY,size = (50,0)),pos = (0,3),flag = wx.EXPAND)
        login_layout.Add(window = wx.Panel(parent = login_holder,id = wx.ID_ANY,size = (50,0)),pos = (1,0),flag = wx.EXPAND)
        login_layout.Add(window = wx.StaticText(parent = login_holder,label = '用 户 名'),\
                         pos = (1,1),flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        login_layout.Add(window = self.username_text,pos = (1,2),flag = wx.EXPAND)
        login_layout.Add(window = wx.Panel(parent = login_holder,id = wx.ID_ANY,size = (50,0)),pos = (1,3),flag = wx.EXPAND)
        login_layout.Add(window = wx.Panel(parent = login_holder,id = wx.ID_ANY,size = (50,0)),pos = (2,0),flag = wx.EXPAND)
        login_layout.Add(window = wx.StaticText(parent = login_holder,label = '密     码'),\
                         pos = (2,1),flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        login_layout.Add(window = self.password_text,pos = (2,2),flag = wx.EXPAND)
        login_layout.Add(window = wx.Panel(parent = login_holder,id = wx.ID_ANY,size = (50,0)),pos = (2,3),flag = wx.EXPAND)
        login_layout.Add(window = wx.Panel(parent = login_holder,id = wx.ID_ANY,size = (50,0)),pos = (3,0),flag = wx.EXPAND)
        login_layout.Add(window = action_holder,pos = (3,1),span = (1,2),flag = wx.ALIGN_CENTER | wx.EXPAND)
        login_layout.Add(window = wx.Panel(parent = login_holder,id = wx.ID_ANY,size = (50,0)),pos = (3,3),flag = wx.EXPAND)
        login_layout.Add(window = wx.Panel(parent = login_holder,id = wx.ID_ANY,size = (50,0)),pos = (4,0),flag = wx.EXPAND)
        login_layout.Add(window = wx.Panel(parent = login_holder,id = wx.ID_ANY),pos = (4,1),flag = wx.EXPAND)
        login_layout.Add(window = wx.Panel(parent = login_holder,id = wx.ID_ANY),pos = (4,2),flag = wx.EXPAND)
        login_layout.Add(window = wx.Panel(parent = login_holder,id = wx.ID_ANY,size = (50,0)),pos = (4,3),flag = wx.EXPAND)
        login_layout.AddGrowableRow(0)
        login_layout.AddGrowableRow(4)
        login_layout.AddGrowableCol(2)
        login_holder.SetSizer(login_layout)

        #事件绑定
        self.Bind(wx.EVT_CHAR_HOOK,self.window_on_char_hook)

        login_button.Bind(event = wx.EVT_BUTTON,handler = self.login_button_on_clicked)
        reset_button.Bind(event = wx.EVT_BUTTON,handler = self.reset_button_on_clicked)

    '''
    按钮事件
    param event 事件信息
    '''
    def window_on_char_hook(self,event):
        if wx.stc.STC_KEY_RETURN == event.GetKeyCode():
            self.login_button_on_clicked(event)
        event.Skip()
        
    '''
    单击登录按钮
    param event 事件信息
    '''
    def login_button_on_clicked(self,event):
        username = self.username_text.GetValue()
        password = self.password_text.GetValue()

        if not username:
            wx.MessageBox(message = '用户名为空',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)
            self.username_text.SetFocus()

            return
        if not password:
            wx.MessageBox(message = '密码为空',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)
            self.password_text.SetFocus()

            return
        global current_user;
        current_user = CurrentUser()
        login_status = current_user.login(username,password)
        if LoginStatus.USERNAME_PASSWORD_SUCCESS != login_status:
            if (LoginStatus.USERNAME_PASSWORD_ERROR == login_status) \
               or (LoginStatus.USERNAME_NOT_EXIST == login_status) \
               or (LoginStatus.PASSWORD_NOT_EXIST == login_status) \
               or (LoginStatus.PASSWORD_EXPIRE == login_status):
                wx.MessageBox(message = '用户名或密码错误',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)

                return
            wx.MessageBox(message = '用户登录异常',caption = '错误',style = wx.OK | wx.ICON_ERROR,parent = self)

            return
        self.Destroy()

        task_window = TaskWindow(None)
        task_window.Centre()
        task_window.Show()

        comm_server = SocketServer(task_window,'0.0.0.0',\
                                   int(ConfigDao.obt_value(ConfigName.SERVER_PORT.value)),\
                                   int(ConfigDao.obt_value(ConfigName.SERVER_BACKLOG.value)))
        comm_server.start()

    '''
    单击重置按钮
    param event 事件信息
    '''
    def reset_button_on_clicked(self,event):
        self.username_text.SetValue('')
        self.password_text.SetValue('')
        self.username_text.SetFocus()

'''
任务窗口类
author 一心
'''
class TaskWindow(wx.Frame):
    task_holder = None
    task_name_key_text = None
    leader_key_cmbox = None
    handler_key_cmbox = None
    task_status_key_cmbox = None
    complete_description_key_text = None
    add_date_key_ckbox = None
    start_add_date_picker = None
    end_add_date_picker = None
    schedule_date_key_ckbox = None
    start_schedule_date_picker = None
    end_schedule_date_pciker = None
    complete_date_key_ckbox = None
    start_complete_date_picker = None
    end_complete_date_picker = None
    task_list = None
    task_name_text = None
    leader_cmbox = None
    handler_cmbox = None
    add_datetime_ckbox = None
    add_date_picker = None
    add_time_picker = None
    schedule_datetime_ckbox = None
    schedule_date_picker = None
    echedule_time_picker = None
    complete_description = None
    complete_time = None

    '''
    初始化
    param parent 父窗口
    '''
    def __init__(self,parent):
        super().__init__(id = wx.ID_ANY,parent = parent,title = '任务 - ' + Constants.APP_NAME,size = (1180,650))
        self.SetIcon(Tools.image2icon(base64.b64decode(Constants.APP_ICON)))

        menu_bar = wx.MenuBar()

        #任务菜单
        task_menu = wx.Menu()
        refresh_task_menu_item = wx.MenuItem(task_menu,wx.ID_ANY,'刷新')
        task_menu.Append(refresh_task_menu_item)
        menu_bar.Append(task_menu,'任务')
        comm_menu = wx.Menu()
        chat_comm_menu_item = wx.MenuItem(comm_menu,wx.ID_ANY,'聊天')
        comm_menu.Append(chat_comm_menu_item)
        file_comm_menu_item = wx.MenuItem(comm_menu,wx.ID_ANY,'发送文件')
        comm_menu.Append(file_comm_menu_item)
        wmail_comm_menu_item = wx.MenuItem(comm_menu,wx.ID_ANY,'微邮')
        comm_menu.Append(wmail_comm_menu_item)
        email_comm_menu_item = wx.MenuItem(comm_menu,wx.ID_ANY,'电子邮件')
        comm_menu.Append(email_comm_menu_item)
        contact_comm_menu_item = wx.MenuItem(comm_menu,wx.ID_ANY,'通讯录')
        comm_menu.Append(contact_comm_menu_item)
        menu_bar.Append(comm_menu,'沟通')
        toolbox_menu = wx.Menu()
        self_defined_tool_menu_item = wx.MenuItem(toolbox_menu,wx.ID_ANY,'自定义工具')
        toolbox_menu.Append(self_defined_tool_menu_item)
        third_party_tool_menu_item = wx.MenuItem(toolbox_menu,wx.ID_ANY,'第三方工具')
        toolbox_menu.Append(third_party_tool_menu_item)
        menu_bar.Append(toolbox_menu,'工具箱')
        setup_menu = wx.Menu()
        user_setup_menu_item = wx.MenuItem(setup_menu,wx.ID_ANY,'用户')
        setup_menu.Append(user_setup_menu_item)
        email_setup_menu_item = wx.MenuItem(setup_menu,wx.ID_ANY,'邮箱')
        setup_menu.Append(email_setup_menu_item)
        password_setup_menu_item = wx.MenuItem(setup_menu,wx.ID_ANY,'密码')
        setup_menu.Append(password_setup_menu_item)
        menu_bar.Append(setup_menu,'设置')
        help_menu = wx.Menu()
        about_menu_item = wx.MenuItem(help_menu,wx.ID_ANY,'关于')
        help_menu.Append(about_menu_item)
        menu_bar.Append(help_menu,'帮助')
        self.SetMenuBar(menu_bar)
        
        contact_cmbox_options = ContactDao.list_cmbox_option()
        contact_cmbox_options.insert(0,'')
        
        self.task_holder = wx.Panel(parent = self,id = wx.ID_ANY)

        #搜索框
        task_name_key_holder = wx.Panel(parent = self.task_holder,id = wx.ID_ANY)
        self.task_name_key_text = wx.TextCtrl(parent = task_name_key_holder)
        self.leader_key_cmbox = wx.ComboBox(parent = task_name_key_holder,id = wx.ID_ANY,choices = contact_cmbox_options,style = wx.CB_DROPDOWN)
        self.leader_key_cmbox.AutoComplete(contact_cmbox_options)
        self.handler_key_cmbox = wx.ComboBox(parent = task_name_key_holder,id = wx.ID_ANY,choices = contact_cmbox_options,style = wx.CB_DROPDOWN)
        self.handler_key_cmbox.AutoComplete(contact_cmbox_options)
        self.task_status_key_cmbox = wx.ComboBox(parent = task_name_key_holder,id = wx.ID_ANY,choices = ['--状态--','未完成','已完成'],style = wx.CB_READONLY | wx.CB_DROPDOWN)
        self.complete_description_key_text = wx.TextCtrl(parent = task_name_key_holder)
        task_name_key_layout = wx.GridBagSizer(vgap = 5,hgap = 10)
        task_name_key_layout.Add(window = wx.StaticText(parent = task_name_key_holder,label = '任务'),\
                               pos = (0,0),flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        task_name_key_layout.Add(window = self.task_name_key_text,pos = (0,1),flag = wx.EXPAND)
        task_name_key_layout.Add(window = wx.StaticText(parent = task_name_key_holder,label = '下达人'),\
                               pos = (0,2),flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        task_name_key_layout.Add(window = self.leader_key_cmbox,pos = (0,3),flag = wx.EXPAND)
        task_name_key_layout.Add(window = wx.StaticText(parent = task_name_key_holder,label = '经办人'),\
                               pos = (0,4),flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        task_name_key_layout.Add(window = self.handler_key_cmbox,pos = (0,5),flag = wx.EXPAND)
        task_name_key_layout.Add(window = wx.StaticText(parent = task_name_key_holder,label = '状态'),\
                                 pos = (0,6),flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        task_name_key_layout.Add(window = self.task_status_key_cmbox,pos = (0,7),flag = wx.EXPAND)
        task_name_key_layout.Add(window = wx.StaticText(parent = task_name_key_holder,label = '完成情况'),\
                                 pos = (0,8),flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        task_name_key_layout.Add(window = self.complete_description_key_text,pos = (0,9),flag = wx.EXPAND)
        task_name_key_layout.AddGrowableCol(1)
        task_name_key_layout.AddGrowableCol(9)
        task_name_key_holder.SetSizer(task_name_key_layout)
        task_search_holder = wx.Panel(parent = self.task_holder,id = wx.ID_ANY)
        self.add_date_key_ckbox = wx.CheckBox(parent = task_search_holder,id = wx.ID_ANY)
        self.start_add_date_picker = wx.adv.DatePickerCtrl(parent = task_search_holder,id = wx.ID_ANY,style = wx.adv.DP_DROPDOWN | wx.adv.DP_SHOWCENTURY)
        self.start_add_date_picker.Disable()
        self.end_add_date_picker = wx.adv.DatePickerCtrl(parent = task_search_holder,id = wx.ID_ANY,style = wx.adv.DP_DROPDOWN | wx.adv.DP_SHOWCENTURY)
        self.end_add_date_picker.Disable()
        self.schedule_date_key_ckbox = wx.CheckBox(parent = task_search_holder,id = wx.ID_ANY)
        self.start_schedule_date_picker = wx.adv.DatePickerCtrl(parent = task_search_holder,id = wx.ID_ANY,style = wx.adv.DP_DROPDOWN | wx.adv.DP_SHOWCENTURY)
        self.start_schedule_date_picker.Disable()
        self.end_schedule_date_picker = wx.adv.DatePickerCtrl(parent = task_search_holder,id = wx.ID_ANY,style = wx.adv.DP_DROPDOWN | wx.adv.DP_SHOWCENTURY)
        self.end_schedule_date_picker.Disable()
        self.complete_date_key_ckbox = wx.CheckBox(parent = task_search_holder,id = wx.ID_ANY)
        self.start_complete_date_picker = wx.adv.DatePickerCtrl(parent = task_search_holder,id = wx.ID_ANY,style = wx.adv.DP_DROPDOWN | wx.adv.DP_SHOWCENTURY)
        self.start_complete_date_picker.Disable()
        self.end_complete_date_picker = wx.adv.DatePickerCtrl(parent = task_search_holder,id = wx.ID_ANY,style = wx.adv.DP_DROPDOWN | wx.adv.DP_SHOWCENTURY)
        self.end_complete_date_picker.Disable()
        search_button = wx.Button(parent = task_search_holder,label = '搜索')
        task_search_layout = wx.GridBagSizer(vgap = 5,hgap = 10)
        task_search_layout.Add(window = wx.StaticText(parent = task_search_holder,label = '实际添加时间'),\
                               pos = (0,0),flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        task_search_layout.Add(window = self.add_date_key_ckbox,pos = (0,1),flag = wx.EXPAND)
        task_search_layout.Add(window = self.start_add_date_picker,pos = (0,2),flag = wx.EXPAND)
        task_search_layout.Add(window = self.end_add_date_picker,pos = (0,3),flag = wx.EXPAND)
        task_search_layout.Add(window = wx.StaticText(parent = task_search_holder,label = '计划完成时间'),\
                               pos = (0,4),flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        task_search_layout.Add(window = self.schedule_date_key_ckbox,pos = (0,5),flag = wx.EXPAND)
        task_search_layout.Add(window = self.start_schedule_date_picker,pos = (0,6),flag = wx.EXPAND)
        task_search_layout.Add(window = self.end_schedule_date_picker,pos = (0,7),flag = wx.EXPAND)
        task_search_layout.Add(window = wx.StaticText(parent = task_search_holder,label = '实际完成时间'),\
                               pos = (0,8),flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        task_search_layout.Add(window = self.complete_date_key_ckbox,pos = (0,9),flag = wx.EXPAND)
        task_search_layout.Add(window = self.start_complete_date_picker,pos = (0,10),flag = wx.EXPAND)
        task_search_layout.Add(window = self.end_complete_date_picker,pos = (0,11),flag = wx.EXPAND)
        task_search_layout.Add(window = wx.Panel(parent = task_search_holder,id = wx.ID_ANY),pos = (0,12),flag = wx.EXPAND)
        task_search_layout.Add(window = search_button,pos = (0,13),flag = wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        task_search_layout.AddGrowableCol(4)
        task_search_layout.AddGrowableCol(8)
        task_search_layout.AddGrowableCol(12)
        task_search_holder.SetSizer(task_search_layout)
        
        #任务列表
        self.task_list = wx.ListCtrl(parent = self.task_holder,id = wx.ID_ANY,style = wx.LC_REPORT)
        self.task_list.EnableCheckBoxes()
        self.task_list.InsertColumn(0,'已完成')
        self.task_list.InsertColumn(1,'任务')
        self.task_list.InsertColumn(2,'下达人')
        self.task_list.InsertColumn(3,'经办人')
        self.task_list.InsertColumn(4,'提交时间')
        self.task_list.InsertColumn(5,'计划完成时间')
        self.task_list.InsertColumn(6,'完成情况')
        self.task_list.InsertColumn(7,'实际完成时间')
        self.show_task_item()

        #任务框
        task_name_holder = wx.Panel(parent = self.task_holder,id = wx.ID_ANY)
        self.task_name_text = wx.TextCtrl(parent = task_name_holder)
        self.leader_cmbox = wx.ComboBox(parent = task_name_holder,id = wx.ID_ANY,choices = contact_cmbox_options,style = wx.CB_DROPDOWN)
        self.leader_cmbox.AutoComplete(contact_cmbox_options)
        self.handler_cmbox = wx.ComboBox(parent = task_name_holder,id = wx.ID_ANY,choices = contact_cmbox_options,style = wx.CB_DROPDOWN)
        self.handler_cmbox.AutoComplete(contact_cmbox_options)
        task_name_layout = wx.GridBagSizer(vgap = 5,hgap = 10)
        task_name_layout.Add(window = wx.StaticText(parent = task_name_holder,label = '新任务'),\
                             pos = (0,0),flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        task_name_layout.Add(window = self.task_name_text,pos = (0,1),flag = wx.EXPAND)
        task_name_layout.Add(window = wx.StaticText(parent = task_name_holder,label = '下达人'),\
                             pos = (0,2),flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        task_name_layout.Add(window = self.leader_cmbox,pos = (0,3),flag = wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        task_name_layout.Add(window = wx.StaticText(parent = task_name_holder,label = '经办人'),\
                             pos = (0,4),flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        task_name_layout.Add(window = self.handler_cmbox,pos = (0,5),flag = wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        task_name_layout.AddGrowableCol(1)
        task_name_holder.SetSizer(task_name_layout)
        task_action_holder = wx.Panel(parent = self.task_holder,id = wx.ID_ANY)
        self.add_datetime_ckbox = wx.CheckBox(parent = task_action_holder,id = wx.ID_ANY)
        self.add_date_picker = wx.adv.DatePickerCtrl(parent = task_action_holder,id = wx.ID_ANY,style = wx.adv.DP_DROPDOWN | wx.adv.DP_SHOWCENTURY)
        self.add_date_picker.Disable()
        self.add_time_picker = wx.adv.TimePickerCtrl(parent = task_action_holder,id = wx.ID_ANY)
        self.add_time_picker.Disable()
        self.schedule_datetime_ckbox = wx.CheckBox(parent = task_action_holder,id = wx.ID_ANY)
        self.schedule_date_picker = wx.adv.DatePickerCtrl(parent = task_action_holder,id = wx.ID_ANY,style = wx.adv.DP_DROPDOWN | wx.adv.DP_SHOWCENTURY)
        self.schedule_date_picker.Disable()
        self.schedule_time_picker = wx.adv.TimePickerCtrl(parent = task_action_holder)
        self.schedule_time_picker.Disable()
        add_button = wx.Button(parent = task_action_holder,label = '添加')
        task_action_layout = wx.GridBagSizer(vgap = 5,hgap = 10)
        task_action_layout.Add(window = wx.StaticText(parent = task_action_holder,label = '实际添加时间'),\
                               pos = (0,0),flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        task_action_layout.Add(window = self.add_datetime_ckbox,pos = (0,1),flag = wx.EXPAND)
        task_action_layout.Add(window = self.add_date_picker,pos = (0,2))
        task_action_layout.Add(window = self.add_time_picker,pos = (0,3))
        task_action_layout.Add(window = wx.StaticText(parent = task_action_holder,label = '计划完成时间'),\
                               pos = (0,4),flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        task_action_layout.Add(window = self.schedule_datetime_ckbox,pos = (0,5),flag = wx.EXPAND)
        task_action_layout.Add(window = self.schedule_date_picker,pos = (0,6))
        task_action_layout.Add(window = self.schedule_time_picker,pos = (0,7))
        task_action_layout.Add(window = wx.Panel(parent = task_action_holder,id = wx.ID_ANY),pos = (0,8),flag = wx.EXPAND)
        task_action_layout.Add(window = add_button,pos = (0,9),flag = wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        task_action_layout.AddGrowableCol(4)
        task_action_layout.AddGrowableCol(8)
        task_action_holder.SetSizer(task_action_layout)

        task_layout = wx.GridBagSizer(vgap = 5,hgap = 10)
        task_layout.Add(window = wx.Panel(parent = self.task_holder,id = wx.ID_ANY,size = (20,15)),pos = (0,0),flag = wx.EXPAND)
        task_layout.Add(window = wx.Panel(parent = self.task_holder,id = wx.ID_ANY,size = (0,15)),pos = (0,1),flag = wx.EXPAND)
        task_layout.Add(window = wx.Panel(parent = self.task_holder,id = wx.ID_ANY,size = (20,15)),pos = (0,2),flag = wx.EXPAND)
        task_layout.Add(window = wx.Panel(parent = self.task_holder,id = wx.ID_ANY,size = (20,0)),pos = (1,0),flag = wx.EXPAND)
        task_layout.Add(window = task_name_key_holder,pos = (1,1),flag = wx.EXPAND)
        task_layout.Add(window = wx.Panel(parent = self.task_holder,id = wx.ID_ANY,size = (20,0)),pos = (1,2),flag = wx.EXPAND)
        task_layout.Add(window = wx.Panel(parent = self.task_holder,id = wx.ID_ANY,size = (20,0)),pos = (2,0),flag = wx.EXPAND)
        task_layout.Add(window = task_search_holder,pos = (2,1),flag = wx.EXPAND)
        task_layout.Add(window = wx.Panel(parent = self.task_holder,id = wx.ID_ANY,size = (20,0)),pos = (2,2),flag = wx.EXPAND)
        task_layout.Add(window = wx.Panel(parent = self.task_holder,id = wx.ID_ANY,size = (20,0)),pos = (3,0),flag = wx.EXPAND)
        task_layout.Add(window = self.task_list,pos = (3,1),flag = wx.EXPAND)
        task_layout.Add(window = wx.Panel(parent = self.task_holder,id = wx.ID_ANY,size = (20,0)),pos = (3,2),flag = wx.EXPAND)
        task_layout.Add(window = wx.Panel(parent = self.task_holder,id = wx.ID_ANY,size = (20,0)),pos = (4,0),flag = wx.EXPAND)
        task_layout.Add(window = task_name_holder,pos = (4,1),flag = wx.EXPAND)
        task_layout.Add(window = wx.Panel(parent = self.task_holder,id = wx.ID_ANY,size = (20,0)),pos = (4,2),flag = wx.EXPAND)
        task_layout.Add(window = wx.Panel(parent = self.task_holder,id = wx.ID_ANY,size = (20,0)),pos = (5,0),flag = wx.EXPAND)
        task_layout.Add(window = task_action_holder,pos = (5,1),flag = wx.EXPAND)
        task_layout.Add(window = wx.Panel(parent = self.task_holder,id = wx.ID_ANY,size = (20,0)),pos = (5,2),flag = wx.EXPAND)
        task_layout.Add(window = wx.Panel(parent = self.task_holder,id = wx.ID_ANY,size = (20,15)),pos = (6,0),flag = wx.EXPAND)
        task_layout.Add(window = wx.Panel(parent = self.task_holder,id = wx.ID_ANY,size = (0,15)),pos = (6,1),flag = wx.EXPAND)
        task_layout.Add(window = wx.Panel(parent = self.task_holder,id = wx.ID_ANY,size = (20,15)),pos = (6,2),flag = wx.EXPAND)
        task_layout.AddGrowableRow(3)
        task_layout.AddGrowableCol(1)
        self.task_holder.SetSizer(task_layout)

        #事件绑定
        self.Bind(wx.EVT_CHAR_HOOK,self.window_on_char_hook)
        self.Bind(wx.EVT_SIZE,self.window_on_resized)
        self.Bind(wx.EVT_CLOSE,self.window_on_closed)
        self.Bind(wx.EVT_MENU,self.refresh_task_menu_item_on_clicked,refresh_task_menu_item)
        self.Bind(wx.EVT_MENU,self.chat_comm_menu_item_on_clicked,chat_comm_menu_item)
        self.Bind(wx.EVT_MENU,self.file_comm_menu_item_on_clicked,file_comm_menu_item)
        self.Bind(wx.EVT_MENU,self.wmail_comm_menu_item_on_clicked,wmail_comm_menu_item)
        self.Bind(wx.EVT_MENU,self.email_comm_menu_item_on_clicked,email_comm_menu_item)
        self.Bind(wx.EVT_MENU,self.contact_comm_menu_item_on_clicked,contact_comm_menu_item)
        self.Bind(wx.EVT_MENU,self.self_defined_tool_menu_item_on_clicked,self_defined_tool_menu_item)
        self.Bind(wx.EVT_MENU,self.third_party_tool_menu_item_on_clicked,third_party_tool_menu_item)
        self.Bind(wx.EVT_MENU,self.user_setup_menu_item_on_clicked,user_setup_menu_item)
        self.Bind(wx.EVT_MENU,self.email_setup_menu_item_on_clicked,email_setup_menu_item)
        self.Bind(wx.EVT_MENU,self.password_setup_menu_item_on_clicked,password_setup_menu_item)
        self.Bind(wx.EVT_MENU,self.about_menu_item_on_clicked,about_menu_item)

        self.add_date_key_ckbox.Bind(event = wx.EVT_CHECKBOX,handler = self.add_date_key_ckbox_on_checked)
        self.schedule_date_key_ckbox.Bind(event = wx.EVT_CHECKBOX,handler = self.schedule_date_key_ckbox_on_checked)
        self.complete_date_key_ckbox.Bind(event = wx.EVT_CHECKBOX,handler = self.complete_date_key_ckbox_on_checked)
        search_button.Bind(event = wx.EVT_BUTTON,handler = self.search_button_on_clicked)
        self.task_list.Bind(event = wx.EVT_LIST_ITEM_CHECKED,handler = self.task_list_ckbox_on_checked)
        self.task_list.Bind(event = wx.EVT_LIST_ITEM_UNCHECKED,handler = self.task_list_ckbox_on_unchecked)
        self.add_datetime_ckbox.Bind(event = wx.EVT_CHECKBOX,handler = self.add_datetime_ckbox_on_checked)
        self.schedule_datetime_ckbox.Bind(event = wx.EVT_CHECKBOX,handler = self.schedule_datetime_ckbox_on_checked)
        add_button.Bind(event = wx.EVT_BUTTON,handler = self.add_button_on_clicked)
        
    '''
    列出任务清单
    param condition 查询条件
    param page_size 分页大小
    param page_no 页码
    '''
    def show_task_item(self,condition = {},page_size = -1,page_no = 0):
        tasks = TaskDao.and_list(condition,page_size,page_no)
        index = 0
        i = 0
        for task in tasks[1]:
            index = self.task_list.InsertItem(i,'')
            if -1 == index:
                continue
            self.task_list.CheckItem(index,True) if TaskStatus.COMPLETED.value == task['task_status'] else self.task_list.CheckItem(index,False)
            self.task_list.SetItemData(index,task['task_id'])
            self.task_list.SetItem(index,1,task['task_name'])
            self.task_list.SetItem(index,2,task['leader'])
            self.task_list.SetItem(index,3,task['handler'])
            self.task_list.SetItem(index,4,task['add_time'])
            self.task_list.SetItem(index,5,task['schedule_time'] if task['schedule_time'] else '')
            self.task_list.SetItem(index,6,task['complete_desc'] if task['complete_desc'] else '')
            self.task_list.SetItem(index,7,task['complete_time'] if task['complete_time'] else '')
            i = i + 1

    '''
    按键事件
    param event 事件信息
    '''
    def window_on_char_hook(self,event):
        if wx.stc.STC_KEY_RETURN == event.GetKeyCode():
            if self.task_name_key_text.HasFocus() or self.leader_key_cmbox.HasFocus()\
                    or self.handler_key_cmbox.HasFocus() or self.task_status_key_cmbox.HasFocus()\
                    or self.complete_description_key_text.HasFocus() or self.add_date_key_ckbox.HasFocus()\
                    or self.start_add_date_picker.HasFocus() or self.end_add_date_picker.HasFocus()\
                    or self.schedule_date_key_ckbox.HasFocus() or self.start_schedule_date_picker.HasFocus()\
                    or self.end_schedule_date_picker.HasFocus() or self.complete_date_key_ckbox.HasFocus()\
                    or self.start_complete_date_picker.HasFocus() or self.end_complete_date_picker.HasFocus():
                self.search_button_on_clicked(event)
            elif self.task_name_text.HasFocus() or self.leader_cmbox.HasFocus()\
                    or self.handler_cmbox.HasFocus() or self.add_date_picker.HasFocus()\
                    or self.add_time_picker.HasFocus() or self.schedule_datetime_ckbox.HasFocus()\
                    or self.schedule_date_picker.HasFocus() or self.schedule_time_picker.HasFocus():
                self.add_button_on_clicked(event)
            else:
                pass
        event.Skip()

    '''
    窗口改变大小事件
    param event 事件信息
    '''
    def window_on_resized(self,event):
        size = self.GetSize()
        width = size[0] - 15
        height = size[1] - 55
        self.task_holder.SetSize((width,height))

        width = width - 20 - 20 - 50 - 100 - 100 - 100
        self.task_list.SetColumnWidth(0,50)
        self.task_list.SetColumnWidth(1,int(width * 0.35))
        self.task_list.SetColumnWidth(2,int(width * 0.1))
        self.task_list.SetColumnWidth(3,int(width * 0.1))
        self.task_list.SetColumnWidth(4,100)
        self.task_list.SetColumnWidth(5,100)
        self.task_list.SetColumnWidth(6,int(width * 0.35))
        self.task_list.SetColumnWidth(7,100)

    '''
    窗口关闭按钮
    param event 事件信息
    '''
    def window_on_closed(self,event):
        if wx.OK == wx.MessageBox(message = '确定退出应用？',caption = '退出',\
                                     style = wx.OK | wx.CANCEL | wx.ICON_QUESTION,parent = self):
            self.Destroy()

    '''
    点击任务刷新菜单
    param event 事件信息
    '''
    def refresh_task_menu_item_on_clicked(self,event):
        self.search_button_on_clicked(event)

    '''
    点击聊天菜单
    param event 事件信息
    '''
    def chat_comm_menu_item_on_clicked(self,event):
        client_window = ClientWindow(self,MsgType.CHAT.value)
        client_window.Centre()
        client_window.Show()

    '''
    点击文件菜单
    param event 事件信息
    '''
    def file_comm_menu_item_on_clicked(self,event):
        client_window = ClientWindow(self,MsgType.FILE.value)
        client_window.Centre()
        client_window.Show()

    '''
    点击微邮菜单按钮
    param event 事件信息
    '''
    def wmail_comm_menu_item_on_clicked(self,event):
        deliver_window = DeliverWindow(self)
        deliver_window.Centre()
        deliver_window.Show()

    '''
    点击电子邮件按钮事件
    param event 事件信息
    '''
    def email_comm_menu_item_on_clicked(self,event):
        email_window = EMailWindow(self)
        email_window.Centre()
        email_window.Show()

    '''
    点击通讯录按钮事件
    param event 事件信息
    '''
    def contact_comm_menu_item_on_clicked(self,event):
        contact_window = ContactWindow(self)
        contact_window.Centre()
        contact_window.Show()

    '''
    点击自定义工具菜单
    param event 事件信息
    '''
    def self_defined_tool_menu_item_on_clicked(self,event):
        toolbox_window = ToolboxWindow(self,ToolType.SELF_DEFINED.value)
        toolbox_window.Centre()
        toolbox_window.Show()

    '''
    点击第三方工具菜单
    param event 事件信息
    '''
    def third_party_tool_menu_item_on_clicked(self,event):
        toolbox_window = ToolboxWindow(self,ToolType.THIRD_PARTY.value)
        toolbox_window.Centre()
        toolbox_window.Show()

    '''
    点击用户设置菜单
    param event 事件信息
    '''
    def user_setup_menu_item_on_clicked(self,event):
        user_setup_window = UserSetupWindow(self)
        user_setup_window.Centre()
        user_setup_window.Show()

    '''
    点击邮箱设置菜单
    parame event 事件信息
    '''
    def email_setup_menu_item_on_clicked(self,event):
        email_setup_window = EMailSetupWindow(self)
        email_setup_window.Centre()
        email_setup_window.Show()

    '''
    点击密码设置菜单
    param event 事件信息
    '''
    def password_setup_menu_item_on_clicked(self,event):
        password_setup_window = PasswordSetupWindow(self)
        password_setup_window.Centre()
        password_setup_window.Show()

    '''
    点击关于菜单
    param event 事件信息
    '''
    def about_menu_item_on_clicked(self,event):
        about_window = AboutWindow(self)
        about_window.Centre()
        about_window.Show()

    '''
    点击添加日期选择框
    param event 事件信息
    '''
    def add_date_key_ckbox_on_checked(self,event):
        if event.GetEventObject().GetValue():
            self.start_add_date_picker.Enable()
            self.end_add_date_picker.Enable()
        else:
            self.start_add_date_picker.Disable()
            self.end_add_date_picker.Disable()

    '''
    点击计划完成日期选择框
    param event 事件信息
    '''
    def schedule_date_key_ckbox_on_checked(self,event):
        if event.GetEventObject().GetValue():
            self.start_schedule_date_picker.Enable()
            self.end_schedule_date_picker.Enable()
        else:
            self.start_schedule_date_picker.Disable()
            self.end_schedule_date_picker.Disable()

    '''
    点击完成日期选择框
    param event 事件信息
    '''
    def complete_date_key_ckbox_on_checked(self,event):
        if event.GetEventObject().GetValue():
            self.start_complete_date_picker.Enable()
            self.end_complete_date_picker.Enable()
        else:
            self.start_complete_date_picker.Disable()
            self.end_complete_date_picker.Disable()
            
    '''
    点击查询按钮
    param event 事件信息
    '''
    def search_button_on_clicked(self,event):
        add_date_key_checked = self.add_date_key_ckbox.GetValue()
        start_add_date = self.start_add_date_picker.GetValue()
        end_add_date = self.end_add_date_picker.GetValue()
        schedule_date_key_checked = self.schedule_date_key_ckbox.GetValue()
        start_scheudle_date = self.start_schedule_date_picker.GetValue()
        end_schedule_date = self.end_schedule_date_picker.GetValue()
        complete_date_key_checked = self.complete_date_key_ckbox.GetValue()
        start_complete_date = self.start_complete_date_picker.GetValue()
        end_complete_date = self.end_complete_date_picker.GetValue()
        task_status_key = self.task_status_key_cmbox.GetCurrentSelection()
        if 1 == task_status_key:
            task_status_key = TaskStatus.PROCESSING.value
        elif 2 == task_status_key:
            task_status_key = TaskStatus.COMPLETED.value
        else:
            task_status_key = -1
        condition = {'task_name_key':self.task_name_key_text.GetValue(),\
                     'leader_key':self.leader_key_cmbox.GetValue(),\
                     'handler_key':self.handler_key_cmbox.GetValue(),\
                     'start_add_date':datetime.datetime(start_add_date.year,start_add_date.month + 1,start_add_date.day).strftime('%Y-%m-%d') if add_date_key_checked else None,\
                     'end_add_date':datetime.datetime(end_add_date.year,end_add_date.month + 1,end_add_date.day).strftime('%Y-%m-%d') if add_date_key_checked else None,\
                     'start_schedule_date':datetime.datetime(start_scheudle_date.year,start_scheudle_date.month + 1,start_scheudle_date.day).strftime('%Y-%m-%d') if schedule_date_key_checked else None,\
                     'end_schedule_date':datetime.datetime(end_schedule_date.year,end_schedule_date.month + 1,end_schedule_date.day).strftime('%Y-%m-%d') if schedule_date_key_checked else None,\
                     'start_complete_date':datetime.datetime(start_complete_date.year,start_complete_date.month + 1,start_complete_date.day).strftime('%Y-%m-%d') if complete_date_key_checked else None,\
                     'end_complete_date':datetime.datetime(end_complete_date.year,end_complete_date.month + 1,end_complete_date.day).strftime('%Y-%m-%d') if complete_date_key_checked else None,\
                     'task_status_key':task_status_key,
                     'complete_description_key':self.complete_description_key_text.GetValue()}
        
        self.task_list.Unbind(event = wx.EVT_LIST_ITEM_UNCHECKED,handler = self.task_list_ckbox_on_unchecked)
        self.task_list.Unbind(event = wx.EVT_LIST_ITEM_CHECKED,handler = self.task_list_ckbox_on_checked)
        self.task_list.DeleteAllItems()
        self.show_task_item(condition)
        self.task_list.Bind(event = wx.EVT_LIST_ITEM_CHECKED,handler = self.task_list_ckbox_on_checked)
        self.task_list.Bind(event = wx.EVT_LIST_ITEM_UNCHECKED,handler = self.task_list_ckbox_on_unchecked)

    '''
    任务项目完成复选框选中
    param event 事件信息
    '''
    def task_list_ckbox_on_checked(self,event):
        index = event.GetIndex()
        complete_task_dialog = CompleteTaskDialog(self,self.task_list.GetItemText(index,1))
        complete_task_dialog.Centre()
        complete = complete_task_dialog.ShowModal()
        if wx.YES == complete:
            affect = TaskDao.modify_complete_desc_complete_time_task_status_by_primary_key(self.task_list.GetItemData(index),self.complete_description,self.complete_time,TaskStatus.COMPLETED)
            if 1 == affect:
                self.task_list.SetItem(index,6,self.complete_description)
                self.task_list.SetItem(index,7,self.complete_time.strftime('%Y-%m-%d %H:%M:%S'))
                #self.task_list.CheckItem(index,True)

                return
        self.task_list.CheckItem(index,False)
            
    '''
    任务项目取消完成复选框
    param event 事件信息
    '''
    def task_list_ckbox_on_unchecked(self,event):
        index = event.GetIndex()
        affect = TaskDao.modify_complete_desc_complete_time_task_status_by_primary_key(self.task_list.GetItemData(index),None,None,TaskStatus.PROCESSING)
        if 1 == affect:
            self.task_list.SetItem(index,6,'')
            self.task_list.SetItem(index,7,'')
            #self.task_list.CheckItem(index,False)

            return
        self.task_list.CheckItem(index,True)

    '''
    点击实际添加时间复选框
    param event 事件信息息
    '''
    def add_datetime_ckbox_on_checked(self,event):
        if event.GetEventObject().GetValue():
            self.add_date_picker.Enable()
            self.add_time_picker.Enable()
        else:
            self.add_date_picker.Disable()
            self.add_time_picker.Disable()

    '''
    点击计划完成时间复选框
    param event 事件信息
    '''
    def schedule_datetime_ckbox_on_checked(self,event):
        if event.GetEventObject().GetValue():
            self.schedule_date_picker.Enable()
            self.schedule_time_picker.Enable()
        else:
            self.schedule_date_picker.Disable()
            self.schedule_time_picker.Disable()
        
    '''
    单击添加按钮
    param event 事件信息
    '''
    def add_button_on_clicked(self,event):
        task_name = self.task_name_text.GetValue()
        leader = self.leader_cmbox.GetValue()
        handler = self.handler_cmbox.GetValue()
        date = self.add_date_picker.GetValue()
        time = self.add_time_picker.GetValue()
        if self.add_datetime_ckbox.GetValue():
            add_datetime = datetime.datetime(date.year,date.month + 1,date.day,time.hour,time.minute,time.second)
        else:
            add_datetime = datetime.datetime.now()
        if self.schedule_datetime_ckbox.GetValue():
            date = self.schedule_date_picker.GetValue()
            time = self.schedule_time_picker.GetValue()
            schedule_datetime = datetime.datetime(date.year,date.month + 1,date.day,time.hour,time.minute,time.second)
        else:
            schedule_datetime = None

        if not task_name:
            wx.MessageBox(message = '任务为空',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)
            self.task_name_text.SetFocus()

            return
        
        global task_data
        global current_user
        task_id = ParameterDao.auto_increment(ParameterName.TASK_ID.value)
        task_data.execute([['INSERT INTO task VALUES (?,?,?,?,?,?,?,?,?,?,?,?)',\
                            (task_id,task_name,None,leader,handler,\
                             add_datetime,schedule_datetime,None,None,current_user.user_id,\
                             TaskStatus.PROCESSING.value,datetime.datetime.now())]])
        task_data.commit()

        index = self.task_list.InsertItem(0,'')
        if -1 != index:
            self.task_list.SetItemData(index,task_id)
            self.task_list.SetItem(index,1,task_name)
            self.task_list.SetItem(index,2,leader)
            self.task_list.SetItem(index,3,handler)
            self.task_list.SetItem(index,4,add_datetime.strftime('%Y-%m-%d %H:%M:%S'))
            self.task_list.SetItem(index,5,schedule_datetime.strftime('%Y-%m-%d %H:%M:%S') if schedule_datetime else '')
            self.task_list.SetItem(index,6,'')
        
        self.task_name_text.SetValue('')
        self.leader_cmbox.SetValue('')
        self.handler_cmbox.SetValue('')
        current_time = datetime.datetime.now()
        self.add_date_picker.SetValue(current_time)
        self.add_time_picker.SetValue(current_time)
        self.schedule_date_picker.SetValue(current_time)
        self.schedule_time_picker.SetValue(current_time)
        
        self.task_name_text.SetFocus()

'''
关于窗口
author 一心
'''
class AboutWindow(wx.Frame):
    '''
    初始化
    param parent 父窗口
    '''
    def __init__(self,parent):
        super().__init__(id = wx.ID_ANY,parent = parent,title = '关于 - ' + Constants.APP_NAME,size = (390,300),\
                         style = wx.DEFAULT_FRAME_STYLE ^ wx.RESIZE_BORDER ^ wx.MAXIMIZE_BOX)
        self.SetIcon(Tools.image2icon(base64.b64decode(Constants.APP_ICON)))

        try:
            ip = Tools.obt_ip()
        except Exception as e:
            ip = ''
            traceback.print_exc()

        about_holder = wx.Panel(parent = self,id = wx.ID_ANY)

        contact_holder = wx.Panel(parent = about_holder,id = wx.ID_ANY)
        contact_layout = wx.GridBagSizer(vgap = 5,hgap = 10)
        contact_layout.Add(window = wx.StaticBitmap(parent = contact_holder,id = wx.ID_ANY,bitmap = wx.Image(BytesIO(base64.b64decode(Constants.WCHAT_QR_CODE))),size = (80,80)),\
                           pos = (0,0),flag = wx.ALIGN_CENTER | wx.EXPAND)
        contact_layout.Add(window = wx.StaticBitmap(parent = contact_holder,id = wx.ID_ANY,bitmap = wx.Image(BytesIO(base64.b64decode(Constants.WCHAT_FINANCES_QR_CODE))),size = (80,80)),\
                           pos = (0,1),flag = wx.ALIGN_CENTER | wx.EXPAND)
        contact_layout.Add(window = wx.StaticBitmap(parent = contact_holder,id = wx.ID_ANY,bitmap = wx.Image(BytesIO(base64.b64decode(Constants.ALIPAY_FINANCES_QR_CODE))),size = (80,80)),\
                           pos = (0,2),flag = wx.ALIGN_CENTER | wx.EXPAND)
        contact_layout.Add(window = wx.StaticText(parent = contact_holder,label = '    扫码加微    '),pos = (1,0),flag = wx.ALIGN_CENTER | wx.EXPAND)
        contact_layout.Add(window = wx.StaticText(parent = contact_holder,label = ' 扫码资助（微信） '),pos = (1,1),flag = wx.ALIGN_CENTER | wx.EXPAND)
        contact_layout.Add(window = wx.StaticText(parent = contact_holder,label = '扫码资助（支付宝）'),pos = (1,2),flag = wx.ALIGN_CENTER | wx.EXPAND)
        contact_layout.AddGrowableRow(0)
        contact_layout.AddGrowableRow(1)
        contact_holder.SetSizer(contact_layout)

        app_name_label = wx.StaticText(parent = about_holder,id = wx.ID_ANY,label = Constants.APP_NAME + ' ' + Constants.APP_VERSION)
        app_name_label.SetFont(wx.Font(18,wx.FONTFAMILY_TELETYPE,wx.FONTSTYLE_NORMAL,wx.FONTWEIGHT_BOLD))
        about_layout = wx.GridBagSizer(vgap = 5,hgap = 10)
        about_layout.Add(window = wx.Panel(parent = about_holder,id = wx.ID_ANY,size = (20,15)),pos = (0,0),flag = wx.EXPAND)
        about_layout.Add(window = wx.Panel(parent = about_holder,id = wx.ID_ANY,size = (0,15)),pos = (0,1),flag = wx.EXPAND)
        about_layout.Add(window = wx.Panel(parent = about_holder,id = wx.ID_ANY,size = (20,15)),pos = (0,2),flag = wx.EXPAND)
        about_layout.Add(window = wx.Panel(parent = about_holder,id = wx.ID_ANY,size = (20,0)),pos = (1,0),flag = wx.EXPAND)
        about_layout.Add(window = app_name_label,pos = (1,1),flag = wx.ALIGN_CENTER | wx.EXPAND)
        about_layout.Add(window = wx.Panel(parent = about_holder,id = wx.ID_ANY,size = (20,0)),pos = (1,2),flag = wx.EXPAND)
        about_layout.Add(window = wx.Panel(parent = about_holder,id = wx.ID_ANY,size = (20,15)),pos = (2,0),flag = wx.EXPAND)
        about_layout.Add(window = wx.Panel(parent = about_holder,id = wx.ID_ANY,size = (0,15)),pos = (2,1),flag = wx.EXPAND)
        about_layout.Add(window = wx.Panel(parent = about_holder,id = wx.ID_ANY,size = (20,15)),pos = (2,2),flag = wx.EXPAND)
        about_layout.Add(window = wx.Panel(parent = about_holder,id = wx.ID_ANY,size = (20,0)),pos = (3,0),flag = wx.EXPAND)
        about_layout.Add(window = wx.StaticText(parent = about_holder,id = wx.ID_ANY,label = '本机IP：' + ip),\
                         pos = (3,1),flag = wx.ALIGN_CENTER | wx.EXPAND)
        about_layout.Add(window = wx.Panel(parent = about_holder,id = wx.ID_ANY,size = (20,0)),pos = (3,2),flag = wx.EXPAND)
        about_layout.Add(window = wx.Panel(parent = about_holder,id = wx.ID_ANY,size = (20,0)),pos = (4,0),flag = wx.EXPAND)
        about_layout.Add(window = wx.StaticText(parent = about_holder,id = wx.ID_ANY,label = 'Copyright 2023-2024        MissYuanxi'),\
                         pos = (4,1),flag = wx.ALIGN_CENTER | wx.EXPAND)
        about_layout.Add(window = wx.Panel(parent = about_holder,id = wx.ID_ANY,size = (20,0)),pos = (4,2),flag = wx.EXPAND)
        about_layout.Add(window = wx.Panel(parent = about_holder,id = wx.ID_ANY,size = (20,20)),pos = (5,0),flag = wx.EXPAND)
        about_layout.Add(window = wx.Panel(parent = about_holder,id = wx.ID_ANY,size = (0,20)),pos = (5,1),flag = wx.EXPAND)
        about_layout.Add(window = wx.Panel(parent = about_holder,id = wx.ID_ANY,size = (20,20)),pos = (5,2),flag = wx.EXPAND)
        about_layout.Add(window = wx.Panel(parent = about_holder,id = wx.ID_ANY,size = (20,0)),pos = (6,0),flag = wx.EXPAND)
        about_layout.Add(window = contact_holder,pos = (6,1),flag = wx.ALIGN_CENTER | wx.EXPAND)
        about_layout.Add(window = wx.Panel(parent = about_holder,id = wx.ID_ANY,size = (20,0)),pos = (6,2),flag = wx.EXPAND)
        about_layout.Add(window = wx.Panel(parent = about_holder,id = wx.ID_ANY,size = (20,15)),pos = (7,0),flag = wx.EXPAND)
        about_layout.Add(window = wx.Panel(parent = about_holder,id = wx.ID_ANY,size = (0,15)),pos = (7,1),flag = wx.EXPAND)
        about_layout.Add(window = wx.Panel(parent = about_holder,id = wx.ID_ANY,size = (20,15)),pos = (7,2),flag = wx.EXPAND)
        about_layout.AddGrowableRow(6)
        about_holder.SetSizer(about_layout)

'''
完成任务对话框
author 一心
'''
class CompleteTaskDialog(wx.Dialog):
    complete_description_text = None
    complete_date_picker = None
    complete_time_picker = None
    complete_button = None
    reset_button = None

    '''
    初始化
    param parent 父窗口
    param name 任务
    '''
    def __init__(self,parent,name):
        super().__init__(id = wx.ID_ANY,parent = parent,title = '完成任务[' + name + ']',size = (480,185))
        self.SetIcon(Tools.image2icon(base64.b64decode(Constants.APP_ICON)))

        complete_holder = wx.Panel(parent = self,id = wx.ID_ANY)
        self.complete_description_text = wx.TextCtrl(parent = complete_holder)
        complete_datetime_holder = wx.Panel(parent = complete_holder,id = wx.ID_ANY)
        self.complete_date_picker = wx.adv.DatePickerCtrl(parent = complete_datetime_holder,id = wx.ID_ANY,style = wx.adv.DP_DROPDOWN | wx.adv.DP_SHOWCENTURY)
        self.complete_time_picker = wx.adv.TimePickerCtrl(parent = complete_datetime_holder,id = wx.ID_ANY)
        complete_datetime_layout = wx.GridBagSizer(vgap = 5,hgap = 10)
        complete_datetime_layout.Add(window = self.complete_date_picker,pos = (0,0),flag = wx.EXPAND)
        complete_datetime_layout.Add(window = self.complete_time_picker,pos = (0,1),flag = wx.EXPAND)
        complete_datetime_holder.SetSizer(complete_datetime_layout)
        action_holder = wx.Panel(parent = complete_holder,id = wx.ID_ANY)
        self.complete_button = wx.Button(parent = action_holder,label = '完成')
        self.reset_button = wx.Button(parent = action_holder,label = '重置')
        action_layout = wx.BoxSizer(wx.HORIZONTAL)
        action_layout.Add(window = self.complete_button)
        action_layout.Add(window = self.reset_button)
        action_holder.SetSizer(action_layout)
        
        complete_layout = wx.GridBagSizer(vgap = 5,hgap = 10)
        complete_layout.Add(window = wx.Panel(parent = complete_holder,id = wx.ID_ANY,size = (20,25)),pos = (0,0),flag = wx.EXPAND)
        complete_layout.Add(window = wx.Panel(parent = complete_holder,id = wx.ID_ANY,size = (0,25)),pos = (0,1),flag = wx.EXPAND)
        complete_layout.Add(window = wx.Panel(parent = complete_holder,id = wx.ID_ANY,size = (0,25)),pos = (0,2),flag = wx.EXPAND)
        complete_layout.Add(window = wx.Panel(parent = complete_holder,id = wx.ID_ANY,size = (20,25)),pos = (0,3),flag = wx.EXPAND)
        complete_layout.Add(window = wx.Panel(parent = complete_holder,id = wx.ID_ANY,size = (20,0)),pos = (1,0),flag = wx.EXPAND)
        complete_layout.Add(window = wx.StaticText(parent = complete_holder,id = wx.ID_ANY,label = '完成情况'),\
                            pos = (1,1),flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        complete_layout.Add(window = self.complete_description_text,pos = (1,2),flag = wx.EXPAND)
        complete_layout.Add(window = wx.Panel(parent = complete_holder,id = wx.ID_ANY,size = (20,0)),pos = (1,3),flag = wx.EXPAND)
        complete_layout.Add(window = wx.Panel(parent = complete_holder,id = wx.ID_ANY,size = (20,0)),pos = (2,0),flag = wx.EXPAND)
        complete_layout.Add(window = wx.StaticText(parent = complete_holder,id = wx.ID_ANY,label = '完成时间'),\
                            pos = (2,1),flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        complete_layout.Add(window = complete_datetime_holder,pos = (2,2),flag = wx.EXPAND)
        complete_layout.Add(window = wx.Panel(parent = complete_holder,id = wx.ID_ANY,size = (20,0)),pos = (2,3),flag = wx.EXPAND)
        complete_layout.Add(window = wx.Panel(parent = complete_holder,id = wx.ID_ANY,size = (20,0)),pos = (3,0),flag = wx.EXPAND)
        complete_layout.Add(window = action_holder,pos = (3,1),span = (1,2),flag = wx.ALIGN_CENTER | wx.EXPAND)
        complete_layout.Add(window = wx.Panel(parent = complete_holder,id = wx.ID_ANY,size = (20,0)),pos = (3,3),flag = wx.EXPAND)
        complete_layout.Add(window = wx.Panel(parent = complete_holder,id = wx.ID_ANY,size = (20,25)),pos = (4,0),flag = wx.EXPAND)
        complete_layout.Add(window = wx.Panel(parent = complete_holder,id = wx.ID_ANY,size = (0,25)),pos = (4,1),flag = wx.EXPAND)
        complete_layout.Add(window = wx.Panel(parent = complete_holder,id = wx.ID_ANY,size = (0,25)),pos = (4,2),flag = wx.EXPAND)
        complete_layout.Add(window = wx.Panel(parent = complete_holder,id = wx.ID_ANY,size = (20,25)),pos = (4,3),flag = wx.EXPAND)
        complete_layout.AddGrowableCol(2)
        complete_holder.SetSizer(complete_layout)

        #事件绑定
        self.complete_button.Bind(wx.EVT_BUTTON,handler = self.complete_button_on_clicked)
        self.reset_button.Bind(wx.EVT_BUTTON,handler = self.reset_button_on_clicked)

    '''
    单击完成按钮
    param event 事件信息
    '''
    def complete_button_on_clicked(self,event):        
        self.Parent.complete_description = self.complete_description_text.GetValue()
        date = self.complete_date_picker.GetValue()
        time = self.complete_time_picker.GetValue()
        self.Parent.complete_time = datetime.datetime(date.year,date.month + 1,date.day,time.hour,time.minute,time.second)
        
        self.EndModal(wx.YES)

    '''
    单击重置按钮
    param event 事件信息
    '''
    def reset_button_on_clicked(self,event):
        self.complete_description_text.SetValue('')
        current_time = datetime.datetime.now()
        self.complete_date_picker.SetValue(current_time)
        self.complete_time_picker.SetValue(current_time)
        self.complete_description_text.SetFocus()

'''
工具箱窗口
author 一心
'''
class ToolboxWindow(wx.Frame):
    tool_type = None

    col = 10
    row = 5

    def __init__(self,parent,tool_type):
        super().__init__(id = wx.ID_ANY,parent = parent,title = '工具箱 - ' + Constants.APP_NAME,size = (620,480),\
                         style = wx.DEFAULT_FRAME_STYLE ^ wx.RESIZE_BORDER ^ wx.MAXIMIZE_BOX)
        self.SetIcon(Tools.image2icon(base64.b64decode(Constants.APP_ICON)))

        self.tool_type = tool_type

        condition = {'tool_type':tool_type}
        toolboxes = ToolboxDao.and_list(condition)

        toolbox_holder = wx.Panel(parent = self,id = wx.ID_ANY)

        #工具
        tools_holder = wx.Panel(parent = toolbox_holder,id = wx.ID_ANY)
        tool_bitmaps = []
        tool_labels = []
        for tool in toolboxes[1]:
            if tool['tool_icon']:
                tool_bitmap = wx.StaticBitmap(parent = tools_holder,bitmap = wx.Bitmap(wx.Image(BytesIO(tool['tool_icon']))),\
                                              size = (40, 40),name = tool['tool_cmd'])
            else:
                tool_bitmap = wx.StaticBitmap(parent = tools_holder,size = (40,40),name = tool['tool_cmd'])
            tip = '工具名称：' + tool['tool_name']
            if tool['tool_desc']:
                tip = tip + '\n' + '工具描述：' + tool['tool_desc']
            tool_bitmap.SetToolTip(tip)
            tool_bitmaps.append(tool_bitmap)
            tool_label = wx.StaticText(parent=tools_holder,label = tool['tool_name'],name = tool['tool_cmd'])
            if 54 < tool_label.GetClientSize()[0]:
                if 1 < Tools.count_word(tool['tool_name']):
                    tool_label.SetLabel(tool['tool_name'][:3] + '...')
                else:
                    tool_label.SetLabel(tool['tool_name'][:5] + '...')
            tool_label.SetToolTip(tip)
            tool_labels.append(tool_label)
        tools_layout = wx.GridBagSizer(vgap = 5,hgap = 10)
        k = 0
        for i in range(0,self.row * 2,2):
            for j in range(self.col):
                if k < toolboxes[0]:
                    tools_layout.Add(window = tool_bitmaps[k], pos = (i, j),flag = wx.ALIGN_CENTER | wx.EXPAND)
                    tools_layout.Add(window = tool_labels[k], pos = (i + 1, j),flag = wx.ALIGN_CENTER | wx.EXPAND)
                else:
                    tools_layout.Add(window = wx.Panel(parent = tools_holder, id = wx.ID_ANY, size = (40,40)), pos = (i, j))
                    tools_layout.Add(window = wx.Panel(parent = tools_holder, id = wx.ID_ANY, size = (40,20)), pos = (i + 1, j),\
                                     flag = wx.EXPAND)
                k = k + 1
        tools_holder.SetSizer(tools_layout)

        manager_button = wx.Button(parent = toolbox_holder,label = '管理工具')
        toolbox_layout = wx.GridBagSizer(vgap = 5,hgap = 10)
        toolbox_layout.Add(window = wx.Panel(parent = toolbox_holder,id = wx.ID_ANY,size = (20,15)),pos = (0,0),flag = wx.EXPAND)
        toolbox_layout.Add(window = wx.Panel(parent = toolbox_holder,id = wx.ID_ANY,size = (0,15)),pos = (0,1),flag = wx.EXPAND)
        toolbox_layout.Add(window = wx.Panel(parent = toolbox_holder,id = wx.ID_ANY,size = (20,15)),pos = (0,2),flag = wx.EXPAND)
        toolbox_layout.Add(window = wx.Panel(parent = toolbox_holder,id = wx.ID_ANY,size = (20,0)),pos = (1,0),flag = wx.EXPAND)
        toolbox_layout.Add(window = tools_holder,pos = (1,1))
        toolbox_layout.Add(window = wx.Panel(parent = toolbox_holder,id = wx.ID_ANY,size = (20,0)),pos = (1,2),flag = wx.EXPAND)
        toolbox_layout.Add(window = wx.Panel(parent = toolbox_holder,id = wx.ID_ANY,size = (20,10)),pos = (2,0),flag = wx.EXPAND)
        toolbox_layout.Add(window = wx.Panel(parent = toolbox_holder,id = wx.ID_ANY,size = (0,10)),pos = (2,1),flag = wx.EXPAND)
        toolbox_layout.Add(window = wx.Panel(parent = toolbox_holder,id = wx.ID_ANY,size = (20,10)),pos = (2,2),flag = wx.EXPAND)
        toolbox_layout.Add(window = wx.Panel(parent = toolbox_holder,id = wx.ID_ANY,size = (20,0)),pos = (3,0),flag = wx.EXPAND)
        toolbox_layout.Add(window = manager_button,pos = (3,1),flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL)
        toolbox_layout.Add(window = wx.Panel(parent = toolbox_holder,id = wx.ID_ANY,size = (20,0)),pos = (3,2),flag = wx.EXPAND)
        toolbox_layout.Add(window = wx.Panel(parent = toolbox_holder,id = wx.ID_ANY,size = (20,15)),pos = (4,0),flag = wx.EXPAND)
        toolbox_layout.Add(window = wx.Panel(parent = toolbox_holder,id = wx.ID_ANY,size = (0,15)),pos = (4,1),flag = wx.EXPAND)
        toolbox_layout.Add(window = wx.Panel(parent = toolbox_holder,id = wx.ID_ANY,size = (20,15)),pos = (4,2),flag = wx.EXPAND)
        toolbox_layout.AddGrowableCol(1)
        toolbox_holder.SetSizer(toolbox_layout)

        #事件绑定
        for tool_label in tool_labels:
            tool_label.Bind(event = wx.EVT_LEFT_UP,handler = self.tool_label_on_left_up)
        for tool_bitmap in tool_bitmaps:
            tool_bitmap.Bind(event = wx.EVT_LEFT_UP,handler = self.tool_label_on_left_up)
        manager_button.Bind(wx.EVT_BUTTON,self.manager_button_on_clicked)

    '''
    点击管理工具按钮事件
    param event 事件信息
    '''
    def manager_button_on_clicked(self,event):
        tool_manager_window = ToolManagerWindow(self,self.tool_type)
        tool_manager_window.Centre()
        tool_manager_window.Show()

    '''
    鼠标左键弹起事件
    param event 事件信息
    '''
    def tool_label_on_left_up(self,event):
        print('执行命令=>',event.GetEventObject().GetName())

        if ToolType.SELF_DEFINED.value == self.tool_type:
            eval(event.GetEventObject().GetName())
        elif ToolType.THIRD_PARTY.value == self.tool_type:
            subprocess.Popen(args = event.GetEventObject().GetName(),shell = True)
        else:
            pass

'''
用户设置窗口
author 一心
'''
class UserSetupWindow(wx.Frame):
    username_text = None
    fullname_text = None
    email_text = None

    '''
    初始化
    param parent 父窗口
    '''
    def __init__(self,parent):
        super().__init__(id = wx.ID_ANY,parent = parent,title = '用户设置 - ' + Constants.APP_NAME,size = (300,195),\
                         style = wx.DEFAULT_FRAME_STYLE ^ wx.RESIZE_BORDER ^ wx.MAXIMIZE_BOX)
        self.SetIcon(Tools.image2icon(base64.b64decode(Constants.APP_ICON)))

        global current_user
        user = UserDao.obt_by_primary_key(current_user.user_id)
        if not user:
            user = {'username':'','fullname':'','email':''}
            
        user_setup_holder = wx.Panel(parent = self,id = wx.ID_ANY)

        #操作
        action_holder = wx.Panel(parent = user_setup_holder,id = wx.ID_ANY)
        setup_button = wx.Button(parent = action_holder,label = '修改')
        reset_button = wx.Button(parent = action_holder,label = '重置')
        action_layout = wx.GridBagSizer(vgap = 5,hgap = 10)
        action_layout.Add(window = setup_button,pos = (0,0),flag = wx.EXPAND)
        action_layout.Add(window = reset_button,pos = (0,1),flag = wx.EXPAND)
        action_holder.SetSizer(action_layout)

        self.username_text = wx.TextCtrl(parent = user_setup_holder,value = user['username'])
        self.fullname_text = wx.TextCtrl(parent = user_setup_holder,value = user['fullname'])
        self.email_text = wx.TextCtrl(parent = user_setup_holder,value = user['email'])
        user_setup_layout = wx.GridBagSizer(vgap = 5,hgap = 10)
        user_setup_layout.Add(window = wx.Panel(parent = user_setup_holder,id = wx.ID_ANY,size = (20,15)),pos = (0,0),flag = wx.EXPAND)
        user_setup_layout.Add(window = wx.Panel(parent = user_setup_holder,id = wx.ID_ANY,size = (0,15)),pos = (0,1),span = (1,2),flag = wx.EXPAND)
        user_setup_layout.Add(window = wx.Panel(parent = user_setup_holder,id = wx.ID_ANY,size = (20,15)),pos = (0,3),flag = wx.EXPAND)
        user_setup_layout.Add(window = wx.Panel(parent = user_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (1,0),flag = wx.EXPAND)
        user_setup_layout.Add(window = wx.StaticText(parent = user_setup_holder,label = '用户名'),pos = (1,1),\
                              flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        user_setup_layout.Add(window = self.username_text,pos = (1,2),flag = wx.EXPAND)
        user_setup_layout.Add(window = wx.Panel(parent = user_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (1,3),flag = wx.EXPAND)
        user_setup_layout.Add(window = wx.Panel(parent = user_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (2,0),flag = wx.EXPAND)
        user_setup_layout.Add(window = wx.StaticText(parent = user_setup_holder,label = '昵称'),pos = (2,1),\
                              flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        user_setup_layout.Add(window = self.fullname_text,pos = (2,2),flag = wx.EXPAND)
        user_setup_layout.Add(window = wx.Panel(parent = user_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (2,3),flag = wx.EXPAND)
        user_setup_layout.Add(window = wx.Panel(parent = user_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (3,0),flag = wx.EXPAND)
        user_setup_layout.Add(window = wx.StaticText(parent = user_setup_holder,label = '电子邮件'),pos = (3,1),\
                              flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        user_setup_layout.Add(window = self.email_text,pos = (3,2),flag = wx.EXPAND)
        user_setup_layout.Add(window = wx.Panel(parent = user_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (3,3),flag = wx.EXPAND)
        user_setup_layout.Add(window = wx.Panel(parent = user_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (4,0),flag = wx.EXPAND)
        user_setup_layout.Add(window = action_holder,pos = (4,1),span = (1,2),flag = wx.ALIGN_RIGHT | wx.EXPAND)
        user_setup_layout.Add(window = wx.Panel(parent = user_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (4,3),flag = wx.EXPAND)
        user_setup_layout.Add(window = wx.Panel(parent = user_setup_holder,id = wx.ID_ANY,size = (20,15)),pos = (5,0),flag = wx.EXPAND)
        user_setup_layout.Add(window = wx.Panel(parent = user_setup_holder,id = wx.ID_ANY,size = (0,15)),pos = (5,1),span = (1,2),flag = wx.EXPAND)
        user_setup_layout.Add(window = wx.Panel(parent = user_setup_holder,id = wx.ID_ANY,size = (20,15)),pos = (5,3),flag = wx.EXPAND)
        user_setup_layout.AddGrowableCol(2)
        user_setup_holder.SetSizer(user_setup_layout)

        #事件绑定
        setup_button.Bind(wx.EVT_BUTTON,handler = self.setup_button_on_clicked)
        reset_button.Bind(wx.EVT_BUTTON,handler = self.reset_button_on_clicked)

    '''
    单击修改按钮事件
    param event 事件信息
    '''
    def setup_button_on_clicked(self,event):
        username = self.username_text.GetValue()
        fullname = self.fullname_text.GetValue()
        email = self.email_text.GetValue()

        if not username:
            wx.MessageBox(message = '用户名为空',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)
            self.username_text.SetFocus()

            return
        global current_user
        user = UserDao.obt_by_username(username)
        if user:
            if current_user.user_id != user['user_id']:
                wx.MessageBox(message = '用户名已经存在',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)
                self.username_text.SetFocus()

                return
        if not fullname:
            wx.MessageBox(message = '昵称为空',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)
            self.fullname_text.SetFocus()

            return
        
        global task_data
        try:
            task_data.execute([['UPDATE user SET username = ?,fullname = ?,email = ?,host_time = ? WHERE (user_id = ?)',\
                                (username,fullname,email,datetime.datetime.now(),current_user.user_id)]])
            task_data.commit()
            
            current_user.username = username
            current_user.fullname = fullname
            current_user.email = email
            
            self.Destroy()
        except Exception as e:
            task_data.rollback()

            wx.MessageBox(message = '用户信息保存错误',caption = '错误',style = wx.OK | wx.ICON_ERROR,parent = self)
            traceback.print_exc()

    '''
    重置按钮单击事件
    param event 事件信息
    '''
    def reset_button_on_clicked(self,event):
        global current_user
        user = UserDao.obt_by_primary_key(current_user.user_id)
        if not user:
            user = {'username':'','fullname':'','email':''}
        self.username_text.SetValue(user['username'])
        self.fullname_text.SetValue(user['fullname'])
        self.email_text.SetValue(user['email'])

        self.username_text.SetFocus()

'''
邮箱设置窗口
author 一心
'''
class EMailSetupWindow(wx.Frame):
    smtp_address_text = None
    smtp_port_text = None
    smtp_password_text = None
    pop3_address_text = None
    pop3_port_text = None
    pop3_password_text = None

    '''
    初始化
    param parent 父窗口
    '''
    def __init__(self,parent):
        super().__init__(id = wx.ID_ANY,parent = parent,title = '邮箱设置 - ' + Constants.APP_NAME,size = (350,325),\
                         style = wx.DEFAULT_FRAME_STYLE ^ wx.RESIZE_BORDER ^ wx.MAXIMIZE_BOX)
        self.SetIcon(Tools.image2icon(base64.b64decode(Constants.APP_ICON)))

        global current_user
        position = current_user.email.rfind('@')
        if -1 == position:
            domain = None
        else:
            domain = current_user.email[position + 1:]
        email_server = EMailServerDao.obt_by_primary_key(domain)
        if email_server:
            smtp_address = email_server['smtp_address']
            smtp_port = email_server['smtp_port']
            pop3_address = email_server['pop3_address']
            pop3_port = email_server['pop3_port']
        else:
            smtp_address = ''
            smtp_port = ''
            pop3_address = ''
            pop3_port = ''
        email_identification = EMailIdentificationDao.obt_by_primary_key(current_user.email)
        if email_identification:
            smtp_password = email_identification['smtp_password']
            pop3_password = email_identification['pop3_password']
        else:
            smtp_password = ''
            pop3_password = ''

        email_setup_holder = wx.Panel(parent = self,id = wx.ID_ANY)

        action_holder = wx.Panel(parent = email_setup_holder,id = wx.ID_ANY)
        setup_button = wx.Button(parent = action_holder,label = '修改')
        reset_button = wx.Button(parent = action_holder,label = '重置')
        action_layout = wx.GridBagSizer(vgap = 5,hgap = 10)
        action_layout.Add(window = setup_button,pos = (0,0),flag = wx.EXPAND)
        action_layout.Add(window = reset_button,pos = (0,1),flag = wx.EXPAND)
        action_holder.SetSizer(action_layout)

        email_label = wx.StaticText(parent = email_setup_holder,label = current_user.email)
        email_label.SetFont(wx.Font(14,wx.FONTFAMILY_TELETYPE,wx.FONTSTYLE_NORMAL,wx.FONTWEIGHT_BOLD))
        self.smtp_address_text = wx.TextCtrl(parent = email_setup_holder,value = smtp_address)
        self.smtp_port_text = wx.TextCtrl(parent = email_setup_holder,value = str(smtp_port))
        self.smtp_password_text = wx.TextCtrl(parent = email_setup_holder,value = smtp_password,style = wx.TE_PASSWORD)
        self.pop3_address_text = wx.TextCtrl(parent = email_setup_holder,value = pop3_address)
        self.pop3_port_text = wx.TextCtrl(parent = email_setup_holder,value = str(pop3_port))
        self.pop3_password_text = wx.TextCtrl(parent = email_setup_holder,value = pop3_password,style = wx.TE_PASSWORD)
        email_setup_layout = wx.GridBagSizer(vgap = 5,hgap = 10)
        email_setup_layout.Add(window = wx.Panel(parent = email_setup_holder,id = wx.ID_ANY,size = (20,15)),pos = (0,0),flag = wx.EXPAND)
        email_setup_layout.Add(window = wx.Panel(parent = email_setup_holder,id = wx.ID_ANY,size = (0,15)),\
                               pos = (0,1),span = (1,2),flag = wx.EXPAND)
        email_setup_layout.Add(window = wx.Panel(parent = email_setup_holder,id = wx.ID_ANY,size = (20,15)),pos = (0,3),flag = wx.EXPAND)
        email_setup_layout.Add(window = wx.Panel(parent = email_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (1,0),flag = wx.EXPAND)
        email_setup_layout.Add(window = email_label,pos = (1,1),span = (1,2),flag = wx.ALIGN_LEFT | wx.EXPAND)
        email_setup_layout.Add(window = wx.Panel(parent = email_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (1,3),flag = wx.EXPAND)
        email_setup_layout.Add(window = wx.Panel(parent = email_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (2,0),flag = wx.EXPAND)
        email_setup_layout.Add(window = wx.Panel(parent = email_setup_holder,id = wx.ID_ANY,size = (0,10)),\
                               pos = (2,1),span = (1,2),flag = wx.EXPAND)
        email_setup_layout.Add(window = wx.Panel(parent = email_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (2,3),flag = wx.EXPAND)
        email_setup_layout.Add(window = wx.Panel(parent = email_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (3,0),flag = wx.EXPAND)
        email_setup_layout.Add(window = wx.StaticText(parent = email_setup_holder,label = 'SMTP服务器'),\
                               pos = (3,1),flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        email_setup_layout.Add(window = self.smtp_address_text,pos = (3,2),flag = wx.EXPAND)
        email_setup_layout.Add(window = wx.Panel(parent = email_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (3,3),flag = wx.EXPAND)
        email_setup_layout.Add(window = wx.Panel(parent = email_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (4,0),flag = wx.EXPAND)
        email_setup_layout.Add(window = wx.StaticText(parent = email_setup_holder,label = 'SMTP端口号'),\
                               pos = (4,1),flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        email_setup_layout.Add(window = self.smtp_port_text,pos = (4,2),flag = wx.EXPAND)
        email_setup_layout.Add(window = wx.Panel(parent = email_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (4,3),flag = wx.EXPAND)
        email_setup_layout.Add(window = wx.Panel(parent = email_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (5,0),flag = wx.EXPAND)
        email_setup_layout.Add(window = wx.StaticText(parent = email_setup_holder,label = 'SMTP密码'),\
                               pos = (5,1),flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        email_setup_layout.Add(window = self.smtp_password_text,pos = (5,2),flag = wx.EXPAND)
        email_setup_layout.Add(window = wx.Panel(parent = email_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (6,0),flag = wx.EXPAND)
        email_setup_layout.Add(window = wx.StaticText(parent = email_setup_holder,label = 'POP3服务器'),\
                               pos = (6,1),flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        email_setup_layout.Add(window = self.pop3_address_text,pos = (6,2),flag = wx.EXPAND)
        email_setup_layout.Add(window = wx.Panel(parent = email_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (6,3),flag = wx.EXPAND)
        email_setup_layout.Add(window = wx.Panel(parent = email_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (7,0),flag = wx.EXPAND)
        email_setup_layout.Add(window = wx.StaticText(parent = email_setup_holder,label = 'POP3端口号'),\
                               pos = (7,1),flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        email_setup_layout.Add(window = self.pop3_port_text,pos = (7,2),flag = wx.EXPAND)
        email_setup_layout.Add(window = wx.Panel(parent = email_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (7,3),flag = wx.EXPAND)
        email_setup_layout.Add(window = wx.Panel(parent = email_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (8,0),flag = wx.EXPAND)
        email_setup_layout.Add(window = wx.StaticText(parent = email_setup_holder,label = 'POP3密码'),\
                               pos = (8,1),flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        email_setup_layout.Add(window = self.pop3_password_text,pos = (8,2),flag = wx.EXPAND)
        email_setup_layout.Add(window = wx.Panel(parent = email_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (8,3),flag = wx.EXPAND)
        email_setup_layout.Add(window = wx.Panel(parent = email_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (9,0),flag = wx.EXPAND)
        email_setup_layout.Add(window = action_holder,pos = (9,1),span = (1,2),flag = wx.ALIGN_RIGHT | wx.EXPAND)
        email_setup_layout.Add(window = wx.Panel(parent = email_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (9,3),flag = wx.EXPAND)
        email_setup_layout.Add(window = wx.Panel(parent = email_setup_holder,id = wx.ID_ANY,size = (20,15)),pos = (10,0),flag = wx.EXPAND)
        email_setup_layout.Add(window = wx.Panel(parent = email_setup_holder,id = wx.ID_ANY,size = (0,15)),\
                               pos = (10,1),span = (1,2),flag = wx.EXPAND)
        email_setup_layout.Add(window = wx.Panel(parent = email_setup_holder,id = wx.ID_ANY,size = (20,15)),pos = (10,3),flag = wx.EXPAND)
        email_setup_layout.AddGrowableCol(2)
        email_setup_holder.SetSizer(email_setup_layout)

        #事件绑定
        setup_button.Bind(event = wx.EVT_BUTTON,handler = self.setup_button_on_clicked)
        reset_button.Bind(event = wx.EVT_BUTTON,handler = self.reset_button_on_clicked)

    '''
    点击修改按钮事件
    param event 事件信息
    '''
    def setup_button_on_clicked(self,event):
        smtp_address = self.smtp_address_text.GetValue()
        smtp_port = self.smtp_port_text.GetValue()
        smtp_password = self.smtp_password_text.GetValue()
        pop3_address = self.pop3_address_text.GetValue()
        pop3_port = self.pop3_port_text.GetValue()
        pop3_password = self.pop3_password_text.GetValue()

        global current_user
        if not current_user.email:
            wx.MessageBox(message = '邮箱地址为空，请先在用户设置里设置邮箱地址',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)

            return
        position = current_user.email.rfind('@')
        if -1 == position:
            wx.MessageBox(message = '邮箱地址不合法，请在用户设置里重新设置邮箱地址',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)

            return
        if not smtp_address:
            wx.MessageBox(message = 'SMTP服务器地址为空',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)
            self.smtp_address_text.SetFocus()

            return
        if not smtp_port:
            wx.MessageBox(message = 'SMTP端口号为空',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)
            self.smtp_port_text.SetFocus()

            return
        if not smtp_port.isdigit():
            wx.MessageBox(message = 'SMTP端口号不是数字',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)
            self.smtp_port_text.SetFocus()

            return
        if not pop3_address:
            wx.MessageBox(message = 'POP3服务器地址为空',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)
            self.pop3_address_text.SetFocus()

            return
        if not pop3_port:
            wx.MessageBox(message = 'POP3端口号为空',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)
            self.pop3_port_text.SetFocus()

            return
        if not pop3_port.isdigit():
            wx.MessageBox(message = 'POP3端口号不是数字',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)
            self.pop3_port_text.SetFocus()

            return

        global task_data
        try:
            domain = current_user.email[position + 1:]
            affect = task_data.execute([['UPDATE email_server SET smtp_address = ?,smtp_port = ?,pop3_address = ?,pop3_port = ?,host_time = ? WHERE (provider_address = ?)',\
                                         (smtp_address,smtp_port,pop3_address,pop3_port,datetime.datetime.now(),domain)]])
            if 0 == affect:
                task_data.execute([['INSERT INTO email_server VALUES (?,?,?,?,?,?,?)',\
                                    (domain,None,smtp_address,smtp_port,pop3_address,pop3_port,datetime.datetime.now())]])
            affect = task_data.execute([['UPDATE email_identification SET smtp_password = ?,pop3_password = ?,host_time = ? WHERE (email = ?)',\
                                         (smtp_password,pop3_password,datetime.datetime.now(),current_user.email)]])
            if 0 == affect:
                task_data.execute([['INSERT INTO email_identification VALUES (?,?,?,?)',\
                                    (current_user.email,smtp_password,pop3_password,datetime.datetime.now())]])
            task_data.commit()
            self.Destroy()
        except Exception as e:
            task_data.rollback()

            wx.MessageBox(message = '邮箱信息保存错误',caption = '错误',style = wx.OK | wx.ICON_ERROR,parent = self)
            traceback.print_exc()

    '''
    重置按钮单击事件
    param event 事件信息
    '''
    def reset_button_on_clicked(self,event):
        global current_user
        position = current_user.email.rfind('@')
        if -1 == position:
            domain = None
        else:
            domain = current_user.email[position + 1:]
        email_server = EMailServerDao.obt_by_primary_key(domain)
        if email_server:
            smtp_address = email_server['smtp_address']
            smtp_port = email_server['smtp_port']
            pop3_address = email_server['pop3_address']
            pop3_port = email_server['pop3_port']
        else:
            smtp_address = None
            smtp_port = None
            pop3_address = None
            pop3_port = None
        email_identification = EMailIdentificationDao.obt_by_primary_key(current_user.email)
        if email_identification:
            smtp_password = email_identification['smtp_password']
            pop3_password = email_identification['pop3_password']
        else:
            smtp_password = None
            pop3_password = None

        self.smtp_address_text.SetValue(smtp_address)
        self.smtp_port_text.SetValue(str(smtp_port))
        self.smtp_password_text.SetValue(smtp_password)
        self.pop3_address_text.SetValue(pop3_address)
        self.pop3_port_text.SetValue(str(pop3_port))
        self.pop3_password_text.SetValue(pop3_password)
        self.smtp_address_text.SetFocus()
'''
密码修改窗口
author 一心
'''
class PasswordSetupWindow(wx.Frame):
    old_password_text = None
    new_password_text = None
    confirm_password_text = None

    '''
    初始化
    param parent 父窗口
    '''
    def __init__(self,parent):
        super().__init__(id = wx.ID_ANY,parent = parent,title = '密码修改 - ' + Constants.APP_NAME,size = (300,180),\
                         style = wx.DEFAULT_FRAME_STYLE ^ wx.RESIZE_BORDER ^ wx.MAXIMIZE_BOX)
        self.SetIcon(Tools.image2icon(base64.b64decode(Constants.APP_ICON)))

        password_setup_holder = wx.Panel(parent = self,id = wx.ID_ANY)

        #操作
        self.old_password_text = wx.TextCtrl(parent = password_setup_holder,style = wx.TE_PASSWORD)
        self.new_password_text = wx.TextCtrl(parent = password_setup_holder,style = wx.TE_PASSWORD)
        self.confirm_password_text = wx.TextCtrl(parent = password_setup_holder,style = wx.TE_PASSWORD)
        setup_button = wx.Button(parent = password_setup_holder, label='修改')
        password_setup_layout = wx.GridBagSizer(vgap = 5,hgap = 10)
        password_setup_layout.Add(window = wx.Panel(parent = password_setup_holder,id = wx.ID_ANY,size = (20,15)),pos = (0,0),flag = wx.EXPAND)
        password_setup_layout.Add(window = wx.Panel(parent = password_setup_holder,id = wx.ID_ANY,size = (0,15)),pos = (0,1),span = (1,2),flag = wx.EXPAND)
        password_setup_layout.Add(window = wx.Panel(parent = password_setup_holder,id = wx.ID_ANY,size = (20,15)),pos = (0,3),flag = wx.EXPAND)
        password_setup_layout.Add(window = wx.Panel(parent = password_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (1,0),flag = wx.EXPAND)
        password_setup_layout.Add(window = wx.StaticText(parent = password_setup_holder,label = '原密码'),pos = (1,1),\
                              flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        password_setup_layout.Add(window = self.old_password_text,pos = (1,2),flag = wx.EXPAND)
        password_setup_layout.Add(window = wx.Panel(parent = password_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (1,3),flag = wx.EXPAND)
        password_setup_layout.Add(window = wx.Panel(parent = password_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (2,0),flag = wx.EXPAND)
        password_setup_layout.Add(window = wx.StaticText(parent = password_setup_holder,label = '新密码'),pos = (2,1),\
                              flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        password_setup_layout.Add(window = self.new_password_text,pos = (2,2),flag = wx.EXPAND)
        password_setup_layout.Add(window = wx.Panel(parent = password_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (2,3),flag = wx.EXPAND)
        password_setup_layout.Add(window = wx.Panel(parent = password_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (3,0),flag = wx.EXPAND)
        password_setup_layout.Add(window = wx.StaticText(parent = password_setup_holder,label = '确认密码'),pos = (3,1),\
                              flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        password_setup_layout.Add(window = self.confirm_password_text,pos = (3,2),flag = wx.EXPAND)
        password_setup_layout.Add(window = wx.Panel(parent = password_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (3,3),flag = wx.EXPAND)
        password_setup_layout.Add(window = wx.Panel(parent = password_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (4,0),flag = wx.EXPAND)
        password_setup_layout.Add(window = setup_button,pos = (4,1),span = (1,2),flag = wx.ALIGN_RIGHT | wx.EXPAND)
        password_setup_layout.Add(window = wx.Panel(parent = password_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (4,3),flag = wx.EXPAND)
        password_setup_layout.Add(window = wx.Panel(parent = password_setup_holder,id = wx.ID_ANY,size = (20,15)),pos = (5,0),flag = wx.EXPAND)
        password_setup_layout.Add(window = wx.Panel(parent = password_setup_holder,id = wx.ID_ANY,size = (0,15)),pos = (5,1),span = (1,2),flag = wx.EXPAND)
        password_setup_layout.Add(window = wx.Panel(parent = password_setup_holder,id = wx.ID_ANY,size = (20,15)),pos = (5,3),flag = wx.EXPAND)
        password_setup_layout.AddGrowableCol(2)
        password_setup_holder.SetSizer(password_setup_layout)

        #事件绑定
        setup_button.Bind(event = wx.EVT_BUTTON,handler = self.setup_button_on_clicked)

    '''
    单击修改按钮事件
    param event 事件信息
    '''
    def setup_button_on_clicked(self,event):
        old_password = self.old_password_text.GetValue()
        new_password = self.new_password_text.GetValue()
        confirm_password = self.confirm_password_text.GetValue()

        if not old_password:
            wx.MessageBox(message = '原密码为空',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)
            self.old_password_text.SetFocus()

            return
        global current_user
        if LoginStatus.USERNAME_PASSWORD_SUCCESS != CurrentUser.checkPassword(current_user.username,old_password):
            wx.MessageBox(message = '原密码校验错误',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)
            self.old_password_text.SetFocus()

            return
        if not new_password:
            wx.MessageBox(message = '新密码为空',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)
            self.new_password_text.SetFocus()

            return
        if new_password != confirm_password:
            wx.MessageBox(message = '新密码与确认密码不一致',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)
            self.new_password_text.SetFocus()

            return

        global task_data
        try:
            task_data.execute([['UPDATE user_identification SET password = ?,host_time = ? WHERE (user_id = ?)',\
                                (new_password,datetime.datetime.now(),current_user.user_id)]])
            task_data.commit()
            self.Destroy()
        except Exception as e:
            task_data.rollback()

            wx.MessageBox(message = '用户密码更新错误',caption = '错误',style = wx.OK | wx.ICON_ERROR,parent = self)
            traceback.print_exc()

'''
工具管理窗口类
author 一心
'''
class ToolManagerWindow(wx.Frame):
    tool_type = None

    key_text = None
    tool_list = None

    item_indexes = set()
    tool_ids = set()

    '''
    初始化
    param parent 父窗口
    param tool_type 工具类型
    param operate 操作
    '''
    def __init__(self,parent,tool_type):
        super().__init__(id = wx.ID_ANY,parent = parent,title = '工具管理 - ' + Constants.APP_NAME,size = (550,450))
        self.SetIcon(Tools.image2icon(base64.b64decode(Constants.APP_ICON)))

        self.tool_type = tool_type

        tool_manager_holder = wx.Panel(parent = self,id = wx.ID_ANY)

        #操作
        action_holder = wx.Panel(parent = tool_manager_holder,id = wx.ID_ANY)
        delete_button = wx.Button(parent = action_holder,label = '删除')
        add_button = wx.Button(parent = action_holder,label = '添加')
        action_layout = wx.BoxSizer(wx.HORIZONTAL)
        action_layout.Add(window = delete_button)
        action_layout.Add(window = add_button)
        action_holder.SetSizer(action_layout)

        self.key_text = wx.TextCtrl(parent = tool_manager_holder)
        self.tool_list = wx.ListCtrl(parent = tool_manager_holder,id = wx.ID_ANY,style = wx.LC_REPORT)
        self.tool_list.EnableCheckBoxes()
        self.tool_list.InsertColumn(0,'选择')
        self.tool_list.InsertColumn(1,'工具名称')
        self.tool_list.InsertColumn(2,'工具描述')
        self.tool_list.InsertColumn(3,'支持系统')
        self.tool_list.InsertColumn(4,'执行命令')
        self.tool_list.InsertColumn(5,'顺序号')
        self.show_tool_item()

        tool_manager_layout = wx.GridBagSizer(vgap = 5,hgap = 10)
        tool_manager_layout.Add(window = wx.Panel(parent = tool_manager_holder,id = wx.ID_ANY,size = (20,15)),pos = (0,0),flag = wx.EXPAND)
        tool_manager_layout.Add(window = wx.Panel(parent = tool_manager_holder,id = wx.ID_ANY,size = (0,15)),pos = (0,1),flag = wx.EXPAND)
        tool_manager_layout.Add(window = wx.Panel(parent = tool_manager_holder,id = wx.ID_ANY,size = (20,15)),pos = (0,2),flag = wx.EXPAND)
        tool_manager_layout.Add(window = wx.Panel(parent = tool_manager_holder,id = wx.ID_ANY,size = (20,0)),pos = (1,0),flag = wx.EXPAND)
        tool_manager_layout.Add(window = self.key_text,pos = (1,1),flag = wx.EXPAND)
        tool_manager_layout.Add(window = wx.Panel(parent = tool_manager_holder,id = wx.ID_ANY,size = (20,0)),pos = (1,2),flag = wx.EXPAND)
        tool_manager_layout.Add(window = wx.Panel(parent = tool_manager_holder,id = wx.ID_ANY,size = (20,0)),pos = (2,0),flag = wx.EXPAND)
        tool_manager_layout.Add(window = self.tool_list,pos = (2,1),flag = wx.EXPAND)
        tool_manager_layout.Add(window = wx.Panel(parent = tool_manager_holder,id = wx.ID_ANY,size = (20,0)),pos = (2,2),flag = wx.EXPAND)
        tool_manager_layout.Add(window = wx.Panel(parent = tool_manager_holder,id = wx.ID_ANY,size = (20,0)),pos = (3,0),flag = wx.EXPAND)
        tool_manager_layout.Add(window = action_holder,pos = (3,1),flag = wx.ALIGN_RIGHT | wx.EXPAND)
        tool_manager_layout.Add(window = wx.Panel(parent = tool_manager_holder,id = wx.ID_ANY,size = (20,0)),pos = (3,2),flag = wx.EXPAND)
        tool_manager_layout.Add(window = wx.Panel(parent = tool_manager_holder,id = wx.ID_ANY,size = (20,15)),pos = (4,0),flag = wx.EXPAND)
        tool_manager_layout.Add(window = wx.Panel(parent = tool_manager_holder,id = wx.ID_ANY,size = (0,15)),pos = (4,1),flag = wx.EXPAND)
        tool_manager_layout.Add(window = wx.Panel(parent = tool_manager_holder,id = wx.ID_ANY,size = (20,15)),pos = (4,2),flag = wx.EXPAND)
        tool_manager_layout.AddGrowableRow(2)
        tool_manager_layout.AddGrowableCol(1)
        tool_manager_holder.SetSizer(tool_manager_layout)

        #事件绑定
        self.Bind(event = wx.EVT_CLOSE,handler = self.window_on_closed)

        self.tool_list.Bind(event = wx.EVT_LIST_ITEM_CHECKED,handler = self.tool_list_ckbox_on_checked)
        self.tool_list.Bind(event = wx.EVT_LIST_ITEM_UNCHECKED,handler = self.tool_list_ckbox_on_unchecked)
        delete_button.Bind(event = wx.EVT_BUTTON,handler = self.delete_button_on_clicked)
        add_button.Bind(event = wx.EVT_BUTTON,handler = self.add_button_on_clicked)

    '''
    列出工具清单
    param condition 查询条件
    param page_size 分页大小
    param page_no 页码
    '''
    def show_tool_item(self,condition = {},page_size = -1,page_no = 0):
        toolboxes = ToolboxDao.or_list_by_tool_type(self.tool_type,condition,page_size,page_no)
        index = 0
        i = 0
        for tool in toolboxes[1]:
            index = self.tool_list.InsertItem(i,'')
            if -1 == index:
                continue
            tool_env = ''
            if ToolEnv.WINDOWS.value == tool['tool_env']:
                tool_env = 'Windows'
            elif ToolEnv.MAC.value == tool['tool_env']:
                tool_env = 'Mac'
            elif ToolEnv.LINUX.value == tool['tool_env']:
                tool_env = 'Linux'
            else:
                tool_env = ''
            self.tool_list.CheckItem(index,True) if tool['tool_id'] in self.tool_ids else self.tool_list.CheckItem(index,False)
            self.tool_list.SetItemData(index,tool['tool_id'])
            self.tool_list.SetItem(index,1,tool['tool_name'])
            self.tool_list.SetItem(index,2,tool['tool_desc'])
            self.tool_list.SetItem(index,3,tool_env)
            self.tool_list.SetItem(index,4,tool['tool_cmd'])
            self.tool_list.SetItem(index,5,str(tool['sort_num']))
            i = i + 1

    '''
    窗口关闭事件
    param event 事件信息
    '''
    def window_on_closed(self,event):
        self.item_indexes.clear()
        self.tool_ids.clear()
        self.Destroy()
        
    '''
    工具选中事件
    param event 事件信息
    '''
    def tool_list_ckbox_on_checked(self,event):
        index = event.GetIndex()
        self.item_indexes.add(index)
        self.tool_ids.add(self.tool_list.GetItemData(index))

    '''
    工具取消选中事件
    param event 事件信息
    '''
    def tool_list_ckbox_on_unchecked(self,event):
        index = event.GetIndex()
        self.item_indexes.discard(index)
        self.tool_ids.discard(self.tool_list.GetItemData(index))

    '''
    单击删除按钮事件
    param event 事件信息
    '''
    def delete_button_on_clicked(self,event):
        if not any(self.tool_ids):
            wx.MessageBox(message = '未选择工具',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)

            return
        m = ''
        for tool_id in self.tool_ids:
            m = m + ',?'
        global task_data
        task_data.execute([['DELETE FROM toolbox WHERE (tool_id IN (' + m[1:] + '))',tuple(self.tool_ids)]])
        task_data.commit()
        self.tool_ids.clear()

        for index in sorted(self.item_indexes,reverse = True):
            self.tool_list.DeleteItem(index)
        self.item_indexes.clear()

    '''
    单击添加按钮事件
    param event 事件信息
    '''
    def add_button_on_clicked(self,event):
        tool_setup_window = ToolSetupWindow(self,self.tool_type,Operate.ADD.value)
        tool_setup_window.Centre()
        tool_setup_window.Show()

'''
添加工具窗口类
author 一心
'''
class ToolSetupWindow(wx.Frame):
    tool_type = None
    operate = None

    tool_name_text = None
    tool_description_text = None
    tool_icon_text = None
    tool_env_cmbox = None
    tool_cmd_text = None
    sort_num_text = None

    '''
    初始化
    param parent 父窗口
    param tool_type 工具类型
    param operate 操作
    '''
    def __init__(self,parent,tool_type,operate):
        super().__init__(id = wx.ID_ANY,parent = parent,title = '添加工具 - ' + Constants.APP_NAME,size = (500,280),\
                         style = wx.DEFAULT_FRAME_STYLE ^ wx.RESIZE_BORDER ^ wx.MAXIMIZE_BOX)
        self.SetIcon(Tools.image2icon(base64.b64decode(Constants.APP_ICON)))

        self.tool_type = tool_type
        self.operate = operate

        tool_setup_holder = wx.Panel(self,id = wx.ID_ANY)

        tool_icon_holder = wx.Panel(parent = tool_setup_holder,id = wx.ID_ANY)
        self.tool_icon_text = wx.TextCtrl(parent = tool_icon_holder)
        browse_button = wx.Button(parent = tool_icon_holder,label = '浏览...')
        tool_icon_layout = wx.GridBagSizer(vgap = 5,hgap = 10)
        tool_icon_layout.Add(window = self.tool_icon_text,pos = (0,0),flag = wx.EXPAND)
        tool_icon_layout.Add(window = browse_button,pos = (0,1),flag = wx.EXPAND)
        tool_icon_layout.AddGrowableCol(0)
        tool_icon_holder.SetSizer(tool_icon_layout)

        action_holder = wx.Panel(parent = tool_setup_holder,id = wx.ID_ANY)
        setup_button = wx.Button(parent = action_holder,label = '添加')
        reset_button = wx.Button(parent = action_holder,label = '重置')
        action_layout = wx.GridBagSizer(vgap = 5,hgap = 10)
        action_layout.Add(window=wx.Panel(parent=action_holder, id=wx.ID_ANY), pos=(0, 0), flag=wx.EXPAND)
        action_layout.Add(window = setup_button,pos = (0,1),flag = wx.EXPAND)
        action_layout.Add(window = wx.Panel(parent = action_holder,id = wx.ID_ANY),pos = (0,2),flag = wx.EXPAND)
        action_layout.Add(window = reset_button,pos = (0,3),flag = wx.EXPAND)
        action_layout.Add(window=wx.Panel(parent=action_holder, id=wx.ID_ANY), pos=(0, 4), flag=wx.EXPAND)
        action_layout.AddGrowableCol(0)
        action_layout.AddGrowableCol(2)
        action_layout.AddGrowableCol(4)
        action_holder.SetSizer(action_layout)

        self.tool_name_text = wx.TextCtrl(parent = tool_setup_holder)
        self.tool_description_text = wx.TextCtrl(parent = tool_setup_holder)
        self.tool_env_cmbox = wx.ComboBox(parent = tool_setup_holder,id = wx.ID_ANY,choices = ['Windows','Mac','Linux'],style = wx.CB_READONLY | wx.CB_DROPDOWN)
        self.tool_cmd_text = wx.TextCtrl(parent = tool_setup_holder)
        self.sort_num_text = wx.TextCtrl(parent = tool_setup_holder)
        tool_setup_layout = wx.GridBagSizer(vgap = 5,hgap = 10)
        tool_setup_layout.Add(window = wx.Panel(parent = tool_setup_holder,id = wx.ID_ANY,size = (20,15)),pos = (0,0),flag = wx.EXPAND)
        tool_setup_layout.Add(window = wx.Panel(parent = tool_setup_holder,id = wx.ID_ANY,size = (0,15)),pos = (0,1),span = (1,2),flag = wx.EXPAND)
        tool_setup_layout.Add(window = wx.Panel(parent = tool_setup_holder,id = wx.ID_ANY,size = (20,15)),pos = (0,3),flag = wx.EXPAND)
        tool_setup_layout.Add(window = wx.Panel(parent = tool_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (1,0),flag = wx.EXPAND)
        tool_setup_layout.Add(window = wx.StaticText(parent = tool_setup_holder,label = '工具名称'),pos = (1,1),\
                              flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        tool_setup_layout.Add(window = self.tool_name_text,pos = (1,2),flag = wx.EXPAND)
        tool_setup_layout.Add(window = wx.Panel(parent = tool_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (1,3),flag = wx.EXPAND)
        tool_setup_layout.Add(window = wx.Panel(parent = tool_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (2,0),flag = wx.EXPAND)
        tool_setup_layout.Add(window = wx.StaticText(parent = tool_setup_holder,label = '工具描述'),pos = (2,1),\
                              flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        tool_setup_layout.Add(window = self.tool_description_text,pos = (2,2),flag = wx.EXPAND)
        tool_setup_layout.Add(window = wx.Panel(parent = tool_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (2,3),flag = wx.EXPAND)
        tool_setup_layout.Add(window = wx.Panel(parent = tool_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (3,0),flag = wx.EXPAND)
        tool_setup_layout.Add(window = wx.StaticText(parent = tool_setup_holder,label = '工具图标'),pos = (3,1),\
                              flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        tool_setup_layout.Add(window = tool_icon_holder,pos = (3,2),flag = wx.EXPAND)
        tool_setup_layout.Add(window = wx.Panel(parent = tool_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (3,3),flag = wx.EXPAND)
        tool_setup_layout.Add(window = wx.Panel(parent = tool_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (4,0),flag = wx.EXPAND)
        tool_setup_layout.Add(window = wx.StaticText(parent = tool_setup_holder,label = '支持系统'),pos = (4,1),\
                              flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        tool_setup_layout.Add(window = self.tool_env_cmbox,pos = (4,2),flag = wx.EXPAND)
        tool_setup_layout.Add(window = wx.Panel(parent = tool_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (4,3),flag = wx.EXPAND)
        tool_setup_layout.Add(window = wx.Panel(parent = tool_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (5,0),flag = wx.EXPAND)
        tool_setup_layout.Add(window = wx.StaticText(parent = tool_setup_holder,label = '执行命令'),pos = (5,1),\
                              flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        tool_setup_layout.Add(window = self.tool_cmd_text,pos = (5,2),flag = wx.EXPAND)
        tool_setup_layout.Add(window = wx.Panel(parent = tool_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (5,3),flag = wx.EXPAND)
        tool_setup_layout.Add(window = wx.Panel(parent = tool_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (6,0),flag = wx.EXPAND)
        tool_setup_layout.Add(window = wx.StaticText(parent = tool_setup_holder,label = '顺序号'),pos = (6,1),\
                              flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        tool_setup_layout.Add(window = self.sort_num_text,pos = (6,2),flag = wx.EXPAND)
        tool_setup_layout.Add(window = wx.Panel(parent = tool_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (6,3),flag = wx.EXPAND)
        tool_setup_layout.Add(window = wx.Panel(parent = tool_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (7,0),flag = wx.EXPAND)
        tool_setup_layout.Add(window = action_holder,pos = (7,1),span = (1,2),flag = wx.EXPAND)
        tool_setup_layout.Add(window = wx.Panel(parent = tool_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (7,3),flag = wx.EXPAND)
        tool_setup_layout.Add(window = wx.Panel(parent = tool_setup_holder,id = wx.ID_ANY,size = (20,15)),pos = (8,0),flag = wx.EXPAND)
        tool_setup_layout.Add(window = wx.Panel(parent = tool_setup_holder,id = wx.ID_ANY,size = (0,15)),pos = (8,1),span = (1,2),flag = wx.EXPAND)
        tool_setup_layout.Add(window = wx.Panel(parent = tool_setup_holder,id = wx.ID_ANY,size = (20,15)),pos = (8,3),flag = wx.EXPAND)
        tool_setup_layout.AddGrowableCol(2)
        tool_setup_holder.SetSizer(tool_setup_layout)

        #绑定事件
        browse_button.Bind(wx.EVT_BUTTON,self.browse_button_on_clicked)
        setup_button.Bind(wx.EVT_BUTTON,self.setup_button_on_clicked)

    '''
    单击浏览按钮事件
    param event 事件信息
    '''
    def browse_button_on_clicked(self,event):
        file_dialog = wx.FileDialog(parent = self,message = '选择图标',wildcard = 'PNG图像（*.png）|*.png|JPG图像（*.jpg）|*.jpg|ICON图像（*.ico）|*.ico',\
                                    style = wx.FD_OPEN | wx.FD_FILE_MUST_EXIST)
        if wx.ID_OK == file_dialog.ShowModal():
            self.tool_icon_text.SetValue(file_dialog.GetPath())

    '''
    单击设置按钮事件
    param event 事件信息
    '''
    def setup_button_on_clicked(self,event):
        tool_name = self.tool_name_text.GetValue()
        tool_description = self.tool_description_text.GetValue()
        tool_icon = self.tool_icon_text.GetValue()
        tool_env = self.tool_env_cmbox.GetSelection()
        tool_cmd = self.tool_cmd_text.GetValue()
        sort_num = self.sort_num_text.GetValue()

        if not tool_name:
            wx.MessageBox(message = '工具名称为空',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)
            self.tool_name_text.SetFocus()

            return
        if tool_icon:
            if not os.path.isfile(tool_icon):
                wx.MessageBox(message = '工具图标不存在',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)
                self.tool_icon_text.SetFocus()

                return
        if tool_env < 0:
            wx.MessageBox(message = '支持系统为空',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)
            self.tool_env_cmbox.SetFocus()

            return
        if not tool_cmd:
            wx.MessageBox(message = '执行命令为空',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)
            self.tool_cmd_text.SetFocus()

            return
        if sort_num:
            if not sort_num.isdigit():
                wx.MessageBox(message = '顺序号不为整数',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)
                self.sort_num_text.SetFocus()

                return

        tool_icon_data = None
        if tool_icon:
            with open(tool_icon,'rb') as file:
                tool_icon_data = file.read()
        tool_env_value = None
        tool_env_name = ''
        if 0 == tool_env:
            tool_env_value = ToolEnv.WINDOWS.value
            tool_env_name = 'Windows'
        elif 1 == tool_env:
            tool_env_value = ToolEnv.MAC.value
            tool_env_name = 'Mac'
        elif 2 == tool_env:
            tool_env_value = ToolEnv.LINUX.value
            tool_env_name = 'Linux'
        else:
            tool_env_value = None
            tool_env_name = ''

        global task_data
        global current_user
        try:
            tool_id = ParameterDao.auto_increment(ParameterName.TOOL_ID.value)
            task_data.execute([['INSERT INTO toolbox VALUES (?,?,?,?,?,?,?,?,?,?,?,?)',\
                                (tool_id,tool_name,tool_description,tool_icon_data,self.tool_type,tool_env_value,\
                                 tool_cmd,None,current_user.user_id,ToolStatus.NORMAL.value,sort_num,datetime.datetime.now())]])
            task_data.commit()

            index = self.Parent.tool_list.InsertItem(self.Parent.tool_list.GetItemCount(),'')
            if -1 != index:
                self.Parent.tool_list.SetItemData(index,tool_id)
                self.Parent.tool_list.SetItem(index,1,tool_name)
                self.Parent.tool_list.SetItem(index,2,tool_description)
                self.Parent.tool_list.SetItem(index,3,tool_env_name)
                self.Parent.tool_list.SetItem(index,4,tool_cmd)
                
            self.Close()
        except Exception as e:
            task_data.rollback()

            wx.MessageBox(message = '工具设置错误',caption = '错误',style = wx.OK | wx.ICON_ERROR,parent = self)
            traceback.print_exc()

#---------------自定义工具---------------
'''
自定义工具周用命令类
author 一心
'''
class SelfDefined:
    '''
    电子邮件
    '''
    @staticmethod
    def email():
        email_window = EMailWindow(None)
        email_window.Centre()
        email_window.Show()
        
    '''
    通讯录
    '''
    @staticmethod
    def contact():
        contact_window = ContactWindow(None)
        contact_window.Centre()
        contact_window.Show()

    '''
    密码
    '''
    @staticmethod
    def passkey():
        application_window = ApplicationWindow(None)
        application_window.Centre()
        application_window.Show()

'''
电子邮件窗口类
author 一心
'''
class EMailWindow(wx.Frame):
    email_holder = None
    email_server = None
    email_identification = None

    email_list = None

    '''
    初始化
    param parent 父窗口
    '''
    def __init__(self,parent):
        super().__init__(id = wx.ID_ANY,parent = parent,title = '电子邮件 - ' + Constants.APP_NAME,size = (620,500))
        self.SetIcon(Tools.image2icon(base64.b64decode(Constants.APP_ICON)))

        global current_user
        position = current_user.email.rfind('@')
        if -1 == position:
            domain = None
        else:
            domain = current_user.email[position + 1:]
        self.email_server = EMailServerDao.obt_by_primary_key(domain)
        self.email_identification = EMailIdentificationDao.obt_by_primary_key(current_user.email)

        self.email_holder = wx.Panel(parent = self,id = wx.ID_ANY)
        box_holder = wx.Panel(parent = self.email_holder,id = wx.ID_ANY)

        action_holder = wx.Panel(parent = box_holder,id = wx.ID_ANY)
        action_holder.SetBackgroundColour(wx.WHITE)
        write_label = wx.StaticText(parent = action_holder, label='  写信')
        pick_label = wx.StaticText(parent = action_holder,label = '  收信')
        action_layout = wx.BoxSizer(wx.HORIZONTAL)
        action_layout.Add(window = write_label)
        action_layout.Add(window = pick_label)
        action_holder.SetSizer(action_layout)

        self.email_list = wx.ListCtrl(parent = box_holder,id = wx.ID_ANY,style = wx.LC_REPORT)
        self.email_list.EnableCheckBoxes()
        self.email_list.InsertColumn(0,'')
        self.email_list.InsertColumn(1,'')
        self.email_list.InsertColumn(2,'')
        self.email_list.InsertColumn(3,'')
        self.show_email_item(condition = {'emailbox':EMailBox.IN_BOX.value})

        box_layout = wx.GridBagSizer(vgap = 5,hgap = 10)
        box_layout.Add(window = wx.StaticLine(parent = box_holder,style = wx.LI_HORIZONTAL),pos = (0,0),flag = wx.EXPAND)
        box_layout.Add(window = action_holder,pos = (1,0),flag = wx.EXPAND)
        box_layout.Add(window = wx.StaticLine(parent = box_holder,style = wx.LI_HORIZONTAL),pos = (2,0),flag = wx.EXPAND)
        box_layout.Add(window = self.email_list,pos = (3,0),flag = wx.EXPAND)
        box_layout.AddGrowableRow(3)
        box_layout.AddGrowableCol(0)
        box_holder.SetSizer(box_layout)

        box_list = wx.ListCtrl(parent = self.email_holder,id = wx.ID_ANY,size = (80,0),style = wx.LC_LIST)
        box_list.InsertItem(0,'收件箱')
        box_list.InsertItem(1,'发件箱')
        box_list.Select(idx = 0,on = 1)
        email_layout = wx.GridBagSizer(vgap = 5,hgap = 10)
        email_layout.Add(window = wx.Panel(parent = self.email_holder,id = wx.ID_ANY,size = (20,15)),pos = (0,0),flag = wx.EXPAND)
        email_layout.Add(window = wx.Panel(parent = self.email_holder,id = wx.ID_ANY,size = (0,15)),pos = (0,1),span = (1,2),flag = wx.EXPAND)
        email_layout.Add(window = wx.Panel(parent = self.email_holder,id = wx.ID_ANY,size = (20,15)),pos = (0,3),flag = wx.EXPAND)
        email_layout.Add(window = wx.Panel(parent = self.email_holder,id = wx.ID_ANY,size = (20,0)),pos = (1,0),flag = wx.EXPAND)
        email_layout.Add(window = box_list,pos = (1,1),flag = wx.EXPAND)
        email_layout.Add(window = box_holder,pos = (1,2),flag = wx.EXPAND)
        email_layout.Add(window = wx.Panel(parent = self.email_holder,id = wx.ID_ANY,size = (20,0)),pos = (1,3),flag = wx.EXPAND)
        email_layout.Add(window = wx.Panel(parent = self.email_holder,id = wx.ID_ANY,size = (20,15)),pos = (2,0),flag = wx.EXPAND)
        email_layout.Add(window = wx.Panel(parent = self.email_holder,id = wx.ID_ANY,size = (0,15)),pos = (2,1),span = (1,2),flag = wx.EXPAND)
        email_layout.Add(window = wx.Panel(parent = self.email_holder,id = wx.ID_ANY,size = (20,15)),pos = (2,3),flag = wx.EXPAND)
        email_layout.AddGrowableCol(2)
        email_layout.AddGrowableRow(1)
        self.email_holder.SetSizer(email_layout)

        #事件绑定
        self.Bind(wx.EVT_SIZE,self.window_on_resized)

        write_label.Bind(event = wx.EVT_LEFT_UP,handler = self.write_label_on_left_up)
        pick_label.Bind(event = wx.EVT_LEFT_UP,handler = self.pick_label_on_left_up)
        box_list.Bind(event = wx.EVT_LIST_ITEM_SELECTED,handler = self.box_list_on_item_selected)
        self.email_list.Bind(event = wx.EVT_LIST_ITEM_ACTIVATED,handler = self.email_list_on_item_activated)

    '''
    显示电子邮件列表
    param condition 查询条件
    param page_size 页面大小
    param page_no 页码
    '''
    def show_email_item(self,condition = {},page_size = -1,page_no = 0):
        emails = EMailDao.and_list(condition,page_size,page_no)
        index = 0
        for email in emails[1]:
            index = self.email_list.InsertItem(0,'')
            if -1 != index:
                email_status = ''
                if EMailStatus.UNREAD.value == email['email_status']:
                    email_status = '未读'
                elif EMailStatus.READED.value == email['email_status']:
                    email_status = '已读'
                elif EMailStatus.UNSEND.value == email['email_status']:
                    email_status = '未发送'
                elif EMailStatus.SENDED.value == email['email_status']:
                    email_status = '已发送'
                else:
                    email_satus = ''
                self.email_list.SetItemData(index,email['email_id'])
                self.email_list.SetItem(index,1,email['send_nick_name'])
                self.email_list.SetItem(index,2,email['subject'])
                self.email_list.SetItem(index,3,email_status)

    '''
    窗口改变大小事件
    param event 事件信息
    '''
    def window_on_resized(self,event):
        size = self.GetSize()
        width = size[0] - 15
        height = size[1] - 40
        self.email_holder.SetSize((width,height))

        width = width - 20 - 20 - 120 - 50 - 50
        self.email_list.SetColumnWidth(0,50)
        self.email_list.SetColumnWidth(1,int(width * 0.2))
        self.email_list.SetColumnWidth(2,int(width * 0.8))
        self.email_list.SetColumnWidth(3,50)

    '''
    写信标签鼠标左键弹起事件
    param event 事件信息
    '''
    def write_label_on_left_up(self,event):
        email_content_window = EMailContentWindow(self,Operate.ADD.value,ParameterDao.auto_increment(ParameterName.EMAIL_ID.value))
        email_content_window.Centre()
        email_content_window.Show()

    '''
    收信标签鼠标左弹起事件
    param event 事件信息
    '''
    def pick_label_on_left_up(self,event):
        if (not self.email_server) or (not self.email_identification):
            wx.MessageBox(message = '电子邮件未设置',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)

            return
        global current_user
        link = None
        try:
            link = EMailUtils.pop3_connect(self.email_server['pop3_address'],self.email_server['pop3_port'],\
                                           current_user.email,self.email_identification['pop3_password'])
        except Exception as e:
            wx.MessageBox(message = '连接EMail服务器错误，请稍后再试',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)
            traceback.print_exc()

            return
        global task_data
        parser = Parser()
        index = 0
        count = 0
        for uid in link.uidl()[1]:
            segment = uid.split(b' ')
            no = segment[0].decode()
            gid = segment[1].decode()
            email = EMailDao.obt_by_email_gid(gid)
            if email:
                continue
            mail = parser.parsestr(b'\n'.join(link.retr(no)[1]).decode())
            sender = parseaddr(mail['From'])
            send_address = EMailUtils.decode_header_entry(sender[1])[0]
            send_nick_name = EMailUtils.decode_header_entry(sender[0])[0]
            receiver = parseaddr(mail['To'])
            receive_address = EMailUtils.decode_header_entry(receiver[1])[0]
            receive_nick_name = EMailUtils.decode_header_entry(receiver[0])[0]
            subject = EMailUtils.decode_header_entry(mail['Subject'])[0]
            texts = []
            attachments = []
            self.parse_mail(mail, texts, attachments)
            content = texts[0]
            if (not content) or (content.strip() == ''):
                if 1 < len(texts):
                    content = re.sub('<[^<]+?>','',texts[1])
            try:
                email_id = ParameterDao.auto_increment(ParameterName.EMAIL_ID.value)
                task_data.execute([['INSERT INTO email VALUES (?,?,?,?,?,?,?,?,?,?,?,?)',\
                                    (email_id,gid,no,send_address,send_nick_name,receive_address,receive_nick_name,subject,content,\
                                     EMailBox.IN_BOX.value,EMailStatus.UNREAD.value,datetime.datetime.now())]])
                for attachment in attachments:
                    attachment_id = ParameterDao.auto_increment(ParameterName.EMAIL_ATTACHMENT_ID.value)
                    task_data.execute([['INSERT INTO email_attachment VALUES (?,?,?,?,?)',\
                                        (attachment_id,email_id,attachment[0],attachment[1],datetime.datetime.now())]])
                task_data.commit()
            except Exception as e:
                task_data.rollback()
                traceback.print_exc()

                continue
            count = count + 1
            index = self.email_list.InsertItem(0,'')
            if -1 != index:
                self.email_list.SetItemData(index,email_id)
                self.email_list.SetItem(index,1,send_nick_name)
                self.email_list.SetItem(index,2,subject)
                self.email_list.SetItem(index,3,'未读')
        link.quit()
        if 0 == count:
            wx.MessageBox(message = '无新电子邮件',caption = '提示',style = wx.OK | wx.ICON_INFORMATION,parent = self)
        else:
            wx.MessageBox(message = '收到' + str(count) + '封新电子邮件',caption = '提示',style = wx.OK | wx.ICON_INFORMATION,parent = self)

    '''
    邮箱列表项目选中事件
    param event 事件信息
    '''
    def box_list_on_item_selected(self,event):
        box = event.GetIndex()
        if 0 == box: #收件箱
            self.email_list.DeleteAllItems()
            self.show_email_item(condition = {'emailbox':EMailBox.IN_BOX.value})
        elif 1 == box: #发件箱
            self.email_list.DeleteAllItems()
            self.show_email_item(condition = {'emailbox':EMailBox.OUT_BOX.value})
        else:
            pass

    '''
    邮件列表项目双击事件
    param event 事件信息
    '''
    def email_list_on_item_activated(self,event):
        index = event.GetIndex()
        email_id = self.email_list.GetItemData(index)
        if not email_id:
            wx.MessageBox(message = '未选择电子邮件',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)

            return
        email = EMailDao.obt_by_primary_key(email_id)
        if not email:
            wx.MessageBox(message = '电子邮件不存在',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)

            return
        if EMailBox.IN_BOX.value == email['emailbox']:
            EMailDao.modify_email_status_by_primary_key(email_id,EMailStatus.READED.value)
            self.email_list.SetItem(index,3,'已读')

        email_content_window = EMailContentWindow(self,Operate.VIEW.value,email_id)
        email_content_window.Centre()
        email_content_window.Show()
        
    '''
    解析邮件对象
    param mail 邮件对象
    param texts 解析后文本
    param attachments 邮件附件
    '''
    def parse_mail(self,mail,texts,attachments):
        mail_maintype = mail.get_content_maintype()
        if 'multipart' == mail_maintype:
            for part in mail.get_payload():
                part_maintype = part.get_content_maintype()
                if 'multipart' == part_maintype:
                    self.parse_mail(part,texts,attachments)
                elif 'text' == part_maintype:
                    texts.append(EMailUtils.decode_body_entry(part))
                elif 'application' == part_maintype:
                    attachments.append((EMailUtils.decode_header_entry(part.get_filename())[0],part.get_payload(decode = True)))
        elif 'text' == mail_maintype:
            texts.append(EMailUtils.decode_body_entry(mail))
        elif 'application' == mail_maintype:
            attachments.append((EMailUtils.decode_header_entry(mail.get_filename())[0],mail.get_payload(decode = True)))

'''
电子邮件内容窗口类
author 一心
'''
class EMailContentWindow(wx.Frame):
    operate = None
    email_id = None

    contact_id = None
    attachment_id = 0
    attachments = {}
    
    sender_text = None
    receiver_text = None
    subject_text = None
    attachment_list = None
    content_text = None

    '''
    初始化
    param parent 父窗口
    param operate 操作类型
    param email_id 电子邮件标识
    '''
    def __init__(self,parent,operate,email_id):
        if Operate.ADD.value == operate:
            name = '编辑电子邮件 - '
        elif Operate.VIEW.value == operate:
            name = '查看电子邮件 - '
        else:
            name = ''
        super().__init__(id = wx.ID_ANY,parent = parent,title = name + Constants.APP_NAME,size = (500,600))
        self.SetIcon(Tools.image2icon(base64.b64decode(Constants.APP_ICON)))

        self.operate = operate
        self.email_id = email_id

        if Operate.ADD.value == operate:
            global current_user
            sender = current_user.fullname
            if sender:
                sender = sender + '<' + current_user.email + '>'
            else:
                sender = current_user.email
            receiver = ''
            subject = ''
            content = ''
            text_style = 0
        elif Operate.VIEW.value == operate:
            email = EMailDao.obt_by_primary_key(email_id)
            if email:
                sender = email['send_nick_name']
                if sender:
                    sender = sender + '<' + email['send_address'] + '>'
                else:
                    sender = email['send_address']
                receiver = email['recv_nick_name']
                if receiver:
                    receiver = receiver + '<' + email['recv_address'] + '>'
                else:
                    receiver = email['recv_address']
                subject = email['subject']
                content = email['content']
            else:
                sender = ''
                receiver = ''
                subject = ''
                content = ''
            text_style = wx.TE_READONLY
        else:
            sender = ''
            receiver = ''
            subject = ''
            content = ''
            text_style = 0
            
        email_content_holder = wx.Panel(parent = self,id = wx.ID_ANY)

        receiver_holder = wx.Panel(parent = email_content_holder,id = wx.ID_ANY)
        self.receiver_text = wx.TextCtrl(parent = receiver_holder,value = receiver,style = text_style)
        receiver_layout = wx.GridBagSizer(vgap = 5,hgap = 10)
        receiver_layout.Add(window = self.receiver_text,pos = (0,0),flag = wx.EXPAND)
        if Operate.ADD.value == operate:
            pick_button = wx.Button(parent = receiver_holder,label = '通讯录')
            receiver_layout.Add(window = pick_button,pos = (0,1),flag = wx.EXPAND)
        receiver_layout.AddGrowableCol(0)
        receiver_holder.SetSizer(receiver_layout)

        attachment_holder = wx.Panel(parent = email_content_holder,id = wx.ID_ANY)
        self.attachment_list = wx.ListCtrl(parent = attachment_holder,id = wx.ID_ANY,style = wx.LC_LIST)
        if Operate.VIEW.value == operate:
            attachments = EMailAttachmentDao.list_by_email_id(email_id)
            index = 0
            i = 0
            for attachment in attachments:
                index = self.attachment_list.InsertItem(i,attachment['filename'])
                if -1 != index:
                    self.attachment_list.SetItemData(index,attachment['att_id'])
                    i = i + 1
        attachment_layout = wx.GridBagSizer(vgap = 5,hgap = 10)
        row = 0
        if Operate.ADD.value == operate:
            add_attachment_button = wx.Button(parent = attachment_holder,label = '添加附件')
            attachment_layout.Add(window = add_attachment_button,pos = (row,0))
            row = row + 1
        attachment_layout.Add(window = self.attachment_list,pos = (row,0),flag = wx.EXPAND)
        attachment_layout.AddGrowableCol(0)
        attachment_holder.SetSizer(attachment_layout)

        action_holder = wx.Panel(parent = email_content_holder,id = wx.ID_ANY)
        close_button = wx.Button(parent = action_holder,label = '关闭')
        action_layout = wx.BoxSizer(wx.HORIZONTAL)
        if Operate.ADD.value == operate:
            save_button = wx.Button(parent = action_holder,label = '保存')
            send_button = wx.Button(parent = action_holder,label = '发送')
            action_layout.Add(window = save_button)
            action_layout.Add(window = send_button)
        action_layout.Add(window = close_button)
        action_holder.SetSizer(action_layout)

        self.sender_text = wx.TextCtrl(parent = email_content_holder,value = sender,style = wx.TE_READONLY)
        self.subject_text = wx.TextCtrl(parent = email_content_holder,value = subject,style = text_style)
        self.content_text = wx.TextCtrl(parent = email_content_holder,value = content,style = text_style | wx.TE_MULTILINE)
        email_content_layout = wx.GridBagSizer(vgap = 5,hgap = 10)
        email_content_layout.Add(window = wx.Panel(parent = email_content_holder,id = wx.ID_ANY,size = (20,15)),pos = (0,0),flag = wx.EXPAND)
        email_content_layout.Add(window = wx.Panel(parent = email_content_holder,id = wx.ID_ANY,size = (0,15)),pos = (0,1),span = (1,2),flag = wx.EXPAND)
        email_content_layout.Add(window = wx.Panel(parent = email_content_holder,id = wx.ID_ANY,size = (20,15)),pos = (0,3),flag = wx.EXPAND)
        email_content_layout.Add(window = wx.Panel(parent = email_content_holder,id = wx.ID_ANY,size = (20,0)),pos = (1,0),flag = wx.EXPAND)
        email_content_layout.Add(window = wx.StaticText(parent = email_content_holder,label = '发件人'),pos = (1,1),\
                                 flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        email_content_layout.Add(window = self.sender_text,pos = (1,2),flag = wx.EXPAND)
        email_content_layout.Add(window = wx.Panel(parent = email_content_holder,id = wx.ID_ANY,size = (20,0)),pos = (1,3),flag = wx.EXPAND)
        email_content_layout.Add(window = wx.Panel(parent = email_content_holder,id = wx.ID_ANY,size = (20,0)),pos = (2,0),flag = wx.EXPAND)
        email_content_layout.Add(window = wx.StaticText(parent = email_content_holder,label = '收件人'),pos = (2,1),\
                                 flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        email_content_layout.Add(window = receiver_holder,pos = (2,2),flag = wx.EXPAND)
        email_content_layout.Add(window = wx.Panel(parent = email_content_holder,id = wx.ID_ANY,size = (20,0)),pos = (2,3),flag = wx.EXPAND)
        email_content_layout.Add(window = wx.Panel(parent = email_content_holder,id = wx.ID_ANY,size = (20,0)),pos = (3,0),flag = wx.EXPAND)
        email_content_layout.Add(window = wx.StaticText(parent = email_content_holder,label = '主题'),pos = (3,1),\
                                 flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        email_content_layout.Add(window = self.subject_text,pos = (3,2),flag = wx.EXPAND)
        email_content_layout.Add(window = wx.Panel(parent = email_content_holder,id = wx.ID_ANY,size = (20,0)),pos = (3,3),flag = wx.EXPAND)
        email_content_layout.Add(window = wx.Panel(parent = email_content_holder,id = wx.ID_ANY,size = (20,0)),pos = (4,0),flag = wx.EXPAND)
        email_content_layout.Add(window = wx.StaticText(parent = email_content_holder,label = '附件'),pos = (4,1),\
                                 flag = wx.ALIGN_RIGHT | wx.ALIGN_TOP | wx.EXPAND)
        email_content_layout.Add(window = attachment_holder,pos = (4,2),flag = wx.EXPAND)
        email_content_layout.Add(window = wx.Panel(parent = email_content_holder,id = wx.ID_ANY,size = (20,0)),pos = (4,3),flag = wx.EXPAND)
        email_content_layout.Add(window = wx.Panel(parent = email_content_holder,id = wx.ID_ANY,size = (20,0)),pos = (5,0),flag = wx.EXPAND)
        email_content_layout.Add(window = self.content_text,pos = (5,1),span = (1,2),flag = wx.EXPAND)
        email_content_layout.Add(window = wx.Panel(parent = email_content_holder,id = wx.ID_ANY,size = (20,0)),pos = (5,3),flag = wx.EXPAND)
        email_content_layout.Add(window = wx.Panel(parent = email_content_holder,id = wx.ID_ANY,size = (20,0)),pos = (6,0),flag = wx.EXPAND)
        email_content_layout.Add(window = action_holder,pos = (6,1),span = (1,2),flag = wx.ALIGN_RIGHT | wx.EXPAND)
        email_content_layout.Add(window = wx.Panel(parent = email_content_holder,id = wx.ID_ANY,size = (20,0)),pos = (6,3),flag = wx.EXPAND)
        email_content_layout.Add(window = wx.Panel(parent = email_content_holder,id = wx.ID_ANY,size = (20,15)),pos = (7,0),flag = wx.EXPAND)
        email_content_layout.Add(window = wx.Panel(parent = email_content_holder,id = wx.ID_ANY,size = (0,15)),pos = (7,1),span = (1,2),flag = wx.EXPAND)
        email_content_layout.Add(window = wx.Panel(parent = email_content_holder,id = wx.ID_ANY,size = (20,15)),pos = (7,3),flag = wx.EXPAND)
        email_content_layout.AddGrowableCol(2)
        email_content_layout.AddGrowableRow(5)
        email_content_holder.SetSizer(email_content_layout)

        #事件绑定
        if Operate.ADD.value == operate:
            pick_button.Bind(wx.EVT_BUTTON,handler = self.pick_button_on_clicked)
            add_attachment_button.Bind(wx.EVT_BUTTON,handler = self.add_attachment_button_on_clicked)
            save_button.Bind(wx.EVT_BUTTON,handler = self.save_button_on_clicked)
            send_button.Bind(wx.EVT_BUTTON,handler = self.send_button_on_clicked)
        self.attachment_list.Bind(event = wx.EVT_RIGHT_DOWN,handler = self.attachment_list_on_right_down)
        close_button.Bind(event = wx.EVT_BUTTON,handler = self.close_button_on_clicked)

    '''
    单击选择通讯录按钮事件
    param event 事件信息
    '''
    def pick_button_on_clicked(self,event):
        pick_email_dialog = PickEMailDialog(self)
        pick_email_dialog.Centre()
        pick = pick_email_dialog.ShowModal()
        if wx.YES == pick:
            contact = ContactDao.obt_by_primary_key(self.contact_id)
            if contact:
                receiver = contact['fullname']
                if contact['email']:
                    receiver = receiver + '<' + contact['email'] + '>'
                self.receiver_text.SetValue(receiver)
                self.receiver_text.SetFocus()

    '''
    添加附件按钮单击事件
    param event 事件信息
    '''
    def add_attachment_button_on_clicked(self,event):
        file_dialog = wx.FileDialog(parent = self,message = '选择文件',wildcard = '所有文件（*.*）|*.*',\
                                    style = wx.FD_OPEN | wx.FD_FILE_MUST_EXIST)
        if wx.ID_OK == file_dialog.ShowModal():
            self.attachments[self.attachment_id] = file_dialog.GetPath()
            index = self.attachment_list.InsertItem(self.attachment_list.GetItemCount(),os.path.basename(self.attachments.get(self.attachment_id)))
            if -1 != index:
                self.attachment_list.SetItemData(index,self.attachment_id)
            self.attachment_id = self.attachment_id + 1

    '''
    单击保存邮件按钮事件
    param event 事件信息
    param send 发送电子邮件
    '''
    def save_button_on_clicked(self,event,send = False):
        sender = self.sender_text.GetValue()
        receiver = self.receiver_text.GetValue()
        subject = self.subject_text.GetValue()
        content = self.content_text.GetValue()
        start = sender.find('<')
        end = sender.rfind('>')
        if -1 == start or -1 == end:
            send_address = sender
            send_nick_name = None
        else:
            send_address = sender[start + 1:end]
            send_nick_name = sender[0:start]
        start = receiver.find('<')
        end = receiver.rfind('>')
        if -1 == start or -1 == end:
            receive_address = receiver
            receive_nick_name = None
        else:
            receive_address = receiver[start + 1:end]
            receive_nick_name = receiver[0:start]

        if not receive_address:
            wx.MessageBox(message = '收件人地址为空',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)
            self.receiver_text.SetFocus()

            return
        if not RegEx.EMAIL_ADDRESS.search(receive_address):
            wx.MessageBox(message = '收件人地址非法',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)
            self.receiver_text.SetFocus()

            return
        if not subject:
            if wx.CANCEL == wx.MessageBox(message = '确定主题为空？',caption = '确认',style = wx.OK | wx.CANCEL | wx.ICON_QUESTION,parent = self):
                self.subject_text.SetFocus()

                return
        global task_data
        try:
            task_data.execute([['INSERT INTO email VALUES (?,?,?,?,?,?,?,?,?,?,?,?)',\
                                (self.email_id,None,None,send_address,send_nick_name,receive_address,receive_nick_name,subject,\
                                 content,EMailBox.OUT_BOX.value,EMailStatus.UNSEND.value,datetime.datetime.now())]])
            for filename in self.attachments.values():
                with open(filename,'rb') as file:
                    data = file.read()
                    task_data.execute([['INSERT INTO email_attachment VALUES (?,?,?,?,?)',\
                                        (ParameterDao.auto_increment(ParameterName.EMAIL_ATTACHMENT_ID.value),self.email_id,\
                                         os.path.basename(filename),data,datetime.datetime.now())]])
            task_data.commit()
            if not send:
                wx.MessageBox(message = '电子邮件草稿保存成功',caption = '提示',style = wx.OK | wx.ICON_INFORMATION,parent = self)
        except Exception as e:
            task_data.rollback()
            wx.MessageBox(message = '电子邮件草稿保存错误',caption = '错误',style = wx.OK | wx.ICON_ERROR,parent = self)
            traceback.print_exc()

    '''
    单击发送按钮事件
    param event 事件信息
    '''
    def send_button_on_clicked(self,event):
        email = EMailDao.obt_by_primary_key(self.email_id)
        if not email:
            self.save_button_on_clicked(event,True)
            email = EMailDao.obt_by_primary_key(self.email_id)
            if not email:
                wx.MessageBox(message = '电子邮件内容为空',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)

                return
        global current_user
        link = None
        try:
            link = EMailUtils.smtp_connect(self.Parent.email_server['smtp_address'],self.Parent.email_server['smtp_port'],\
                                           current_user.email,self.Parent.email_identification['smtp_password'])
        except Exception as e:
            wx.MessageBox(message = '连接EMail服务器错误，请稍后再试',caption = '错误',style = wx.OK | wx.ICON_ERROR,parent = self)
            traceback.print_exc()

            return
        mail = MIMEMultipart()
        mail['From'] = formataddr([email['send_nick_name'],email['send_address']])
        mail['To'] = formataddr([email['recv_nick_name'],email['recv_address']])
        if email['subject']:
            mail['Subject'] = Header(email['subject'],Constants.EMAIL_ENCODING).encode()
        if email['content']:
            mail.attach(MIMEText(email['content'],'plain',Constants.EMAIL_ENCODING))
        for email_attachment in EMailAttachmentDao.list_by_email_id(self.email_id):
            attachment = MIMEText(email_attachment['content'],'base64',Constants.EMAIL_ENCODING)
            attachment['Content-Type'] = 'application/octet-stream'
            attachment['Content-Disposition'] = 'attachment;filename = ' + email_attachment['filename']
            mail.attach(attachment)
        link.sendmail(mail['From'],mail['To'],mail.as_string())
        link.quit()
        EMailDao.modify_email_status_by_primary_key(self.email_id, EMailStatus.SENDED.value)
        wx.MessageBox(message = '电子邮件发送成功',caption = '提示',style = wx.OK | wx.ICON_INFORMATION,parent = self)

    '''
    附件列表鼠标右键单击事件
    param event 事件信息
    '''
    def attachment_list_on_right_down(self,event):
        index = self.attachment_list.GetFirstSelected()
        if -1 == index:
            wx.MessageBox(message = '附件未选择',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)

            return
        email_attachment = EMailAttachmentDao.obt_by_primary_key(self.attachment_list.GetItemData(index))
        if not email_attachment:
            wx.MessageBox(message = '附件不存在',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)

            return
        attachment_menu = wx.Menu()
        save_as_menu_item = wx.MenuItem(attachment_menu,wx.ID_ANY,'另存为...')
        attachment_menu.Append(save_as_menu_item)
        delete_menu_item = wx.MenuItem(attachment_menu,wx.ID_ANY,'删除')
        attachment_menu.Append(delete_menu_item)

        #事件绑定
        self.attachment_list.Bind(wx.EVT_MENU,self.attachment_save_as_menu_item_on_clicked,save_as_menu_item)
        self.attachment_list.Bind(wx.EVT_MENU,self.attachment_delete_menu_item_on_clicked,delete_menu_item)

        self.attachment_list.PopupMenu(attachment_menu, event.GetPosition())

    '''
    另存为按钮单击事件
    param event 事件信息
    '''
    def attachment_save_as_menu_item_on_clicked(self,event):
        index = self.attachment_list.GetFirstSelected()
        if -1 == index:
            wx.MessageBox(message = '附件未选择',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)

            return
        email_attachment = EMailAttachmentDao.obt_by_primary_key(self.attachment_list.GetItemData(index))
        if not email_attachment:
            wx.MessageBox(message = '附件不存在',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)

            return
        file_dialog = wx.FileDialog(parent = self,message = '保存附件',defaultFile = email_attachment['filename'],\
                                    wildcard = '所有文件（*.*）|*.*',style = wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT)
        if wx.ID_OK == file_dialog.ShowModal():
            filename = file_dialog.GetPath()
            with open(filename,'wb') as file:
                file.write(email_attachment['content'])
            wx.MessageBox(message = '文件[' + filename + ']保存成功',caption = '提示',style = wx.OK | wx.ICON_INFORMATION,parent = self)

    '''
    单击删除按钮事件
    param event 事件信息
    '''
    def attachment_delete_menu_item_on_clicked(self,event):
        index = self.attachment_list.GetFirstSelected()
        if -1 == index:
            wx.MessageBox(message = '附件未选择',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)

            return
        attachment_id = self.attachment_list.GetItemData(index)
        global task_data
        try:
            task_data.execute([['DELETE FROM email_attachment WHERE (att_id = ?)',(attachment_id,)]])
            task_data.commit()

            self.attachment_list.DeleteItem(index)
        except Exception as e:
            task_data.rollback()
            wx.MessageBox(message = '删除附件错误',caption = '错误',style = wx.OK | wx.ICON_ERROR,parent = self)
            traceback.print_exc()
            
    '''
    单击关闭按钮事件
    param event 事件信息
    '''
    def close_button_on_clicked(self,event):
        self.Destroy()

'''
通讯录窗口类
author 一心
'''
class ContactWindow(wx.Frame):
    contact_holder = None
    key_text = None
    person_list = None

    item_indexes = set()
    contact_ids = set()

    '''
    初始化
    param parent 父窗口
    '''
    def __init__(self,parent):
        super().__init__(id = wx.ID_ANY,parent = parent,title = '通讯录 - ' + Constants.APP_NAME,size = (562,380))
        self.SetIcon(Tools.image2icon(base64.b64decode(Constants.APP_ICON)))

        self.contact_holder = wx.Panel(parent = self,id = wx.ID_ANY)

        action_holder = wx.Panel(parent = self.contact_holder,id = wx.ID_ANY)
        delete_button = wx.Button(parent = action_holder,label = '删除')
        modify_button = wx.Button(parent = action_holder,label = '修改')
        add_button = wx.Button(parent = action_holder,label = '添加')
        action_layout = wx.BoxSizer(wx.HORIZONTAL)
        action_layout.Add(window = delete_button)
        action_layout.Add(window = modify_button)
        action_layout.Add(window = add_button)
        action_holder.SetSizer(action_layout)

        self.key_text = wx.TextCtrl(parent = self.contact_holder)
        self.person_list = wx.ListCtrl(parent = self.contact_holder,id = wx.ID_ANY,style = wx.LC_REPORT)
        self.person_list.EnableCheckBoxes()
        self.person_list.InsertColumn(0,'选择')
        self.person_list.InsertColumn(1,'姓名')
        self.person_list.InsertColumn(2,'手机号')
        self.person_list.InsertColumn(3,'电子邮箱')
        self.person_list.InsertColumn(4,'联系电话')
        self.person_list.InsertColumn(5,'联系地址')
        self.show_person_item()

        contact_layout = wx.GridBagSizer(vgap = 5,hgap = 10)
        contact_layout.Add(window = wx.Panel(parent = self.contact_holder,id = wx.ID_ANY,size = (20,15)),pos = (0,0),flag = wx.EXPAND)
        contact_layout.Add(window = wx.Panel(parent = self.contact_holder,id = wx.ID_ANY,size = (0,15)),pos = (0,1),flag = wx.EXPAND)
        contact_layout.Add(window = wx.Panel(parent = self.contact_holder,id = wx.ID_ANY,size = (20,15)),pos = (0,2),flag = wx.EXPAND)
        contact_layout.Add(window = wx.Panel(parent = self.contact_holder,id = wx.ID_ANY,size = (20,0)),pos = (1,0),flag = wx.EXPAND)
        contact_layout.Add(window = self.key_text,pos = (1,1),flag = wx.EXPAND)
        contact_layout.Add(window = wx.Panel(parent = self.contact_holder,id = wx.ID_ANY,size = (20,0)),pos = (1,2),flag = wx.EXPAND)
        contact_layout.Add(window = wx.Panel(parent = self.contact_holder,id = wx.ID_ANY,size = (20,0)),pos = (2,0),flag = wx.EXPAND)
        contact_layout.Add(window = self.person_list,pos = (2,1),flag = wx.EXPAND)
        contact_layout.Add(window = wx.Panel(parent = self.contact_holder,id = wx.ID_ANY,size = (20,0)),pos = (2,2),flag = wx.EXPAND)
        contact_layout.Add(window = wx.Panel(parent = self.contact_holder,id = wx.ID_ANY,size = (20,0)),pos = (3,0),flag = wx.EXPAND)
        contact_layout.Add(window = action_holder,pos = (3,1),flag = wx.ALIGN_RIGHT | wx.EXPAND)
        contact_layout.Add(window = wx.Panel(parent = self.contact_holder,id = wx.ID_ANY,size = (20,0)),pos = (3,2),flag = wx.EXPAND)
        contact_layout.Add(window = wx.Panel(parent = self.contact_holder,id = wx.ID_ANY,size = (20,15)),pos = (4,0),flag = wx.EXPAND)
        contact_layout.Add(window = wx.Panel(parent = self.contact_holder,id = wx.ID_ANY,size = (0,15)),pos = (4,1),flag = wx.EXPAND)
        contact_layout.Add(window = wx.Panel(parent = self.contact_holder,id = wx.ID_ANY,size = (20,15)),pos = (4,2),flag = wx.EXPAND)
        contact_layout.AddGrowableRow(2)
        contact_layout.AddGrowableCol(1)
        self.contact_holder.SetSizer(contact_layout)

        #事件绑定
        self.Bind(event = wx.EVT_SIZE,handler = self.window_on_resized)

        self.person_list.Bind(event = wx.EVT_LIST_ITEM_CHECKED,handler = self.person_list_ckbox_on_checked)
        self.person_list.Bind(event = wx.EVT_LIST_ITEM_UNCHECKED,handler = self.person_list_ckbox_on_unchecked)
        delete_button.Bind(event = wx.EVT_BUTTON,handler = self.delete_button_on_clicked)
        modify_button.Bind(event = wx.EVT_BUTTON,handler = self.modify_button_on_clicked)
        add_button.Bind(event = wx.EVT_BUTTON,handler = self.add_button_on_clicked)

    '''
    列出联系人
    param condition 查询条件
    param page_size 页面大小
    param page_no 页码
    '''
    def show_person_item(self,condition = {},page_size = -1,page_no = 0):
        contacts = ContactDao.or_list(condition,page_size,page_no)
        index = 0
        i = 0
        for person in contacts[1]:
            index = self.person_list.InsertItem(i,'')
            if -1 == index:
                continue
            self.person_list.SetItemData(index,person['contact_id'])
            self.person_list.SetItem(index,1,person['fullname'])
            self.person_list.SetItem(index,2,person['mobile_phone'])
            self.person_list.SetItem(index,3,person['email'])
            self.person_list.SetItem(index,4,person['telphone'] if person['telphone'] else '')
            self.person_list.SetItem(index,5,person['address'] if person['address'] else '')
            i = i + 1

    '''
    窗口改变大小事件
    param event 事件信息
    '''
    def window_on_resized(self,event):
        size = self.GetSize()
        width = size[0] - 15
        height = size[1] - 40
        self.contact_holder.SetSize((width,height))

        width = width - 20 - 20 - 50 - 70 - 100 - 105 - 20
        self.person_list.SetColumnWidth(0,50)
        self.person_list.SetColumnWidth(1,70)
        self.person_list.SetColumnWidth(2,100)
        self.person_list.SetColumnWidth(3,int(width * 0.2))
        self.person_list.SetColumnWidth(4,105)
        self.person_list.SetColumnWidth(5,int(width * 0.8))

    '''
    联系人员列表项目选中事件
    param event 事件信息
    '''
    def person_list_ckbox_on_checked(self,event):
        index = event.GetIndex()
        self.item_indexes.add(index)
        self.contact_ids.add(self.person_list.GetItemData(index))

    '''
    联系人员列表项目取消选中事件
    param event 事件信息
    '''
    def person_list_ckbox_on_unchecked(self,event):
        index = event.GetIndex()
        self.item_indexes.discard(index)
        self.contact_ids.discard(self.person_list.GetItemData(index))

    '''
    单击删除按钮事件
    param event 事件信息
    '''
    def delete_button_on_clicked(self,event):
        if not any(self.contact_ids):
            wx.MessageBox(message = '未选择联系人',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)

            return
        m = ','.join('?' for contact_id in self.contact_ids)
        ids = tuple(self.contact_ids)
        global task_data
        task_data.execute([['DELETE FROM chat_location WHERE (contact_id in (' + m + '))',ids],\
                           ['DELETE FROM contact WHERE (contact_id IN (' + m + '))',ids]])
        task_data.commit()
        self.contact_ids.clear()

        for index in sorted(self.item_indexes,reverse = True):
            self.person_list.DeleteItem(index)
        self.item_indexes.clear()

    '''
    修改按钮单击事件
    param event 事件信息
    '''
    def modify_button_on_clicked(self,event):
        if not any(self.contact_ids):
            wx.MessageBox(message = '未选择联系人',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)

            return
        if 1 < len(self.contact_ids):
            wx.MessageBox(message = '不能同时修改多个联系人',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)

            return
        contact_setup_window = ContactSetupWindow(self,Operate.MODIFY.value)
        contact_setup_window.Centre()
        contact_setup_window.Show()

    '''
    添加按钮单击事件
    param event 事件信息
    '''
    def add_button_on_clicked(self,event):
        contact_setup_window = ContactSetupWindow(self,Operate.ADD.value)
        contact_setup_window.Centre()
        contact_setup_window.Show()

'''
联系人设置窗口
author 一心
'''
class ContactSetupWindow(wx.Frame):
    operate = None

    fullname_text = None
    english_name_text = None
    mobile_phone_text = None
    email_text = None
    telphone_text = None
    address_text = None
    post_code_text = None
    organization_text = None
    position_text = None
    chat_address_text = None
    chat_port_text = None

    '''
    初始化
    param parent 父窗口
    param operate 操作类型
    '''
    def __init__(self,parent,operate):
        super().__init__(id = wx.ID_ANY,parent = parent,title = '添加联系人 - ' + Constants.APP_NAME,size = (500,410),\
                         style = wx.DEFAULT_FRAME_STYLE ^ wx.RESIZE_BORDER ^ wx.MAXIMIZE_BOX)

        self.operate = operate

        setup_button_label = '添加'
        fullname = ''
        english_name = ''
        mobile_phone = ''
        email = ''
        telphone = ''
        address = ''
        post_code = ''
        organization = ''
        position = ''
        chat_address = ''
        chat_port = ''
        if Operate.MODIFY.value == operate:
            setup_button_label = '修改'
            contact_id = tuple(self.Parent.contact_ids)[0]
            contact = ContactDao.obt_by_primary_key(contact_id)
            if contact:
                fullname = contact['fullname']
                english_name = contact['english_name']
                mobile_phone = contact['mobile_phone']
                email = contact['email']
                telphone = contact['telphone']
                address = contact['address']
                post_code = contact['post_code']
                organization = contact['organization'] if contact['organization'] else ''
                position = contact['position'] if contact['position'] else ''
            chat_location = ChatLocationDao.obt_by_primary_key(contact_id)
            if chat_location:
                chat_address = chat_location['address']
                chat_port = str(chat_location['port'])

        contact_setup_holder = wx.Panel(parent = self,id = wx.ID_ANY)

        chat_location_holder = wx.Panel(parent = contact_setup_holder,id = wx.ID_ANY)
        self.chat_address_text = wx.TextCtrl(parent = chat_location_holder,value = chat_address)
        self.chat_port_text = wx.TextCtrl(parent = chat_location_holder,value = chat_port)
        chat_location_layout = wx.GridBagSizer(vgap = 5,hgap = 10)
        chat_location_layout.Add(window = self.chat_address_text,pos = (0,0),flag = wx.EXPAND)
        chat_location_layout.Add(window = wx.StaticText(parent = chat_location_holder,label = '端口号'),\
                                pos = (0,1),flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        chat_location_layout.Add(window = self.chat_port_text,pos = (0,2),flag = wx.EXPAND)
        chat_location_layout.AddGrowableCol(0)
        chat_location_layout.AddGrowableCol(2)
        chat_location_holder.SetSizer(chat_location_layout)

        action_holder = wx.Panel(parent = contact_setup_holder,id = wx.ID_ANY)
        setup_button = wx.Button(parent = action_holder,label = setup_button_label)
        reset_button = wx.Button(parent = action_holder,label = '重置')
        action_layout = wx.GridBagSizer(vgap = 5,hgap = 10)
        action_layout.Add(window = setup_button,pos = (0,0),flag = wx.EXPAND)
        action_layout.Add(window = wx.Panel(parent = action_holder,id = wx.ID_ANY,size = (40,0)),pos = (0,1),flag = wx.EXPAND)
        action_layout.Add(window = reset_button,pos = (0,2),flag = wx.EXPAND)
        action_holder.SetSizer(action_layout)

        self.fullname_text = wx.TextCtrl(parent = contact_setup_holder,value = fullname)
        self.english_name_text = wx.TextCtrl(parent = contact_setup_holder,value = english_name)
        self.mobile_phone_text = wx.TextCtrl(parent = contact_setup_holder,value = mobile_phone)
        self.email_text = wx.TextCtrl(parent = contact_setup_holder,value = email)
        self.telphone_text = wx.TextCtrl(parent = contact_setup_holder,value = telphone)
        self.address_text = wx.TextCtrl(parent = contact_setup_holder,value = address)
        self.post_code_text = wx.TextCtrl(parent = contact_setup_holder,value = post_code)
        self.organization_text = wx.TextCtrl(parent = contact_setup_holder,value = organization)
        self.position_text = wx.TextCtrl(parent = contact_setup_holder,value = position)
        contact_setup_layout = wx.GridBagSizer(vgap = 5,hgap = 10)
        contact_setup_layout.Add(window = wx.Panel(parent = contact_setup_holder,id = wx.ID_ANY,size = (20,15)),pos = (0,0),flag = wx.EXPAND)
        contact_setup_layout.Add(window = wx.Panel(parent = contact_setup_holder,id = wx.ID_ANY,size = (0,15)),pos = (0,1),span = (1,2),flag = wx.EXPAND)
        contact_setup_layout.Add(window = wx.Panel(parent = contact_setup_holder,id = wx.ID_ANY,size = (20,15)),pos = (0,3),flag = wx.EXPAND)
        contact_setup_layout.Add(window = wx.Panel(parent = contact_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (1,0),flag = wx.EXPAND)
        contact_setup_layout.Add(window = wx.StaticText(parent = contact_setup_holder,label = '姓名'),pos = (1,1),\
                                 flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        contact_setup_layout.Add(window = self.fullname_text,pos = (1,2),flag = wx.EXPAND)
        contact_setup_layout.Add(window = wx.Panel(parent = contact_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (1,3),flag = wx.EXPAND)
        contact_setup_layout.Add(window = wx.Panel(parent = contact_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (2,0),flag = wx.EXPAND)
        contact_setup_layout.Add(window = wx.StaticText(parent = contact_setup_holder,label = '英文名'),pos = (2,1),\
                                 flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        contact_setup_layout.Add(window = self.english_name_text,pos = (2,2),flag = wx.EXPAND)
        contact_setup_layout.Add(window = wx.Panel(parent = contact_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (2,3),flag = wx.EXPAND)
        contact_setup_layout.Add(window = wx.Panel(parent = contact_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (3,0),flag = wx.EXPAND)
        contact_setup_layout.Add(window = wx.StaticText(parent = contact_setup_holder,label = '手机号'),pos = (3,1),\
                                 flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        contact_setup_layout.Add(window = self.mobile_phone_text,pos = (3,2),flag = wx.EXPAND)
        contact_setup_layout.Add(window = wx.Panel(parent = contact_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (3,3),flag = wx.EXPAND)
        contact_setup_layout.Add(window = wx.Panel(parent = contact_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (4,0),flag = wx.EXPAND)
        contact_setup_layout.Add(window = wx.StaticText(parent = contact_setup_holder,label = '电子邮箱'),pos = (4,1),\
                                 flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        contact_setup_layout.Add(window = self.email_text,pos = (4,2),flag = wx.EXPAND)
        contact_setup_layout.Add(window = wx.Panel(parent = contact_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (4,3),flag = wx.EXPAND)
        contact_setup_layout.Add(window = wx.Panel(parent = contact_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (5,0),flag = wx.EXPAND)
        contact_setup_layout.Add(window = wx.StaticText(parent = contact_setup_holder,label = '联系电话'),pos = (5,1),\
                                 flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        contact_setup_layout.Add(window = self.telphone_text,pos = (5,2),flag = wx.EXPAND)
        contact_setup_layout.Add(window = wx.Panel(parent = contact_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (5,3),flag = wx.EXPAND)
        contact_setup_layout.Add(window = wx.Panel(parent = contact_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (6,0),flag = wx.EXPAND)
        contact_setup_layout.Add(window = wx.StaticText(parent = contact_setup_holder,label = '联系地址'),pos = (6,1),\
                                 flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        contact_setup_layout.Add(window = self.address_text,pos = (6,2),flag = wx.EXPAND)
        contact_setup_layout.Add(window = wx.Panel(parent = contact_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (6,3),flag = wx.EXPAND)
        contact_setup_layout.Add(window = wx.Panel(parent = contact_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (7,0),flag = wx.EXPAND)
        contact_setup_layout.Add(window = wx.StaticText(parent = contact_setup_holder,label = '邮编'),pos = (7,1),\
                                 flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        contact_setup_layout.Add(window = self.post_code_text,pos = (7,2),flag = wx.EXPAND)
        contact_setup_layout.Add(window = wx.Panel(parent = contact_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (7,3),flag = wx.EXPAND)
        contact_setup_layout.Add(window = wx.Panel(parent = contact_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (8,0),flag = wx.EXPAND)
        contact_setup_layout.Add(window = wx.StaticText(parent = contact_setup_holder,label = '单位名称'),pos = (8,1),\
                                 flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        contact_setup_layout.Add(window = self.organization_text,pos = (8,2),flag = wx.EXPAND)
        contact_setup_layout.Add(window = wx.Panel(parent = contact_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (8,3),flag = wx.EXPAND)
        contact_setup_layout.Add(window = wx.Panel(parent = contact_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (9,0),flag = wx.EXPAND)
        contact_setup_layout.Add(window = wx.StaticText(parent = contact_setup_holder,label = '职位'),pos = (9,1),\
                                 flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        contact_setup_layout.Add(window = self.position_text,pos = (9,2),flag = wx.EXPAND)
        contact_setup_layout.Add(window = wx.Panel(parent = contact_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (9,3),flag = wx.EXPAND)
        contact_setup_layout.Add(window = wx.Panel(parent = contact_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (10,0),flag = wx.EXPAND)
        contact_setup_layout.Add(window = wx.StaticText(parent = contact_setup_holder,label = '聊天地址'),pos = (10,1),\
                                 flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        contact_setup_layout.Add(window = chat_location_holder,pos = (10,2),flag = wx.EXPAND)
        contact_setup_layout.Add(window = wx.Panel(parent = contact_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (10,3),flag = wx.EXPAND)
        contact_setup_layout.Add(window = wx.Panel(parent = contact_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (11,0),flag = wx.EXPAND)
        contact_setup_layout.Add(window = action_holder,pos = (11,1),span = (1,2),flag = wx.ALIGN_CENTER | wx.EXPAND)
        contact_setup_layout.Add(window = wx.Panel(parent = contact_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (11,3),flag = wx.EXPAND)
        contact_setup_layout.Add(window = wx.Panel(parent = contact_setup_holder,id = wx.ID_ANY,size = (20,15)),pos = (12,0),flag = wx.EXPAND)
        contact_setup_layout.Add(window = wx.Panel(parent = contact_setup_holder,id = wx.ID_ANY,size = (0,15)),pos = (12,1),span = (1,2),flag = wx.EXPAND)
        contact_setup_layout.Add(window = wx.Panel(parent = contact_setup_holder,id = wx.ID_ANY,size = (20,15)),pos = (12,3),flag = wx.EXPAND)
        contact_setup_layout.AddGrowableCol(2)
        contact_setup_holder.SetSizer(contact_setup_layout)

        #事件绑定
        setup_button.Bind(event = wx.EVT_BUTTON,handler = self.setup_button_on_clicked)

    '''
    单击设置按钮事件
    param event 事件信息
    '''
    def setup_button_on_clicked(self,event):
        fullname = self.fullname_text.GetValue()
        english_name = self.english_name_text.GetValue()
        mobile_phone = self.mobile_phone_text.GetValue()
        email = self.email_text.GetValue()
        telphone = self.telphone_text.GetValue()
        address = self.address_text.GetValue()
        post_code = self.post_code_text.GetValue()
        organization = self.organization_text.GetValue()
        position = self.position_text.GetValue()
        chat_address = self.chat_address_text.GetValue()
        chat_port = self.chat_port_text.GetValue()

        if not fullname:
            wx.MessageBox(message = '姓名为空',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)
            self.fullname_text.SetFocus()

            return
        if mobile_phone:
            if not re.compile('^1\\d{10}$').search(mobile_phone):
                wx.MessageBox(message = '手机号非法',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)
                self.mobile_phone_text.SetFocus()

                return
        if email:
            if not RegEx.EMAIL_ADDRESS.search(email):
                wx.MessageBox(message = '电子邮箱非法',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)
                self.email_text.SetFocus()

                return
        if telphone:
            if not telphone.isdigit():
                wx.MessageBox(message = '电话号码非法',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)
                self.telphone_text.SetFocus()

                return
        if post_code:
            if not re.compile('^[1-9]\\d{5}$').search(post_code):
                wx.MessageBox(message = '邮政编码非法',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)
                self.post_code_text.SetFocus()

                return
        if chat_port:
            if not chat_port.isdigit():
                wx.MessageBox(message = '聊天端口号非法',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)
                self.chat_port_text.SetFocus()

                return
        
        global task_data
        global current_user
        try:
            if Operate.ADD.value == self.operate:
                contact_id = ParameterDao.auto_increment(ParameterName.CONTACT_ID.value)
                task_data.execute([['INSERT INTO contact VALUES (?,?,?,?,?,?,?,?,?,?,?,?)',\
                                    (contact_id,fullname,english_name,mobile_phone,email,telphone,address,post_code,\
                                     organization,position,current_user.user_id,datetime.datetime.now())]])
                if chat_address or chat_port:
                    task_data.execute([['INSERT INTO chat_location VALUES (?,?,?,?)',(contact_id,chat_address,chat_port,datetime.datetime.now())]])
                task_data.commit()
                index = self.Parent.person_list.InsertItem(0,'')
                if -1 != index:
                    self.Parent.person_list.SetItemData(index,contact_id)
                    self.Parent.person_list.SetItem(index,1,fullname)
                    self.Parent.person_list.SetItem(index,2,mobile_phone)
                    self.Parent.person_list.SetItem(index,3,email)
                    self.Parent.person_list.SetItem(index,4,telphone)
                    self.Parent.person_list.SetItem(index,5,address)
            elif Operate.MODIFY.value == self.operate:
                contact_id = tuple(self.Parent.contact_ids)[0]
                task_data.execute([['UPDATE contact SET fullname = ?,\
                                                        english_name = ?,\
                                                        mobile_phone = ?,\
                                                        email = ?,\
                                                        telphone = ?,\
                                                        address = ?,\
                                                        post_code = ?,\
                                                        organization = ?,\
                                                        position = ?,\
                                                        host_time = ?\
                                     WHERE (contact_id = ?)',\
                                    (fullname,english_name,mobile_phone,email,telphone,address,post_code,organization,\
                                     position,datetime.datetime.now(),contact_id)]])
                if chat_address or chat_port:
                    affect = task_data.execute([['UPDATE chat_location SET address = ?,\
                                                                           port = ?,\
                                                                           host_time = ?\
                                                  WHERE (contact_id = ?)',\
                                                 (chat_address,chat_port,datetime.datetime.now(),contact_id)]])
                    if 0 == affect:
                        task_data.execute([['INSERT INTO chat_location VALUES (?,?,?,?)',\
                                            (contact_id,chat_address,chat_port,datetime.datetime.now())]])
                else:
                    task_data.execute([['DELETE FROM chat_location WHERE (contact_id = ?)',(contact_id,)]])
                task_data.commit()
                index = tuple(self.Parent.item_indexes)[0]
                self.Parent.person_list.SetItem(index,1,fullname)
                self.Parent.person_list.SetItem(index,2,mobile_phone)
                self.Parent.person_list.SetItem(index,3,email)
                self.Parent.person_list.SetItem(index,4,telphone)
                self.Parent.person_list.SetItem(index,5,address)
            self.Destroy()
        except Exception as e:
            task_data.rollback()

            wx.MessageBox(message = '联系人保存错误',caption = '错误',style = wx.OK | wx.ICON_ERROR,parent = self)
            traceback.print_exc()

class ApplicationWindow(wx.Frame):
    application_holder = None
    keyword_text = None
    application_list = None

    item_indexes = set()
    application_ids = set()

    def __init__(self,parent):
        super().__init__(id = wx.ID_ANY,parent = parent,title = '应用管理 - ' + Constants.APP_NAME,size = (562,380))
        self.SetIcon(Tools.image2icon(base64.b64decode(Constants.APP_ICON)))

        self.application_holder = wx.Panel(parent = self,id = wx.ID_ANY)

        action_holder = wx.Panel(parent = self.application_holder,id = wx.ID_ANY)
        add_button = wx.Button(parent = action_holder,label = '添加')
        address_button = wx.Button(parent = action_holder,label = '地址管理')
        passkey_button = wx.Button(parent = action_holder,label = '密码管理')
        action_layout = wx.BoxSizer(wx.HORIZONTAL)
        action_layout.Add(window = add_button)
        action_layout.Add(window = address_button)
        action_layout.Add(window = passkey_button)
        action_holder.SetSizer(action_layout)

        self.keyword_text = wx.TextCtrl(parent = self.application_holder,style = wx.TE_PROCESS_ENTER)
        self.application_list = wx.ListCtrl(parent = self.application_holder,id = wx.ID_ANY,style = wx.LC_REPORT)
        self.application_list.EnableCheckBoxes()
        self.application_list.InsertColumn(0,'选择')
        self.application_list.InsertColumn(1,'应用名称')
        self.application_list.InsertColumn(2,'应用描述')
        self.show_application_item()

        application_layout = wx.GridBagSizer(vgap = 5,hgap = 10)
        application_layout.Add(window = wx.Panel(parent = self.application_holder,id = wx.ID_ANY,size = (20,15)),pos = (0,0),flag = wx.EXPAND)
        application_layout.Add(window = wx.Panel(parent = self.application_holder,id = wx.ID_ANY,size = (0,15)),pos = (0,1),flag = wx.EXPAND)
        application_layout.Add(window = wx.Panel(parent = self.application_holder,id = wx.ID_ANY,size = (20,15)),pos = (0,2),flag = wx.EXPAND)
        application_layout.Add(window = wx.Panel(parent = self.application_holder,id = wx.ID_ANY,size = (20,0)),pos = (1,0),flag = wx.EXPAND)
        application_layout.Add(window = self.keyword_text,pos = (1,1),flag = wx.EXPAND)
        application_layout.Add(window = wx.Panel(parent = self.application_holder,id = wx.ID_ANY,size = (20,0)),pos = (1,2),flag = wx.EXPAND)
        application_layout.Add(window = wx.Panel(parent = self.application_holder,id = wx.ID_ANY,size = (20,0)),pos = (2,0),flag = wx.EXPAND)
        application_layout.Add(window = self.application_list,pos = (2,1),flag = wx.EXPAND)
        application_layout.Add(window = wx.Panel(parent = self.application_holder,id = wx.ID_ANY,size = (20,0)),pos = (2,2),flag = wx.EXPAND)
        application_layout.Add(window = wx.Panel(parent = self.application_holder,id = wx.ID_ANY,size = (20,0)),pos = (3,0),flag = wx.EXPAND)
        application_layout.Add(window = action_holder,pos = (3,1),flag = wx.ALIGN_RIGHT | wx.EXPAND)
        application_layout.Add(window = wx.Panel(parent = self.application_holder,id = wx.ID_ANY,size = (20,0)),pos = (3,2),flag = wx.EXPAND)
        application_layout.Add(window = wx.Panel(parent = self.application_holder,id = wx.ID_ANY,size = (20,15)),pos = (4,0),flag = wx.EXPAND)
        application_layout.Add(window = wx.Panel(parent = self.application_holder,id = wx.ID_ANY,size = (0,15)),pos = (4,1),flag = wx.EXPAND)
        application_layout.Add(window = wx.Panel(parent = self.application_holder,id = wx.ID_ANY,size = (20,15)),pos = (4,2),flag = wx.EXPAND)
        application_layout.AddGrowableCol(1)
        application_layout.AddGrowableRow(2)
        self.application_holder.SetSizer(application_layout)

        #事件绑定
        self.Bind(event = wx.EVT_SIZE,handler = self.window_on_resized)
        self.Bind(event = wx.EVT_CLOSE,handler = self.window_on_closed)

        self.keyword_text.Bind(event = wx.EVT_TEXT_ENTER,handler = self.keyword_text_on_entered)
        self.application_list.Bind(event = wx.EVT_LIST_ITEM_CHECKED,handler = self.application_list_ckbox_on_checked)
        self.application_list.Bind(event = wx.EVT_LIST_ITEM_UNCHECKED,handler = self.application_list_ckbox_on_unchecked)

        add_button.Bind(event = wx.EVT_BUTTON,handler = self.add_button_on_clicked)
        address_button.Bind(event = wx.EVT_BUTTON,handler = self.address_button_on_clicked)
        passkey_button.Bind(event = wx.EVT_BUTTON,handler = self.passkey_button_on_clicked)

    '''
    列出应用
    param condition 查询条件
    param page_size 分页大小
    param page_no 页码
    '''
    def show_application_item(self,condition = {},page_size = -1,page_no = 0):
        applications = ApplicationDao.list_by_keyword(condition,page_size,page_no)
        index = 0
        i = 0
        for application in applications[1]:
            index = self.application_list.InsertItem(i,'')
            if -1 == index:
                continue
            self.application_list.CheckItem(index,True) if application['app_id'] in self.application_ids else self.application_list.CheckItem(index,False)
            self.application_list.SetItemData(index,application['app_id'])
            self.application_list.SetItem(index,1,application['app_name'])
            self.application_list.SetItem(index,2,application['app_desc'])
            i = i + 1

    '''
    窗口改变大小事件
    param event 事件信息
    '''
    def window_on_resized(self,event):
        size = self.GetSize()
        width = size[0] - 15
        height = size[1] - 40
        self.application_holder.SetSize(width,height)

        width = width - 20 - 20 - 50 - 50
        self.application_list.SetColumnWidth(0,50)
        self.application_list.SetColumnWidth(1,int(width * 0.3))
        self.application_list.SetColumnWidth(2,int(width * 0.7))

    '''
    单击关闭按钮事件
    param event 事件信息
    '''
    def window_on_closed(self,event):
        self.item_indexes.clear()
        self.application_ids.clear()
        self.Destroy()

    '''
    搜索框回车按下事件
    param event 事件信息
    '''
    def keyword_text_on_entered(self,event):
        self.application_list.DeleteAllItems()
        condition = {'keyword':self.keyword_text.GetValue()}
        self.show_application_item(condition)

    '''
    应用列表项目选中事件
    param event 事件信息
    '''
    def application_list_ckbox_on_checked(self,event):
        index = event.GetIndex()
        self.item_indexes.add(index)
        self.application_ids.add(self.application_list.GetItemData(index))

    '''
    应用列表项目取消选择事件
    param event 事件信息
    '''
    def application_list_ckbox_on_unchecked(self,event):
        index = event.GetIndex()
        self.item_indexes.discard(index)
        self.application_ids.discard(self.application_list.GetItemData(index))

    '''
    添加按钮单击事件
    param event 事件信息
    '''
    def add_button_on_clicked(self,event):
        application_setup_window = ApplicationSetupWindow(self,Operate.ADD.value)
        application_setup_window.Centre()
        application_setup_window.Show()

    '''
    地址按钮事件
    param event 事件信息
    '''
    def address_button_on_clicked(self,event):
        if not any(self.application_ids):
            wx.MessageBox(message = '未选择应用',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)

            return
        if 1 < len(self.application_ids):
            wx.MessageBox(message = '不能同时管理多个应用地址',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)

            return
        access_window = AccessWindow(self)
        access_window.Centre()
        access_window.Show()

    '''
    密码按钮单击事件
    param event 事件信息
    '''
    def passkey_button_on_clicked(self,event):
        if not any(self.application_ids):
            wx.MessageBox(message = '未选择应用',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)

            return
        passkey_window = PasskeyWindow(self)
        passkey_window.Centre()
        passkey_window.Show()

class ApplicationSetupWindow(wx.Frame):
    operate = None

    application_name_text = None
    application_description_text = None

    def __init__(self,parent,operate):
        super().__init__(id = wx.ID_ANY,parent = parent,title = '添加应用 - ' + Constants.APP_NAME,size = (500,180),\
                         style = wx.DEFAULT_FRAME_STYLE ^ wx.RESIZE_BORDER ^ wx.MAXIMIZE_BOX)
        self.SetIcon(Tools.image2icon(base64.b64decode(Constants.APP_ICON)))

        self.operate = operate

        application_setup_holder = wx.Panel(parent = self,id = wx.ID_ANY)

        action_holder = wx.Panel(parent = application_setup_holder,id = wx.ID_ANY)
        setup_button = wx.Button(parent = action_holder,label = '添加')
        reset_button = wx.Button(parent = action_holder,label = '重置')
        action_layout = wx.GridBagSizer(vgap = 5,hgap = 10)
        action_layout.Add(window = setup_button,pos = (0,0),flag = wx.EXPAND)
        action_layout.Add(window = wx.Panel(parent = action_holder,id = wx.ID_ANY,size = (40,0)),pos = (0,1),flag = wx.EXPAND)
        action_layout.Add(window = reset_button,pos = (0,2),flag = wx.EXPAND)
        action_holder.SetSizer(action_layout)

        self.application_name_text = wx.TextCtrl(parent = application_setup_holder)
        self.application_description_text = wx.TextCtrl(parent = application_setup_holder)
        application_setup_layout = wx.GridBagSizer(vgap = 5,hgap = 10)
        application_setup_layout.Add(window = wx.Panel(parent = application_setup_holder,id = wx.ID_ANY,size = (20,15)),pos = (0,0),flag = wx.EXPAND)
        application_setup_layout.Add(window = wx.Panel(parent = application_setup_holder,id = wx.ID_ANY,size = (0,15)),pos = (0,1),span = (1,2),flag = wx.EXPAND)
        application_setup_layout.Add(window = wx.Panel(parent = application_setup_holder,id = wx.ID_ANY,size = (20,15)),pos = (0,3),flag = wx.EXPAND)
        application_setup_layout.Add(window = wx.Panel(parent = application_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (1,0),flag = wx.EXPAND)
        application_setup_layout.Add(window = wx.StaticText(parent = application_setup_holder,label = '应用名称'),pos = (1,1),\
                                     flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        application_setup_layout.Add(window = self.application_name_text,pos = (1,2),flag = wx.EXPAND)
        application_setup_layout.Add(window = wx.Panel(parent = application_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (1,3),flag = wx.EXPAND)
        application_setup_layout.Add(window = wx.Panel(parent = application_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (2,0),flag = wx.EXPAND)
        application_setup_layout.Add(window = wx.StaticText(parent = application_setup_holder,label = '应用描述'),pos = (2,1),\
                                     flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        application_setup_layout.Add(window = self.application_description_text,pos = (2,2),flag = wx.EXPAND)
        application_setup_layout.Add(window = wx.Panel(parent = application_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (2,3),flag = wx.EXPAND)
        application_setup_layout.Add(window = wx.Panel(parent = application_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (3,0),flag = wx.EXPAND)
        application_setup_layout.Add(window = action_holder,pos = (3,1),span = (1,2),flag = wx.ALIGN_CENTER | wx.EXPAND)
        application_setup_layout.Add(window = wx.Panel(parent = application_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (3,3),flag = wx.EXPAND)
        application_setup_layout.Add(window = wx.Panel(parent = application_setup_holder,id = wx.ID_ANY,size = (20,15)),pos = (4,0),flag = wx.EXPAND)
        application_setup_layout.Add(window = wx.Panel(parent = application_setup_holder,id = wx.ID_ANY,size = (0,15)),pos = (4,1),span = (1,2),flag = wx.EXPAND)
        application_setup_layout.Add(window = wx.Panel(parent = application_setup_holder,id = wx.ID_ANY,size = (20,15)),pos = (4,3),flag = wx.EXPAND)
        application_setup_layout.AddGrowableCol(2)
        application_setup_holder.SetSizer(application_setup_layout)

        #事件绑定
        setup_button.Bind(event = wx.EVT_BUTTON,handler = self.setup_button_on_clicked)

    def setup_button_on_clicked(self,event):
        application_name = self.application_name_text.GetValue()
        application_description = self.application_description_text.GetValue()

        if not application_name:
            wx.MessageBox(message = '应用名称为空',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)
            self.application_name_text.SetFocus()

            return

        global task_data
        global current_user
        try:
            application_id = ParameterDao.auto_increment(ParameterName.APPLICATION_ID.value)
            task_data.execute([['INSERT INTO application VALUES (?,?,?,?,?)',\
                                (application_id,application_name,application_description,\
                                 current_user.user_id,datetime.datetime.now())]])
            task_data.commit()
            index = self.Parent.application_list.InsertItem(0,'')
            if -1 != index:
                self.Parent.application_list.SetItemData(index,application_id)
                self.Parent.application_list.SetItem(index,1,application_name)
                self.Parent.application_list.SetItem(index,2,application_description)
            self.Destroy()
        except Exception as e:
            task_data.rollback()

            wx.MessageBox(message = '应用信息保存错误',caption = '错误',style = wx.OK | wx.ICON_ERROR,parent = self)
            traceback.print_exc()

class PasskeyWindow(wx.Frame):
    key_text = None
    passkey_list = None

    item_indexes = set()
    passkey_ids = set()

    def __init__(self,parent):
        super().__init__(id = wx.ID_ANY,parent = parent,title = '密码管理 - ' + Constants.APP_NAME,size = (500,350))
        self.SetIcon(Tools.image2icon(base64.b64decode(Constants.APP_ICON)))

        passkey_holder = wx.Panel(parent = self,id = wx.ID_ANY)

        action_holder = wx.Panel(parent = passkey_holder,id = wx.ID_ANY)
        delete_button = wx.Button(parent = action_holder,label = '删除')
        add_button = wx.Button(parent = action_holder,label = '添加')
        action_layout = wx.BoxSizer(wx.HORIZONTAL)
        action_layout.Add(window = delete_button)
        action_layout.Add(window = add_button)
        action_holder.SetSizer(action_layout)

        self.key_text = wx.TextCtrl(parent = passkey_holder)
        self.passkey_list = wx.ListCtrl(parent = passkey_holder,id = wx.ID_ANY,style = wx.LC_REPORT)
        self.passkey_list.EnableCheckBoxes()
        self.passkey_list.InsertColumn(0,'选择')
        self.passkey_list.InsertColumn(1,'应用名称')
        self.passkey_list.InsertColumn(2,'用户名')
        self.passkey_list.InsertColumn(3,'用户描述')
        self.passkey_list.InsertColumn(4,'用户密码')
        self.show_passkey_item(condition = {'a.app_id':self.Parent.application_ids})

        passkey_layout = wx.GridBagSizer(vgap = 5,hgap = 10)
        passkey_layout.Add(window = wx.Panel(parent = passkey_holder,id = wx.ID_ANY,size = (20,15)),pos = (0,0),flag = wx.EXPAND)
        passkey_layout.Add(window = wx.Panel(parent = passkey_holder,id = wx.ID_ANY,size = (0,15)),pos = (0,1),flag = wx.EXPAND)
        passkey_layout.Add(window = wx.Panel(parent = passkey_holder,id = wx.ID_ANY,size = (20,15)),pos = (0,2),flag = wx.EXPAND)
        passkey_layout.Add(window = wx.Panel(parent = passkey_holder,id = wx.ID_ANY,size = (20,0)),pos = (1,0),flag = wx.EXPAND)
        passkey_layout.Add(window = self.key_text,pos = (1,1),flag = wx.EXPAND)
        passkey_layout.Add(window = wx.Panel(parent = passkey_holder,id = wx.ID_ANY,size = (20,0)),pos = (1,2),flag = wx.EXPAND)
        passkey_layout.Add(window = wx.Panel(parent = passkey_holder,id = wx.ID_ANY,size = (20,0)),pos = (2,0),flag = wx.EXPAND)
        passkey_layout.Add(window = self.passkey_list,pos = (2,1),flag = wx.EXPAND)
        passkey_layout.Add(window = wx.Panel(parent = passkey_holder,id = wx.ID_ANY,size = (20,0)),pos = (2,2),flag = wx.EXPAND)
        passkey_layout.Add(window = wx.Panel(parent = passkey_holder,id = wx.ID_ANY,size = (20,0)),pos = (3,0),flag = wx.EXPAND)
        passkey_layout.Add(window = action_holder,pos = (3,1),flag = wx.ALIGN_RIGHT | wx.EXPAND)
        passkey_layout.Add(window = wx.Panel(parent = passkey_holder,id = wx.ID_ANY,size = (20,0)),pos = (3,2),flag = wx.EXPAND)
        passkey_layout.Add(window = wx.Panel(parent = passkey_holder,id = wx.ID_ANY,size = (20,15)),pos = (4,0),flag = wx.EXPAND)
        passkey_layout.Add(window = wx.Panel(parent = passkey_holder,id = wx.ID_ANY,size = (0,15)),pos = (4,1),flag = wx.EXPAND)
        passkey_layout.Add(window = wx.Panel(parent = passkey_holder,id = wx.ID_ANY,size = (20,15)),pos = (4,2),flag = wx.EXPAND)
        passkey_layout.AddGrowableCol(1)
        passkey_layout.AddGrowableRow(2)
        passkey_holder.SetSizer(passkey_layout)
        
        #事件绑定
        self.Bind(event = wx.EVT_CLOSE,handler = self.window_on_closed)

        self.passkey_list.Bind(event = wx.EVT_LIST_ITEM_CHECKED,handler = self.passkey_list_ckbox_on_checked)
        self.passkey_list.Bind(event = wx.EVT_LIST_ITEM_UNCHECKED,handler = self.passkey_list_ckbox_on_unchecked)
        delete_button.Bind(event = wx.EVT_BUTTON,handler = self.delete_button_on_clicked)
        add_button.Bind(event = wx.EVT_BUTTON,handler = self.add_button_on_clicked)

    '''
    显示密钥列表
    param condition 查询条件
    param page_size 页面大小
    param page_no 页码
    '''
    def show_passkey_item(self,condition = {},page_size = -1,page_no = 0):
        passkeys = PasskeyDao.and_list(condition,page_size,page_no)
        index = 0
        i = 0
        for passkey in passkeys[1]:
            index = self.passkey_list.InsertItem(i,'')
            if -1 == index:
                continue
            self.passkey_list.CheckItem(index,True) if passkey['a_passkey_id'] in self.passkey_ids else self.passkey_list.CheckItem(index,False)
            self.passkey_list.SetItemData(index,passkey['a_passkey_id'])
            self.passkey_list.SetItem(index,1,passkey['b_app_name'])
            self.passkey_list.SetItem(index,2,passkey['a_username'])
            self.passkey_list.SetItem(index,3,passkey['a_description'])
            self.passkey_list.SetItem(index,4,passkey['a_password'])
            i = i + 1

    '''
    窗口关闭事件
    param event 事件信息
    '''
    def window_on_closed(self,event):
        self.item_indexes.clear()
        self.passkey_ids.clear()
        self.Destroy()

    '''
    密钥列表选中事件
    param event 事件信息
    '''
    def passkey_list_ckbox_on_checked(self,event):
        index = event.GetIndex()
        self.item_indexes.add(index)
        self.passkey_ids.add(self.passkey_list.GetItemData(index))

    '''
    密钥列表取消选中事件
    param event 事件信息
    '''
    def passkey_list_ckbox_on_unchecked(self,event):
        index = event.GetIndex()
        self.item_indexes.discard(index)
        self.passkey_ids.discard(self.passkey_list.GetItemData(index))

    '''
    删除按钮单击事件
    param event 事件信息
    '''
    def delete_button_on_clicked(self,event):
        if not any(self.passkey_ids):
            wx.MessageBox(message = '未选择用户密码',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)

            return
        m = ','.join('?' for passkey_id in self.passkey_ids)
        global task_data
        task_data.execute([['DELETE FROM passkey WHERE (passkey_id IN (' + m + '))',tuple(self.passkey_ids)]])
        task_data.commit()
        self.passkey_ids.clear()

        for index in sorted(self.item_indexes,reverse = True):
            self.passkey_list.DeleteItem(index)
        self.item_indexes.clear()

    '''
    添加按钮单击事件
    param event 事件信息
    '''
    def add_button_on_clicked(self,event):
        passkey_setup_window = PasskeySetupWindow(self,Operate.ADD.value)
        passkey_setup_window.Centre()
        passkey_setup_window.Show()

class PasskeySetupWindow(wx.Frame):
    username_text = None
    description_text = None
    password_text = None

    def __init__(self,parent,operate):
        super().__init__(id = wx.ID_ANY,parent = parent,title = '添加密码 - ' + Constants.APP_NAME,size = (480,200),\
                         style = wx.DEFAULT_FRAME_STYLE ^ wx.RESIZE_BORDER ^ wx.MAXIMIZE_BOX)
        self.SetIcon(Tools.image2icon(base64.b64decode(Constants.APP_ICON)))

        passkey_setup_holder = wx.Panel(parent = self,id = wx.ID_ANY)

        action_holder = wx.Panel(parent = passkey_setup_holder,id = wx.ID_ANY)
        setup_button = wx.Button(parent = action_holder,label = '添加')
        reset_button = wx.Button(parent = action_holder,label = '重置')
        action_layout = wx.GridBagSizer(vgap = 5,hgap = 10)
        action_layout.Add(window = setup_button,pos = (0,0),flag = wx.EXPAND)
        action_layout.Add(window = wx.Panel(parent = action_holder,id = wx.ID_ANY,size = (40,0)),pos = (0,1),flag = wx.EXPAND)
        action_layout.Add(window = reset_button,pos = (0,2),flag = wx.EXPAND)
        action_holder.SetSizer(action_layout)

        self.username_text = wx.TextCtrl(parent = passkey_setup_holder)
        self.description_text = wx.TextCtrl(parent = passkey_setup_holder)
        self.password_text = wx.TextCtrl(parent = passkey_setup_holder)
        passkey_setup_layout = wx.GridBagSizer(vgap = 5,hgap = 10)
        passkey_setup_layout.Add(window = wx.Panel(parent = passkey_setup_holder,id = wx.ID_ANY,size = (20,15)),pos = (0,0),flag = wx.EXPAND)
        passkey_setup_layout.Add(window = wx.Panel(parent = passkey_setup_holder,id = wx.ID_ANY,size = (0,15)),pos = (0,1),span = (1,2),flag = wx.EXPAND)
        passkey_setup_layout.Add(window = wx.Panel(parent = passkey_setup_holder,id = wx.ID_ANY,size = (20,15)),pos = (0,3),flag = wx.EXPAND)
        passkey_setup_layout.Add(window = wx.Panel(parent = passkey_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (1,0),flag = wx.EXPAND)
        passkey_setup_layout.Add(window = wx.StaticText(parent = passkey_setup_holder,label = '用户名'),pos = (1,1),\
                                 flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        passkey_setup_layout.Add(window = self.username_text,pos = (1,2),flag = wx.EXPAND)
        passkey_setup_layout.Add(window = wx.Panel(parent = passkey_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (1,3),flag = wx.EXPAND)
        passkey_setup_layout.Add(window = wx.Panel(parent = passkey_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (2,0),flag = wx.EXPAND)
        passkey_setup_layout.Add(window = wx.StaticText(parent = passkey_setup_holder,label = '描述'),pos = (2,1),\
                                 flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        passkey_setup_layout.Add(window = self.description_text,pos = (2,2),flag = wx.EXPAND)
        passkey_setup_layout.Add(window = wx.Panel(parent = passkey_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (2,3),flag = wx.EXPAND)
        passkey_setup_layout.Add(window = wx.Panel(parent = passkey_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (3,0),flag = wx.EXPAND)
        passkey_setup_layout.Add(window = wx.StaticText(parent = passkey_setup_holder,label = '密码'),pos = (3,1),\
                                 flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        passkey_setup_layout.Add(window = self.password_text,pos = (3,2),flag = wx.EXPAND)
        passkey_setup_layout.Add(window = wx.Panel(parent = passkey_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (3,3),flag = wx.EXPAND)
        passkey_setup_layout.Add(window = wx.Panel(parent = passkey_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (4,0),flag = wx.EXPAND)
        passkey_setup_layout.Add(window = action_holder,pos = (4,1),span = (1,2),flag = wx.ALIGN_CENTER | wx.EXPAND)
        passkey_setup_layout.Add(window = wx.Panel(parent = passkey_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (4,3),flag = wx.EXPAND)
        passkey_setup_layout.Add(window = wx.Panel(parent = passkey_setup_holder,id = wx.ID_ANY,size = (20,15)),pos = (5,0),flag = wx.EXPAND)
        passkey_setup_layout.Add(window = wx.Panel(parent = passkey_setup_holder,id = wx.ID_ANY,size = (0,15)),pos = (5,1),span = (1,2),flag = wx.EXPAND)
        passkey_setup_layout.Add(window = wx.Panel(parent = passkey_setup_holder,id = wx.ID_ANY,size = (20,15)),pos = (5,3),flag = wx.EXPAND)
        passkey_setup_layout.AddGrowableCol(2)
        passkey_setup_holder.SetSizer(passkey_setup_layout)

        #事件绑定
        setup_button.Bind(event = wx.EVT_BUTTON,handler = self.setup_button_on_clicked);

    def setup_button_on_clicked(self,event):
        username = self.username_text.GetValue()
        description = self.description_text.GetValue()
        password = self.password_text.GetValue()

        if not username:
            wx.MessageBox(message = '用户名为空',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)
            self.username_text.SetFocus()

            return

        global task_data
        global current_user
        try:
            passkey_ids = []
            passkey_sqls = []
            for application_id in self.Parent.Parent.application_ids:
                passkey_id = ParameterDao.auto_increment(ParameterName.PASSKEY_ID.value)
                passkey_ids.append(passkey_id)
                passkey_sqls.append(['INSERT INTO passkey VALUES (?,?,?,?,?,?,?)',\
                             (passkey_id,application_id,username,description,\
                              password,current_user.user_id,datetime.datetime.now())])
            task_data.execute(passkey_sqls)
            task_data.commit()
            i = 0
            for application_id in self.Parent.Parent.application_ids:
                index = self.Parent.passkey_list.InsertItem(0,'')
                if -1 == index:
                    continue
                application = ApplicationDao.obt_by_primary_key(application_id)
                if application:
                    application_name = application['app_name']
                else:
                    application_name = ''
                self.Parent.passkey_list.SetItemData(index,passkey_ids[i])
                self.Parent.passkey_list.SetItem(index,1,application_name)
                self.Parent.passkey_list.SetItem(index,2,username)
                self.Parent.passkey_list.SetItem(index,3,description)
                self.Parent.passkey_list.SetItem(index,4,password)
                i = i + 1
            self.Destroy()
        except Exception as e:
            task_data.rollback()

            wx.MessageBox(message = '密码信息保存错误',caption = '错误',style = wx.OK | wx.ICON_ERROR,parent = self)
            traceback.print_exc()

class AccessWindow(wx.Frame):
    key_text = None
    access_list = None

    item_indexes = set()
    access_ids = set()

    def __init__(self,parent):
        super().__init__(id = wx.ID_ANY,parent = parent,title = '地址管理 - ' + Constants.APP_NAME,size = (500,350))
        self.SetIcon(Tools.image2icon(base64.b64decode(Constants.APP_ICON)))

        access_holder = wx.Panel(parent = self,id = wx.ID_ANY)

        action_holder = wx.Panel(parent = access_holder,id = wx.ID_ANY)
        delete_button = wx.Button(parent = action_holder,label = '删除')
        add_button = wx.Button(parent = action_holder,label = '添加')
        action_layout = wx.BoxSizer(wx.HORIZONTAL)
        action_layout.Add(window = delete_button)
        action_layout.Add(window = add_button)
        action_holder.SetSizer(action_layout)

        self.key_text = wx.TextCtrl(parent = access_holder)
        self.access_list = wx.ListCtrl(parent = access_holder,id = wx.ID_ANY,style = wx.LC_REPORT)
        self.access_list.EnableCheckBoxes()
        self.access_list.InsertColumn(0,'选择')
        self.access_list.InsertColumn(1,'应用名称')
        self.access_list.InsertColumn(2,'地址')
        self.access_list.InsertColumn(3,'描述')
        self.show_access_item(condition = {'a.app_id':self.Parent.application_ids})

        access_layout = wx.GridBagSizer(vgap = 5,hgap = 10)
        access_layout.Add(window = wx.Panel(parent = access_holder,id = wx.ID_ANY,size = (20,15)),pos = (0,0),flag = wx.EXPAND)
        access_layout.Add(window = wx.Panel(parent = access_holder,id = wx.ID_ANY,size = (0,15)),pos = (0,1),flag = wx.EXPAND)
        access_layout.Add(window = wx.Panel(parent = access_holder,id = wx.ID_ANY,size = (20,15)),pos = (0,2),flag = wx.EXPAND)
        access_layout.Add(window = wx.Panel(parent = access_holder,id = wx.ID_ANY,size = (20,0)),pos = (1,0),flag = wx.EXPAND)
        access_layout.Add(window = self.key_text,pos = (1,1),flag = wx.EXPAND)
        access_layout.Add(window = wx.Panel(parent = access_holder,id = wx.ID_ANY,size = (20,0)),pos = (1,2),flag = wx.EXPAND)
        access_layout.Add(window = wx.Panel(parent = access_holder,id = wx.ID_ANY,size = (20,0)),pos = (2,0),flag = wx.EXPAND)
        access_layout.Add(window = self.access_list,pos = (2,1),flag = wx.EXPAND)
        access_layout.Add(window = wx.Panel(parent = access_holder,id = wx.ID_ANY,size = (20,0)),pos = (2,2),flag = wx.EXPAND)
        access_layout.Add(window = wx.Panel(parent = access_holder,id = wx.ID_ANY,size = (20,0)),pos = (3,0),flag = wx.EXPAND)
        access_layout.Add(window = action_holder,pos = (3,1),flag = wx.ALIGN_RIGHT | wx.EXPAND)
        access_layout.Add(window = wx.Panel(parent = access_holder,id = wx.ID_ANY,size = (20,0)),pos = (3,2),flag = wx.EXPAND)
        access_layout.Add(window = wx.Panel(parent = access_holder,id = wx.ID_ANY,size = (20,15)),pos = (4,0),flag = wx.EXPAND)
        access_layout.Add(window = wx.Panel(parent = access_holder,id = wx.ID_ANY,size = (0,15)),pos = (4,1),flag = wx.EXPAND)
        access_layout.Add(window = wx.Panel(parent = access_holder,id = wx.ID_ANY,size = (20,15)),pos = (4,2),flag = wx.EXPAND)
        access_layout.AddGrowableCol(1)
        access_layout.AddGrowableRow(2)
        access_holder.SetSizer(access_layout)

        #事件绑定
        self.access_list.Bind(event = wx.EVT_LIST_ITEM_CHECKED,handler = self.access_list_ckbox_on_checked)
        self.access_list.Bind(event = wx.EVT_LIST_ITEM_UNCHECKED,handler = self.access_list_ckbox_on_unchecked)
        delete_button.Bind(event = wx.EVT_BUTTON,handler = self.delete_button_on_clicked)
        add_button.Bind(event = wx.EVT_BUTTON,handler = self.add_button_on_clicked)

    '''
    显示访问地址列表
    param condition 查询条件
    param page_size 页面大小
    param page_no 页码
    '''
    def show_access_item(self,condition = {},page_size = -1,page_no = 0):
        accesses = AccessDao.and_list(condition,page_size,page_no)
        index = 0
        i = 0
        for access in accesses[1]:
            index = self.access_list.InsertItem(i,'')
            if -1 == index:
                continue
            self.access_list.CheckItem(index,True) if access['a_access_id'] in self.access_ids else self.access_list.CheckItem(index,False)
            self.access_list.SetItemData(index,access['a_access_id'])
            self.access_list.SetItem(index,1,access['b_app_name'])
            self.access_list.SetItem(index,2,access['a_address'])
            self.access_list.SetItem(index,3,access['a_description'])
            i = i + 1

    '''
    访问地址选中列表事件
    param event 事件信息
    '''
    def access_list_ckbox_on_checked(self,event):
        index = event.GetIndex()
        self.item_indexes.add(index)
        self.access_ids.add(self.access_list.GetItemData(index))

    '''
    访问地址取消选中事件
    param event 事件信息
    '''
    def access_list_ckbox_on_unchecked(self,event):
        index = event.GetIndex()
        self.item_indexes.discard(index)
        self.access_ids.discard(self.access_list.GetItemData(index))

    '''
    删除按钮事件
    param event 事件信息
    '''
    def delete_button_on_clicked(self,event):
        if not any(self.access_ids):
            wx.MessageBox(message = '未选择应用访问地址',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)

            return
        m = ','.join('?' for c in self.access_ids)
        global task_data
        task_data.execute([['DELETE FROM access WHERE (access_id IN (' + m + '))',tuple(self.access_ids)]])
        task_data.commit()
        self.access_ids.clear()

        for index in sorted(self.item_indexes,reverse = True):
            self.access_list.DeleteItem(index)
        self.item_indexes.clear()

    '''
    添加按钮事件
    param 事件信息
    '''
    def add_button_on_clicked(self,event):
        access_setup_window = AccessSetupWindow(self,Operate.ADD.value)
        access_setup_window.Centre()
        access_setup_window.Show()

class AccessSetupWindow(wx.Frame):
    address_text = None
    description_text = None

    def __init__(self,parent,operate):
        super().__init__(id = wx.ID_ANY,parent = parent,title = '添加访问地址 - ' + Constants.APP_NAME,size = (480,170),\
                         style = wx.DEFAULT_FRAME_STYLE ^ wx.RESIZE_BORDER ^ wx.MAXIMIZE_BOX)
        self.SetIcon(Tools.image2icon(base64.b64decode(Constants.APP_ICON)))

        access_setup_holder = wx.Panel(parent = self,id = wx.ID_ANY)

        action_holder = wx.Panel(parent = access_setup_holder,id = wx.ID_ANY)
        setup_button = wx.Button(parent = action_holder,label = '添加')
        action_layout = wx.GridBagSizer(vgap = 5,hgap = 10)
        action_layout.Add(window = setup_button,pos = (0,0),flag = wx.EXPAND)
        action_holder.SetSizer(action_layout)

        self.address_text = wx.TextCtrl(parent = access_setup_holder)
        self.description_text = wx.TextCtrl(parent = access_setup_holder)
        access_setup_layout = wx.GridBagSizer(vgap = 5,hgap = 10)
        access_setup_layout.Add(window = wx.Panel(parent = access_setup_holder,id = wx.ID_ANY,size = (20,15)),pos = (0,0),flag = wx.EXPAND)
        access_setup_layout.Add(window = wx.Panel(parent = access_setup_holder,id = wx.ID_ANY,size = (0,15)),pos = (0,1),span = (1,2),flag = wx.EXPAND)
        access_setup_layout.Add(window = wx.Panel(parent = access_setup_holder,id = wx.ID_ANY,size = (20,15)),pos = (0,3),flag = wx.EXPAND)
        access_setup_layout.Add(window = wx.Panel(parent = access_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (1,0),flag = wx.EXPAND)
        access_setup_layout.Add(window = wx.StaticText(parent = access_setup_holder,label = '地址'),pos = (1,1),\
                                        flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        access_setup_layout.Add(window = self.address_text,pos = (1,2),flag = wx.EXPAND)
        access_setup_layout.Add(window = wx.Panel(parent = access_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (1,3),flag = wx.EXPAND)
        access_setup_layout.Add(window = wx.Panel(parent = access_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (2,0),flag = wx.EXPAND)
        access_setup_layout.Add(window = wx.StaticText(parent = access_setup_holder,label = '描述'),pos = (2,1),\
                                        flag = wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        access_setup_layout.Add(window = self.description_text,pos = (2,2),flag = wx.EXPAND)
        access_setup_layout.Add(window = wx.Panel(parent = access_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (2,3),flag = wx.EXPAND)
        access_setup_layout.Add(window = wx.Panel(parent = access_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (3,0),flag = wx.EXPAND)
        access_setup_layout.Add(window = action_holder,pos = (3,1),span = (1,2),flag = wx.ALIGN_RIGHT | wx.EXPAND)
        access_setup_layout.Add(window = wx.Panel(parent = access_setup_holder,id = wx.ID_ANY,size = (20,0)),pos = (3,3),flag = wx.EXPAND)
        access_setup_layout.Add(window = wx.Panel(parent = access_setup_holder,id = wx.ID_ANY,size = (20,15)),pos = (4,0),flag = wx.EXPAND)
        access_setup_layout.Add(window = wx.Panel(parent = access_setup_holder,id = wx.ID_ANY,size = (0,15)),pos = (4,1),span = (1,2),flag = wx.EXPAND)
        access_setup_layout.Add(window = wx.Panel(parent = access_setup_holder,id = wx.ID_ANY,size = (20,15)),pos = (4,3),flag = wx.EXPAND)
        access_setup_layout.AddGrowableCol(2)
        access_setup_holder.SetSizer(access_setup_layout)

        #事件绑定
        setup_button.Bind(event = wx.EVT_BUTTON,handler = self.setup_button_on_clicked)

    def setup_button_on_clicked(self,event):
        address = self.address_text.GetValue()
        description = self.description_text.GetValue()
        if not address:
            wx.MessageBox(message = '地址为空',caption = '警告',style = wx.OK | wx.ICON_WARNING,parent = self)
            self.address_text.SetFocus()

            return

        global task_data
        global current_user
        try:
            access_id = ParameterDao.auto_increment(ParameterName.ACCESS_ID.value)
            application_id = list(self.Parent.Parent.application_ids)[0]
            task_data.execute([['INSERT INTO access VALUES (?,?,?,?,?,?)',\
                                (access_id,application_id,address,description,\
                                 current_user.user_id,datetime.datetime.now())]])
            task_data.commit()
            index = self.Parent.access_list.InsertItem(0,'')
            if -1 != index:
                application = ApplicationDao.obt_by_primary_key(application_id)
                if application:
                    application_name = application['app_name']
                else:
                    application_name = ''
                self.Parent.access_list.SetItemData(index,access_id)
                self.Parent.access_list.SetItem(index,1,application_name)
                self.Parent.access_list.SetItem(index,2,address)
                self.Parent.access_list.SetItem(index,3,description)
            self.Destroy()
        except Exception as e:
            task_data.rollback()

            wx.MessageBox(message = '保存应用地址错误',caption = '错误',style = wx.OK | wx.ERROR,parent = self)
            traceback.print_exc()

'''
程序入口
'''
if '__main__' == __name__:
    current_user = None
    
    task_data = Sqlite3Manager(Constants.TASK_DATA)
    task_manager = TaskManager()
    task_manager.MainLoop()
